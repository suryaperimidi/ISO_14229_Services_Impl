
uds_test0.1 services.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008960  08008960  0000a0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008968  08008968  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008968  08008968  00009968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800896c  0800896c  0000996c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08008970  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0a0  2**0
                  CONTENTS
 10 .bss          0001b330  200000a0  200000a0  0000a0a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001b3d0  2001b3d0  0000a0a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f7af  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d0d  00000000  00000000  0001987f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  0001c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7c  00000000  00000000  0001d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b4d  00000000  00000000  0001dfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121c3  00000000  00000000  00040b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9112  00000000  00000000  00052cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011bdfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000411c  00000000  00000000  0011be44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000090  00000000  00000000  0011ff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008874 	.word	0x08008874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08008874 	.word	0x08008874

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <uds_read_data_by_identifier>:
/**
 * @brief Impl�mente le service ReadDataByIdentifier (0x22)
 * @param data : Pointeur vers les donn�es de la requ�te (contenant les dataIdentifiers)
 * @param data_length : Longueur des donn�es
 */
void uds_read_data_by_identifier(uint8_t* data, uint8_t data_length) {
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b095      	sub	sp, #84	@ 0x54
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

	reset_s3_timer();
 80005b8:	f000 fc6c 	bl	8000e94 <reset_s3_timer>
    // V�rification de la longueur minimale et modulo 2 de la requ�te
    if (data_length < 2 || data_length % 2 != 0) {
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d905      	bls.n	80005ce <uds_read_data_by_identifier+0x22>
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d003      	beq.n	80005d6 <uds_read_data_by_identifier+0x2a>
        send_negative_response_read_data_by_identifier(NRC_INCORRECT_MESSAGE_LENGTH);
 80005ce:	2013      	movs	r0, #19
 80005d0:	f000 f946 	bl	8000860 <send_negative_response_read_data_by_identifier>
        return;
 80005d4:	e12c      	b.n	8000830 <uds_read_data_by_identifier+0x284>
    }

    // V�rification de la longueur maximale de la requ�te
    if (data_length > MAX_DATA_SIZE) {
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	2b40      	cmp	r3, #64	@ 0x40
 80005da:	d903      	bls.n	80005e4 <uds_read_data_by_identifier+0x38>
        send_negative_response_read_data_by_identifier(NRC_INCORRECT_MESSAGE_LENGTH);
 80005dc:	2013      	movs	r0, #19
 80005de:	f000 f93f 	bl	8000860 <send_negative_response_read_data_by_identifier>
        return;
 80005e2:	e125      	b.n	8000830 <uds_read_data_by_identifier+0x284>
    }

    uint8_t response[MAX_DATA_SIZE] = {0};  // R�ponse maximale de 64 octets
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2240      	movs	r2, #64	@ 0x40
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f007 fd71 	bl	80080d4 <memset>
    uint8_t response_index = 0;  // Index de remplissage de la r�ponse
 80005f2:	2300      	movs	r3, #0
 80005f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    bool did_supported = false;  // Indicateur pour v�rifier si au moins un DID est support�
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    response[response_index++] = UDS_READ_DATA_BY_IDENTIFIER + 0x40;  // SID de r�ponse 0x62
 80005fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	f887 204f 	strb.w	r2, [r7, #79]	@ 0x4f
 8000608:	3350      	adds	r3, #80	@ 0x50
 800060a:	443b      	add	r3, r7
 800060c:	2262      	movs	r2, #98	@ 0x62
 800060e:	f803 2c48 	strb.w	r2, [r3, #-72]

    // Boucle pour chaque dataIdentifier
    for (uint8_t i = 0; i < data_length; i += 2) {
 8000612:	2300      	movs	r3, #0
 8000614:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000618:	e0e2      	b.n	80007e0 <uds_read_data_by_identifier+0x234>
        uint16_t did = (data[i] << 8) | data[i + 1];  // R�cup�ration du DID
 800061a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b21b      	sxth	r3, r3
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	b21a      	sxth	r2, r3
 800062a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800062e:	3301      	adds	r3, #1
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	440b      	add	r3, r1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        // V�rification si le service est support� pour chaque DID dans la session active
        if (!is_service_allowed(UDS_READ_DATA_BY_IDENTIFIER)) {
 8000640:	2022      	movs	r0, #34	@ 0x22
 8000642:	f000 fc65 	bl	8000f10 <is_service_allowed>
 8000646:	4603      	mov	r3, r0
 8000648:	f083 0301 	eor.w	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <uds_read_data_by_identifier+0xae>
            send_negative_response_read_data_by_identifier(NRC_CONDITIONS_NOT_CORRECT);
 8000652:	2022      	movs	r0, #34	@ 0x22
 8000654:	f000 f904 	bl	8000860 <send_negative_response_read_data_by_identifier>
            return;
 8000658:	e0ea      	b.n	8000830 <uds_read_data_by_identifier+0x284>
        }

        // V�rification des conditions de s�curit� pour le DID
        if (is_security_required_for_did(did) && !uds_session.security_access_granted) {
 800065a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f8f2 	bl	8000848 <is_security_required_for_did>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <uds_read_data_by_identifier+0xd4>
 800066a:	4b73      	ldr	r3, [pc, #460]	@ (8000838 <uds_read_data_by_identifier+0x28c>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <uds_read_data_by_identifier+0xd4>
            send_negative_response_read_data_by_identifier(NRC_SECURITY_ACCESS_DENIED);
 8000678:	2033      	movs	r0, #51	@ 0x33
 800067a:	f000 f8f1 	bl	8000860 <send_negative_response_read_data_by_identifier>
            return;
 800067e:	e0d7      	b.n	8000830 <uds_read_data_by_identifier+0x284>
        }

        switch (did) {
 8000680:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000684:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000688:	4293      	cmp	r3, r2
 800068a:	d06d      	beq.n	8000768 <uds_read_data_by_identifier+0x1bc>
 800068c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000690:	4293      	cmp	r3, r2
 8000692:	f300 809f 	bgt.w	80007d4 <uds_read_data_by_identifier+0x228>
 8000696:	f241 0201 	movw	r2, #4097	@ 0x1001
 800069a:	4293      	cmp	r3, r2
 800069c:	d004      	beq.n	80006a8 <uds_read_data_by_identifier+0xfc>
 800069e:	f241 0202 	movw	r2, #4098	@ 0x1002
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d032      	beq.n	800070c <uds_read_data_by_identifier+0x160>
                did_supported = true;
                break;

            default:
                // Si le DID n'est pas support�, continuer la boucle sans r�pondre imm�diatement
                continue;
 80006a6:	e095      	b.n	80007d4 <uds_read_data_by_identifier+0x228>
                response[response_index++] = data[i];       // MSB du DID
 80006a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	441a      	add	r2, r3
 80006b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006b4:	1c59      	adds	r1, r3, #1
 80006b6:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	3350      	adds	r3, #80	@ 0x50
 80006be:	443b      	add	r3, r7
 80006c0:	f803 2c48 	strb.w	r2, [r3, #-72]
                response[response_index++] = data[i + 1];   // LSB du DID
 80006c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80006c8:	3301      	adds	r3, #1
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	441a      	add	r2, r3
 80006ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006d2:	1c59      	adds	r1, r3, #1
 80006d4:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	3350      	adds	r3, #80	@ 0x50
 80006dc:	443b      	add	r3, r7
 80006de:	f803 2c48 	strb.w	r2, [r3, #-72]
                memcpy(&response[response_index], data_record_1, sizeof(data_record_1));
 80006e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006e6:	f107 0208 	add.w	r2, r7, #8
 80006ea:	4413      	add	r3, r2
 80006ec:	4a53      	ldr	r2, [pc, #332]	@ (800083c <uds_read_data_by_identifier+0x290>)
 80006ee:	461c      	mov	r4, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006f4:	6020      	str	r0, [r4, #0]
 80006f6:	6061      	str	r1, [r4, #4]
 80006f8:	60a2      	str	r2, [r4, #8]
                response_index += sizeof(data_record_1);
 80006fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006fe:	330c      	adds	r3, #12
 8000700:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                did_supported = true;
 8000704:	2301      	movs	r3, #1
 8000706:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
                break;
 800070a:	e05b      	b.n	80007c4 <uds_read_data_by_identifier+0x218>
                response[response_index++] = data[i];       // MSB du DID
 800070c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	441a      	add	r2, r3
 8000714:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000718:	1c59      	adds	r1, r3, #1
 800071a:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800071e:	7812      	ldrb	r2, [r2, #0]
 8000720:	3350      	adds	r3, #80	@ 0x50
 8000722:	443b      	add	r3, r7
 8000724:	f803 2c48 	strb.w	r2, [r3, #-72]
                response[response_index++] = data[i + 1];   // LSB du DID
 8000728:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800072c:	3301      	adds	r3, #1
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	441a      	add	r2, r3
 8000732:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000736:	1c59      	adds	r1, r3, #1
 8000738:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	3350      	adds	r3, #80	@ 0x50
 8000740:	443b      	add	r3, r7
 8000742:	f803 2c48 	strb.w	r2, [r3, #-72]
                memcpy(&response[response_index], data_record_2, sizeof(data_record_2));
 8000746:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800074a:	f107 0208 	add.w	r2, r7, #8
 800074e:	4413      	add	r3, r2
 8000750:	4a3b      	ldr	r2, [pc, #236]	@ (8000840 <uds_read_data_by_identifier+0x294>)
 8000752:	8812      	ldrh	r2, [r2, #0]
 8000754:	801a      	strh	r2, [r3, #0]
                response_index += sizeof(data_record_2);
 8000756:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800075a:	3302      	adds	r3, #2
 800075c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                did_supported = true;
 8000760:	2301      	movs	r3, #1
 8000762:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
                break;
 8000766:	e02d      	b.n	80007c4 <uds_read_data_by_identifier+0x218>
                response[response_index++] = data[i];       // MSB du DID
 8000768:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	441a      	add	r2, r3
 8000770:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000774:	1c59      	adds	r1, r3, #1
 8000776:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	3350      	adds	r3, #80	@ 0x50
 800077e:	443b      	add	r3, r7
 8000780:	f803 2c48 	strb.w	r2, [r3, #-72]
                response[response_index++] = data[i + 1];   // LSB du DID
 8000784:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000788:	3301      	adds	r3, #1
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	441a      	add	r2, r3
 800078e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000792:	1c59      	adds	r1, r3, #1
 8000794:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	3350      	adds	r3, #80	@ 0x50
 800079c:	443b      	add	r3, r7
 800079e:	f803 2c48 	strb.w	r2, [r3, #-72]
                memcpy(&response[response_index], data_record_3, sizeof(data_record_3));
 80007a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80007a6:	f107 0208 	add.w	r2, r7, #8
 80007aa:	4413      	add	r3, r2
 80007ac:	4a25      	ldr	r2, [pc, #148]	@ (8000844 <uds_read_data_by_identifier+0x298>)
 80007ae:	8812      	ldrh	r2, [r2, #0]
 80007b0:	801a      	strh	r2, [r3, #0]
                response_index += sizeof(data_record_3);
 80007b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80007b6:	3302      	adds	r3, #2
 80007b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                did_supported = true;
 80007bc:	2301      	movs	r3, #1
 80007be:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
                break;
 80007c2:	bf00      	nop
        }

        // V�rifier si la taille de la r�ponse d�passe la limite du protocole de transport
        if (response_index > MAX_DATA_SIZE) {
 80007c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80007c8:	2b40      	cmp	r3, #64	@ 0x40
 80007ca:	d904      	bls.n	80007d6 <uds_read_data_by_identifier+0x22a>
            send_negative_response_read_data_by_identifier(NRC_RESPONSE_TOO_LONG);
 80007cc:	2014      	movs	r0, #20
 80007ce:	f000 f847 	bl	8000860 <send_negative_response_read_data_by_identifier>
            return;
 80007d2:	e02d      	b.n	8000830 <uds_read_data_by_identifier+0x284>
                continue;
 80007d4:	bf00      	nop
    for (uint8_t i = 0; i < data_length; i += 2) {
 80007d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80007da:	3302      	adds	r3, #2
 80007dc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80007e0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	f4ff af17 	bcc.w	800061a <uds_read_data_by_identifier+0x6e>
        }
    }


    // Si aucun DID n'est support�, renvoyer une r�ponse n�gative
    if (!did_supported) {
 80007ec:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80007f0:	f083 0301 	eor.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <uds_read_data_by_identifier+0x256>
        send_negative_response_read_data_by_identifier(NRC_REQUEST_OUT_OF_RANGE);
 80007fa:	2031      	movs	r0, #49	@ 0x31
 80007fc:	f000 f830 	bl	8000860 <send_negative_response_read_data_by_identifier>
        return;
 8000800:	e016      	b.n	8000830 <uds_read_data_by_identifier+0x284>
    }

    if(response_index >= 7)
 8000802:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000806:	2b06      	cmp	r3, #6
 8000808:	d90a      	bls.n	8000820 <uds_read_data_by_identifier+0x274>
    {
    	can_tp_send(0x7E0, response, response_index);
 800080a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800080e:	b29a      	uxth	r2, r3
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800081a:	f003 fdbf 	bl	800439c <can_tp_send>
 800081e:	e007      	b.n	8000830 <uds_read_data_by_identifier+0x284>
    }
    else
    {
    	send_can_message(response, response_index);
 8000820:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fa60 	bl	8000cf0 <send_can_message>
    }

    // Envoyer la r�ponse positive avec tous les DIDs trait�s

    // send_uart_message(response, response_index);
}
 8000830:	3754      	adds	r7, #84	@ 0x54
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	bf00      	nop
 8000838:	20000014 	.word	0x20000014
 800083c:	20000000 	.word	0x20000000
 8000840:	2000000c 	.word	0x2000000c
 8000844:	20000010 	.word	0x20000010

08000848 <is_security_required_for_did>:

bool is_security_required_for_did(uint16_t did) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
    // Ajoutez ici la logique pour v�rifier si un DID n�cessite un acc�s de s�curit�
    return false;  // Par d�faut, supposons que les DIDs ne n�cessitent pas de s�curit�
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <send_negative_response_read_data_by_identifier>:

/**
 * @brief Envoie une r�ponse n�gative pour le service ReadDataByIdentifier (0x22)
 * @param nrc : Code de r�ponse n�gative (NRC)
 */
void send_negative_response_read_data_by_identifier(uint8_t nrc) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
    uint8_t response[8] = {0};
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]

    response[0] = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	723b      	strb	r3, [r7, #8]
    response[1] = UDS_NEGATIVE_RESPONSE;  // SID pour r�ponse n�gative 0x7F
 8000878:	237f      	movs	r3, #127	@ 0x7f
 800087a:	727b      	strb	r3, [r7, #9]
    response[2] = UDS_READ_DATA_BY_IDENTIFIER;  // SID du service 0x22
 800087c:	2322      	movs	r3, #34	@ 0x22
 800087e:	72bb      	strb	r3, [r7, #10]
    response[3] = nrc;  // Code de r�ponse n�gative (NRC)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	72fb      	strb	r3, [r7, #11]

    send_can_message(response, 8);
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2108      	movs	r1, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fa30 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, 3);
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <uds_read_data_by_periodic_identifier>:
/****************************************************ReadDataByPeriodicIdentifier***********************************************/
// Initialisation de la liste des PIDs p�riodiques
PeriodicPIDInfo periodic_pid_list[MAX_PERIODIC_PIDS];

// Fonction principale pour g�rer la requ�te ReadDataByPeriodicIdentifier
void uds_read_data_by_periodic_identifier(uint8_t* data, uint8_t data_length) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
    // V�rification de la longueur minimale du message
    if (data_length < 2) {
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d803      	bhi.n	80008b2 <uds_read_data_by_periodic_identifier+0x1a>
        send_negative_response_read_data_by_periodic_identifier(NRC_INCORRECT_MESSAGE_LENGTH);
 80008aa:	2013      	movs	r0, #19
 80008ac:	f000 f8e6 	bl	8000a7c <send_negative_response_read_data_by_periodic_identifier>
        return;
 80008b0:	e05b      	b.n	800096a <uds_read_data_by_periodic_identifier+0xd2>
    }

    uint8_t transmissionMode = data[1]; // Byte 2 : Mode de transmission
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	73bb      	strb	r3, [r7, #14]
    if (transmissionMode < UDS_TRANSMISSION_MODE_SLOW || transmissionMode > UDS_TRANSMISSION_MODE_STOP) {
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <uds_read_data_by_periodic_identifier+0x2c>
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	d903      	bls.n	80008cc <uds_read_data_by_periodic_identifier+0x34>
        send_negative_response_read_data_by_periodic_identifier(NRC_REQUEST_OUT_OF_RANGE);
 80008c4:	2031      	movs	r0, #49	@ 0x31
 80008c6:	f000 f8d9 	bl	8000a7c <send_negative_response_read_data_by_periodic_identifier>
        return;
 80008ca:	e04e      	b.n	800096a <uds_read_data_by_periodic_identifier+0xd2>
    }

    // V�rification de la longueur pour chaque mode
    if (transmissionMode == UDS_TRANSMISSION_MODE_STOP && data_length < 2) {
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d106      	bne.n	80008e0 <uds_read_data_by_periodic_identifier+0x48>
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d803      	bhi.n	80008e0 <uds_read_data_by_periodic_identifier+0x48>
        send_negative_response_read_data_by_periodic_identifier(NRC_INCORRECT_MESSAGE_LENGTH);
 80008d8:	2013      	movs	r0, #19
 80008da:	f000 f8cf 	bl	8000a7c <send_negative_response_read_data_by_periodic_identifier>
        return;
 80008de:	e044      	b.n	800096a <uds_read_data_by_periodic_identifier+0xd2>
    } else if (transmissionMode != UDS_TRANSMISSION_MODE_STOP && data_length < 3) {
 80008e0:	7bbb      	ldrb	r3, [r7, #14]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d006      	beq.n	80008f4 <uds_read_data_by_periodic_identifier+0x5c>
 80008e6:	78fb      	ldrb	r3, [r7, #3]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d803      	bhi.n	80008f4 <uds_read_data_by_periodic_identifier+0x5c>
        send_negative_response_read_data_by_periodic_identifier(NRC_INCORRECT_MESSAGE_LENGTH);
 80008ec:	2013      	movs	r0, #19
 80008ee:	f000 f8c5 	bl	8000a7c <send_negative_response_read_data_by_periodic_identifier>
        return;
 80008f2:	e03a      	b.n	800096a <uds_read_data_by_periodic_identifier+0xd2>
    }

    // Boucle pour traiter tous les periodicDataIdentifiers (PIDs) fournis
    for (uint8_t i = 2; i < data_length; i++) {
 80008f4:	2302      	movs	r3, #2
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e031      	b.n	800095e <uds_read_data_by_periodic_identifier+0xc6>
        uint8_t periodicDataIdentifier = data[i];
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	737b      	strb	r3, [r7, #13]

        // V�rifier si le PID est valide dans la session active
        if (!is_pid_supported_in_session(periodicDataIdentifier)) {
 8000904:	7b7b      	ldrb	r3, [r7, #13]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f8cd 	bl	8000aa6 <is_pid_supported_in_session>
 800090c:	4603      	mov	r3, r0
 800090e:	f083 0301 	eor.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <uds_read_data_by_periodic_identifier+0x88>
            send_negative_response_read_data_by_periodic_identifier(NRC_REQUEST_OUT_OF_RANGE);
 8000918:	2031      	movs	r0, #49	@ 0x31
 800091a:	f000 f8af 	bl	8000a7c <send_negative_response_read_data_by_periodic_identifier>
            return;
 800091e:	e024      	b.n	800096a <uds_read_data_by_periodic_identifier+0xd2>
        }

        // V�rifier la s�curit� si n�cessaire
        if (!is_security_granted_for_pid(periodicDataIdentifier)) {
 8000920:	7b7b      	ldrb	r3, [r7, #13]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f8da 	bl	8000adc <is_security_granted_for_pid>
 8000928:	4603      	mov	r3, r0
 800092a:	f083 0301 	eor.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d003      	beq.n	800093c <uds_read_data_by_periodic_identifier+0xa4>
            send_negative_response_read_data_by_periodic_identifier(NRC_SECURITY_ACCESS_DENIED);
 8000934:	2033      	movs	r0, #51	@ 0x33
 8000936:	f000 f8a1 	bl	8000a7c <send_negative_response_read_data_by_periodic_identifier>
            return;
 800093a:	e016      	b.n	800096a <uds_read_data_by_periodic_identifier+0xd2>
        }

        // Traitement du mode stopSending
        if (transmissionMode == UDS_TRANSMISSION_MODE_STOP) {
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d104      	bne.n	800094c <uds_read_data_by_periodic_identifier+0xb4>
            stop_periodic_transmission(periodicDataIdentifier);
 8000942:	7b7b      	ldrb	r3, [r7, #13]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f855 	bl	80009f4 <stop_periodic_transmission>
 800094a:	e005      	b.n	8000958 <uds_read_data_by_periodic_identifier+0xc0>
        } else {
            // D�marrer la transmission p�riodique pour ce PID
            start_periodic_transmission(periodicDataIdentifier, transmissionMode);
 800094c:	7bba      	ldrb	r2, [r7, #14]
 800094e:	7b7b      	ldrb	r3, [r7, #13]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f80c 	bl	8000970 <start_periodic_transmission>
    for (uint8_t i = 2; i < data_length; i++) {
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	3301      	adds	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	7bfa      	ldrb	r2, [r7, #15]
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	429a      	cmp	r2, r3
 8000964:	d3c9      	bcc.n	80008fa <uds_read_data_by_periodic_identifier+0x62>
        }
    }

    // Envoyer la r�ponse initiale positive
    send_positive_response_read_data_by_periodic_identifier();
 8000966:	f000 f879 	bl	8000a5c <send_positive_response_read_data_by_periodic_identifier>
}
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <start_periodic_transmission>:

// Fonction pour d�marrer la transmission p�riodique
void start_periodic_transmission(uint8_t pid, uint8_t mode) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	4613      	mov	r3, r2
 800097e:	71bb      	strb	r3, [r7, #6]
    // Parcourir la liste des PIDs p�riodiques pour trouver un emplacement libre
    for (int i = 0; i < MAX_PERIODIC_PIDS; i++) {
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e02a      	b.n	80009dc <start_periodic_transmission+0x6c>
        if (!periodic_pid_list[i].isActive) {
 8000986:	491a      	ldr	r1, [pc, #104]	@ (80009f0 <start_periodic_transmission+0x80>)
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	440b      	add	r3, r1
 8000992:	3302      	adds	r3, #2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f083 0301 	eor.w	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d01a      	beq.n	80009d6 <start_periodic_transmission+0x66>
            // Initialiser les param�tres pour ce PID
            periodic_pid_list[i].periodicDataIdentifier = pid;
 80009a0:	4913      	ldr	r1, [pc, #76]	@ (80009f0 <start_periodic_transmission+0x80>)
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	701a      	strb	r2, [r3, #0]
            periodic_pid_list[i].transmissionMode = mode;
 80009b0:	490f      	ldr	r1, [pc, #60]	@ (80009f0 <start_periodic_transmission+0x80>)
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	440b      	add	r3, r1
 80009bc:	3301      	adds	r3, #1
 80009be:	79ba      	ldrb	r2, [r7, #6]
 80009c0:	701a      	strb	r2, [r3, #0]
            periodic_pid_list[i].isActive = true;
 80009c2:	490b      	ldr	r1, [pc, #44]	@ (80009f0 <start_periodic_transmission+0x80>)
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	3302      	adds	r3, #2
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            return;
 80009d4:	e008      	b.n	80009e8 <start_periodic_transmission+0x78>
    for (int i = 0; i < MAX_PERIODIC_PIDS; i++) {
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	ddd1      	ble.n	8000986 <start_periodic_transmission+0x16>
        }
    }

    // Si aucun emplacement n'est libre, envoyer une r�ponse n�gative
    send_negative_response_read_data_by_periodic_identifier(NRC_CONDITIONS_NOT_CORRECT);
 80009e2:	2022      	movs	r0, #34	@ 0x22
 80009e4:	f000 f84a 	bl	8000a7c <send_negative_response_read_data_by_periodic_identifier>
}
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000bc 	.word	0x200000bc

080009f4 <stop_periodic_transmission>:

// Fonction pour arr�ter la transmission p�riodique pour un PID donn�
void stop_periodic_transmission(uint8_t pid) {
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < MAX_PERIODIC_PIDS; i++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e020      	b.n	8000a46 <stop_periodic_transmission+0x52>
        if (periodic_pid_list[i].periodicDataIdentifier == pid && periodic_pid_list[i].isActive) {
 8000a04:	4914      	ldr	r1, [pc, #80]	@ (8000a58 <stop_periodic_transmission+0x64>)
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d113      	bne.n	8000a40 <stop_periodic_transmission+0x4c>
 8000a18:	490f      	ldr	r1, [pc, #60]	@ (8000a58 <stop_periodic_transmission+0x64>)
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	3302      	adds	r3, #2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d009      	beq.n	8000a40 <stop_periodic_transmission+0x4c>
            periodic_pid_list[i].isActive = false;
 8000a2c:	490a      	ldr	r1, [pc, #40]	@ (8000a58 <stop_periodic_transmission+0x64>)
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	3302      	adds	r3, #2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
            return;
 8000a3e:	e005      	b.n	8000a4c <stop_periodic_transmission+0x58>
    for (int i = 0; i < MAX_PERIODIC_PIDS; i++) {
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	dddb      	ble.n	8000a04 <stop_periodic_transmission+0x10>
        }
    }
}
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200000bc 	.word	0x200000bc

08000a5c <send_positive_response_read_data_by_periodic_identifier>:
        periodic_pid_list[i].isActive = false;
    }
}

// Fonction pour envoyer une r�ponse positive initiale
void send_positive_response_read_data_by_periodic_identifier(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
    uint8_t response[2];
    response[0] = UDS_READ_DATA_BY_PERIODIC_IDENTIFIER + 0x40; // R�ponse positive SID
 8000a62:	236a      	movs	r3, #106	@ 0x6a
 8000a64:	713b      	strb	r3, [r7, #4]
    response[1] = 0x00; // No data required in the positive response
 8000a66:	2300      	movs	r3, #0
 8000a68:	717b      	strb	r3, [r7, #5]

    // Envoyer la r�ponse via CAN
    send_can_message(response, 2);
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f93e 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, 2);
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <send_negative_response_read_data_by_periodic_identifier>:

// Fonction pour envoyer une r�ponse n�gative
void send_negative_response_read_data_by_periodic_identifier(uint8_t nrc) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
    uint8_t response[3];
    response[0] = UDS_NEGATIVE_RESPONSE; // SID for negative response
 8000a86:	237f      	movs	r3, #127	@ 0x7f
 8000a88:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_READ_DATA_BY_PERIODIC_IDENTIFIER; // SID du service
 8000a8a:	232a      	movs	r3, #42	@ 0x2a
 8000a8c:	737b      	strb	r3, [r7, #13]
    response[2] = nrc; // NRC code
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	73bb      	strb	r3, [r7, #14]

    send_can_message(response, 3);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2103      	movs	r1, #3
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f929 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, 3);
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <is_pid_supported_in_session>:

// V�rification si un PID est support� dans la session active
bool is_pid_supported_in_session(uint8_t pid) {
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
    // V�rification des PIDs support�s (cette logique peut �tre modifi�e en fonction de la session)
    if (pid == 0xE3 || pid == 0x24 || pid == 0x01 || pid == 0x02) {
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2be3      	cmp	r3, #227	@ 0xe3
 8000ab4:	d008      	beq.n	8000ac8 <is_pid_supported_in_session+0x22>
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b24      	cmp	r3, #36	@ 0x24
 8000aba:	d005      	beq.n	8000ac8 <is_pid_supported_in_session+0x22>
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d002      	beq.n	8000ac8 <is_pid_supported_in_session+0x22>
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d101      	bne.n	8000acc <is_pid_supported_in_session+0x26>
        return true;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <is_pid_supported_in_session+0x28>
    }
    return false;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <is_security_granted_for_pid>:

// V�rification des autorisations de s�curit� pour un PID
bool is_security_granted_for_pid(uint8_t pid) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    // Simuler une v�rification de s�curit�. Modifier cette fonction selon les besoins.
    // Par exemple, v�rifier si le pid n�cessite une session s�curis�e.
    return uds_session.security_access_granted;
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <is_security_granted_for_pid+0x1c>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000014 	.word	0x20000014

08000afc <uds_write_data_by_identifier>:

// Stockage fictif pour les DIDs, � remplacer par la logique r�elle de votre syst�me
uint8_t did_storage[MAX_DATA_SIZE] = {0};

// Fonction principale pour g�rer le service WriteDataByIdentifier (0x2E)
void uds_write_data_by_identifier(uint8_t* data, uint8_t data_length) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
    // V�rification de la longueur minimale du message (4 octets : SID + DID + au moins 1 octet de donn�es)
    if (data_length < 4) {
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d803      	bhi.n	8000b16 <uds_write_data_by_identifier+0x1a>
        send_negative_response_write_data_by_identifier(NRC_INCORRECT_MESSAGE_LENGTH);
 8000b0e:	2013      	movs	r0, #19
 8000b10:	f000 f8c5 	bl	8000c9e <send_negative_response_write_data_by_identifier>
        return;
 8000b14:	e053      	b.n	8000bbe <uds_write_data_by_identifier+0xc2>
    }

    // Extraire le dataIdentifier (DID) de la requ�te
    uint16_t dataIdentifier = (data[0] << 8) | data[1];
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	82fb      	strh	r3, [r7, #22]

    // V�rifier si le DID est support� et writable dans la session actuelle
    if (!is_data_identifier_supported_for_write(dataIdentifier)) {
 8000b2e:	8afb      	ldrh	r3, [r7, #22]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f849 	bl	8000bc8 <is_data_identifier_supported_for_write>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <uds_write_data_by_identifier+0x4e>
        send_negative_response_write_data_by_identifier(NRC_REQUEST_OUT_OF_RANGE);
 8000b42:	2031      	movs	r0, #49	@ 0x31
 8000b44:	f000 f8ab 	bl	8000c9e <send_negative_response_write_data_by_identifier>
        return;
 8000b48:	e039      	b.n	8000bbe <uds_write_data_by_identifier+0xc2>
    }

    // V�rification de la s�curit� (si le DID n�cessite un acc�s s�curis�)
    if (is_security_required_for_did(dataIdentifier) && !uds_session.security_access_granted) {
 8000b4a:	8afb      	ldrh	r3, [r7, #22]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe7b 	bl	8000848 <is_security_required_for_did>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00a      	beq.n	8000b6e <uds_write_data_by_identifier+0x72>
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <uds_write_data_by_identifier+0xc8>)
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	f083 0301 	eor.w	r3, r3, #1
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <uds_write_data_by_identifier+0x72>
        send_negative_response_write_data_by_identifier(NRC_SECURITY_ACCESS_DENIED);
 8000b66:	2033      	movs	r0, #51	@ 0x33
 8000b68:	f000 f899 	bl	8000c9e <send_negative_response_write_data_by_identifier>
        return;
 8000b6c:	e027      	b.n	8000bbe <uds_write_data_by_identifier+0xc2>
    }

    // V�rifier les conditions d'�criture (par ex. session, �tat de l'ECU)
    if (!are_conditions_correct_for_did(dataIdentifier)) {
 8000b6e:	8afb      	ldrh	r3, [r7, #22]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f8a9 	bl	8000cc8 <are_conditions_correct_for_did>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <uds_write_data_by_identifier+0x8e>
        send_negative_response_write_data_by_identifier(NRC_CONDITIONS_NOT_CORRECT);
 8000b82:	2022      	movs	r0, #34	@ 0x22
 8000b84:	f000 f88b 	bl	8000c9e <send_negative_response_write_data_by_identifier>
        return;
 8000b88:	e019      	b.n	8000bbe <uds_write_data_by_identifier+0xc2>
    }

    // Extraire le dataRecord � partir du message
    uint8_t* dataRecord = &data[2];
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
    uint8_t dataRecordLength = data_length - 2;
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	3b02      	subs	r3, #2
 8000b94:	73fb      	strb	r3, [r7, #15]

    // Effectuer l'�criture des donn�es dans le DID sp�cifi�
    if (!write_data_to_identifier(dataIdentifier, dataRecord, dataRecordLength)) {
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	8afb      	ldrh	r3, [r7, #22]
 8000b9a:	6939      	ldr	r1, [r7, #16]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f827 	bl	8000bf0 <write_data_to_identifier>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f083 0301 	eor.w	r3, r3, #1
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <uds_write_data_by_identifier+0xba>
        send_negative_response_write_data_by_identifier(NRC_GENERAL_PROGRAMMING_FAILURE);
 8000bae:	2072      	movs	r0, #114	@ 0x72
 8000bb0:	f000 f875 	bl	8000c9e <send_negative_response_write_data_by_identifier>
        return;
 8000bb4:	e003      	b.n	8000bbe <uds_write_data_by_identifier+0xc2>
    }

    // Envoyer une r�ponse positive apr�s �criture r�ussie
    send_positive_response_write_data_by_identifier(dataIdentifier);
 8000bb6:	8afb      	ldrh	r3, [r7, #22]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f857 	bl	8000c6c <send_positive_response_write_data_by_identifier>
}
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000014 	.word	0x20000014

08000bc8 <is_data_identifier_supported_for_write>:

// Fonction pour v�rifier si un DID est support� pour l'�criture
bool is_data_identifier_supported_for_write(uint16_t dataIdentifier) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
    // Impl�mentez la logique ici pour v�rifier si le DID est writable
    switch (dataIdentifier) {
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d801      	bhi.n	8000be2 <is_data_identifier_supported_for_write+0x1a>
        case SUPPORTED_DID_1:
        case SUPPORTED_DID_2:
        case SUPPORTED_DID_3:
            return true;  // Ces DIDs supportent l'�criture
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <is_data_identifier_supported_for_write+0x1c>
        default:
            return false; // DID non support�
 8000be2:	2300      	movs	r3, #0
    }
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <write_data_to_identifier>:



// Fonction pour �crire des donn�es dans le DID sp�cifi�
bool write_data_to_identifier(uint16_t dataIdentifier, uint8_t* dataRecord, uint8_t dataLength) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	80fb      	strh	r3, [r7, #6]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	717b      	strb	r3, [r7, #5]
    // Impl�mentez la logique pour �crire les donn�es dans la m�moire associ�e au DID
    // Exemple simple : �crire dans une zone de m�moire fictive
    switch (dataIdentifier) {
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d01c      	beq.n	8000c44 <write_data_to_identifier+0x54>
 8000c0a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	dc20      	bgt.n	8000c54 <write_data_to_identifier+0x64>
 8000c12:	f241 0201 	movw	r2, #4097	@ 0x1001
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d004      	beq.n	8000c24 <write_data_to_identifier+0x34>
 8000c1a:	f241 0202 	movw	r2, #4098	@ 0x1002
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d008      	beq.n	8000c34 <write_data_to_identifier+0x44>
 8000c22:	e017      	b.n	8000c54 <write_data_to_identifier+0x64>
        case SUPPORTED_DID_1:
            memcpy(&did_storage[0], dataRecord, dataLength);
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	461a      	mov	r2, r3
 8000c28:	6839      	ldr	r1, [r7, #0]
 8000c2a:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <write_data_to_identifier+0x70>)
 8000c2c:	f007 fa96 	bl	800815c <memcpy>
            return true;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e010      	b.n	8000c56 <write_data_to_identifier+0x66>
        case SUPPORTED_DID_2:
            memcpy(&did_storage[16], dataRecord, dataLength);
 8000c34:	797b      	ldrb	r3, [r7, #5]
 8000c36:	461a      	mov	r2, r3
 8000c38:	6839      	ldr	r1, [r7, #0]
 8000c3a:	480a      	ldr	r0, [pc, #40]	@ (8000c64 <write_data_to_identifier+0x74>)
 8000c3c:	f007 fa8e 	bl	800815c <memcpy>
            return true;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e008      	b.n	8000c56 <write_data_to_identifier+0x66>
        case SUPPORTED_DID_3:
            memcpy(&did_storage[32], dataRecord, dataLength);
 8000c44:	797b      	ldrb	r3, [r7, #5]
 8000c46:	461a      	mov	r2, r3
 8000c48:	6839      	ldr	r1, [r7, #0]
 8000c4a:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <write_data_to_identifier+0x78>)
 8000c4c:	f007 fa86 	bl	800815c <memcpy>
            return true;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <write_data_to_identifier+0x66>
        default:
            return false;
 8000c54:	2300      	movs	r3, #0
    }
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000ec 	.word	0x200000ec
 8000c64:	200000fc 	.word	0x200000fc
 8000c68:	2000010c 	.word	0x2000010c

08000c6c <send_positive_response_write_data_by_identifier>:

// Fonction pour envoyer une r�ponse positive apr�s �criture r�ussie
void send_positive_response_write_data_by_identifier(uint16_t dataIdentifier) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
    uint8_t response[3];
    response[0] = UDS_WRITE_DATA_BY_IDENTIFIER + 0x40; // R�ponse positive SID (0x2E + 0x40 = 0x6E)
 8000c76:	236e      	movs	r3, #110	@ 0x6e
 8000c78:	733b      	strb	r3, [r7, #12]
    response[1] = (dataIdentifier >> 8) & 0xFF;       // Octet MSB du dataIdentifier
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	737b      	strb	r3, [r7, #13]
    response[2] = dataIdentifier & 0xFF;              // Octet LSB du dataIdentifier
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	73bb      	strb	r3, [r7, #14]
    send_can_message(response, 3);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2103      	movs	r1, #3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f82d 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, 3);
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <send_negative_response_write_data_by_identifier>:

// Fonction pour envoyer une r�ponse n�gative pour WriteDataByIdentifier
void send_negative_response_write_data_by_identifier(uint8_t nrc) {
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
    uint8_t response[3];
    response[0] = UDS_NEGATIVE_RESPONSE;   // SID pour une r�ponse n�gative
 8000ca8:	237f      	movs	r3, #127	@ 0x7f
 8000caa:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_WRITE_DATA_BY_IDENTIFIER; // SID du service WriteDataByIdentifier (0x2E)
 8000cac:	232e      	movs	r3, #46	@ 0x2e
 8000cae:	737b      	strb	r3, [r7, #13]
    response[2] = nrc;                     // Code NRC
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	73bb      	strb	r3, [r7, #14]
    send_can_message(response, 3);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2103      	movs	r1, #3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f818 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, 3);
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <are_conditions_correct_for_did>:

// Fonction pour v�rifier les conditions sp�cifiques (exemple : �tat de la session)
bool are_conditions_correct_for_did(uint16_t dataIdentifier) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
    // Impl�mentez des v�rifications suppl�mentaires si n�cessaire
    // Exemple : autorisation seulement dans une session �tendue
    if (uds_session.current_session == 0) {  // Session par d�faut
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <are_conditions_correct_for_did+0x24>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <are_conditions_correct_for_did+0x16>
        return false;  // Conditions non remplies si la session est par d�faut
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <are_conditions_correct_for_did+0x18>
    }
    return true;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20000014 	.word	0x20000014

08000cf0 <send_can_message>:

void send_can_message(uint8_t *message, uint8_t length) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;

    TxHeader.DLC = length;
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	623b      	str	r3, [r7, #32]
    TxHeader.StdId = 0x7E8; // Identifiant standard UDS pour l'ECU
 8000d00:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 8000d04:	613b      	str	r3, [r7, #16]
    TxHeader.IDE = CAN_ID_STD;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	f107 0110 	add.w	r1, r7, #16
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <send_can_message+0x40>)
 8000d1a:	f004 fc77 	bl	800560c <HAL_CAN_AddTxMessage>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <send_can_message+0x38>
        // G�rer l'erreur d'envoi
        Error_handler();
 8000d24:	f003 fe56 	bl	80049d4 <Error_handler>
    }
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2001b1f0 	.word	0x2001b1f0

08000d34 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d38:	f3bf 8f4f 	dsb	sy
}
 8000d3c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <__NVIC_SystemReset+0x24>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d46:	4904      	ldr	r1, [pc, #16]	@ (8000d58 <__NVIC_SystemReset+0x24>)
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <__NVIC_SystemReset+0x28>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d4e:	f3bf 8f4f 	dsb	sy
}
 8000d52:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <__NVIC_SystemReset+0x20>
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	05fa0004 	.word	0x05fa0004

08000d60 <uds_diagnostic_session_control>:

/**
 * @brief Diagnostic Session Control
 * @param session_type : Session type for diagnostic (Default, Programming, Extended, Safety)
 */
void uds_diagnostic_session_control(uint8_t session_type, uint8_t len) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	460a      	mov	r2, r1
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71bb      	strb	r3, [r7, #6]
    uint8_t message_length = len; // Example of UDS message length
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	73fb      	strb	r3, [r7, #15]

    if (!is_service_allowed(UDS_DIAGNOSTIC_SESSION_CONTROL)) {
 8000d74:	2010      	movs	r0, #16
 8000d76:	f000 f8cb 	bl	8000f10 <is_service_allowed>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d004      	beq.n	8000d90 <uds_diagnostic_session_control+0x30>
            send_negative_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL, NRC_CONDITIONS_NOT_CORRECT);
 8000d86:	2122      	movs	r1, #34	@ 0x22
 8000d88:	2010      	movs	r0, #16
 8000d8a:	f000 f98d 	bl	80010a8 <send_negative_response_diagnostic_control>
            return;
 8000d8e:	e060      	b.n	8000e52 <uds_diagnostic_session_control+0xf2>
        }
    if (message_length != 2) {
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d004      	beq.n	8000da0 <uds_diagnostic_session_control+0x40>
        send_negative_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL, NRC_INCORRECT_MESSAGE_LENGTH);
 8000d96:	2113      	movs	r1, #19
 8000d98:	2010      	movs	r0, #16
 8000d9a:	f000 f985 	bl	80010a8 <send_negative_response_diagnostic_control>
        return;
 8000d9e:	e058      	b.n	8000e52 <uds_diagnostic_session_control+0xf2>
    }

    switch (session_type) {
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d84f      	bhi.n	8000e48 <uds_diagnostic_session_control+0xe8>
 8000da8:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <uds_diagnostic_session_control+0x50>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000dfb 	.word	0x08000dfb
 8000db8:	08000e15 	.word	0x08000e15
 8000dbc:	08000e2f 	.word	0x08000e2f
        case UDS_SESSION_DEFAULT:
            if (uds_session.current_session == UDS_SESSION_DEFAULT)
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <uds_diagnostic_session_control+0xf8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d109      	bne.n	8000ddc <uds_diagnostic_session_control+0x7c>
            {
            	//reseting the s3 timer to 0
            	reset_s3_timer();
 8000dc8:	f000 f864 	bl	8000e94 <reset_s3_timer>
            	set_p2_p2_star_server_timer();
 8000dcc:	f000 f852 	bl	8000e74 <set_p2_p2_star_server_timer>
            	// Reset the session to default
                reset_default_session();
 8000dd0:	f000 f844 	bl	8000e5c <reset_default_session>
                send_positive_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL);
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f000 f927 	bl	8001028 <send_positive_response_diagnostic_control>
                reset_events();
                deactivate_extended_services();
                uds_session.current_session = UDS_SESSION_DEFAULT;
                send_positive_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL);
            }
            break;
 8000dda:	e03a      	b.n	8000e52 <uds_diagnostic_session_control+0xf2>
            	reset_s3_timer();
 8000ddc:	f000 f85a 	bl	8000e94 <reset_s3_timer>
            	set_p2_p2_star_server_timer();
 8000de0:	f000 f848 	bl	8000e74 <set_p2_p2_star_server_timer>
                reset_events();
 8000de4:	f000 f886 	bl	8000ef4 <reset_events>
                deactivate_extended_services();
 8000de8:	f000 f88b 	bl	8000f02 <deactivate_extended_services>
                uds_session.current_session = UDS_SESSION_DEFAULT;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <uds_diagnostic_session_control+0xf8>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
                send_positive_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL);
 8000df2:	2010      	movs	r0, #16
 8000df4:	f000 f918 	bl	8001028 <send_positive_response_diagnostic_control>
            break;
 8000df8:	e02b      	b.n	8000e52 <uds_diagnostic_session_control+0xf2>

        case UDS_SESSION_PROGRAMMING:
        	//reseting the s3 timer to 0
        	reset_s3_timer();
 8000dfa:	f000 f84b 	bl	8000e94 <reset_s3_timer>
        	set_p2_p2_star_server_timer();
 8000dfe:	f000 f839 	bl	8000e74 <set_p2_p2_star_server_timer>
        	// Switch to the programming session
            reset_events();
 8000e02:	f000 f877 	bl	8000ef4 <reset_events>
            uds_session.current_session = UDS_SESSION_PROGRAMMING;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <uds_diagnostic_session_control+0xf8>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	701a      	strb	r2, [r3, #0]
            send_positive_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL);
 8000e0c:	2010      	movs	r0, #16
 8000e0e:	f000 f90b 	bl	8001028 <send_positive_response_diagnostic_control>
            break;
 8000e12:	e01e      	b.n	8000e52 <uds_diagnostic_session_control+0xf2>

        case UDS_SESSION_EXTENDED_DIAGNOSTIC:
        	//reseting the s3 timer to 0
        	reset_s3_timer();
 8000e14:	f000 f83e 	bl	8000e94 <reset_s3_timer>
        	set_p2_p2_star_server_timer();
 8000e18:	f000 f82c 	bl	8000e74 <set_p2_p2_star_server_timer>

        	// Passing the extended diagnostic session
            reset_events();
 8000e1c:	f000 f86a 	bl	8000ef4 <reset_events>
            uds_session.current_session = UDS_SESSION_EXTENDED_DIAGNOSTIC;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <uds_diagnostic_session_control+0xf8>)
 8000e22:	2203      	movs	r2, #3
 8000e24:	701a      	strb	r2, [r3, #0]
            send_positive_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL);
 8000e26:	2010      	movs	r0, #16
 8000e28:	f000 f8fe 	bl	8001028 <send_positive_response_diagnostic_control>
            break;
 8000e2c:	e011      	b.n	8000e52 <uds_diagnostic_session_control+0xf2>

        case UDS_SESSION_SAFETY_SYSTEM:
        	reset_s3_timer();
 8000e2e:	f000 f831 	bl	8000e94 <reset_s3_timer>
        	set_p2_p2_star_server_timer();
 8000e32:	f000 f81f 	bl	8000e74 <set_p2_p2_star_server_timer>

        	// Switch to the security session.
            reset_events();
 8000e36:	f000 f85d 	bl	8000ef4 <reset_events>
            uds_session.current_session = UDS_SESSION_SAFETY_SYSTEM;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <uds_diagnostic_session_control+0xf8>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	701a      	strb	r2, [r3, #0]
            send_positive_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL);
 8000e40:	2010      	movs	r0, #16
 8000e42:	f000 f8f1 	bl	8001028 <send_positive_response_diagnostic_control>
            break;
 8000e46:	e004      	b.n	8000e52 <uds_diagnostic_session_control+0xf2>

        default:
        	// Negative response for unsupported subfunction
            send_negative_response_diagnostic_control(UDS_DIAGNOSTIC_SESSION_CONTROL, NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8000e48:	2112      	movs	r1, #18
 8000e4a:	2010      	movs	r0, #16
 8000e4c:	f000 f92c 	bl	80010a8 <send_negative_response_diagnostic_control>
            break;
 8000e50:	bf00      	nop
    }
}
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000014 	.word	0x20000014

08000e5c <reset_default_session>:


/**
 * @brief Reset session to default
 */
void reset_default_session() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	// Resets the session settings to default
    uds_session.security_access_granted = false;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <reset_default_session+0x14>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	705a      	strb	r2, [r3, #1]
    // Reset events and other specific parameters
    //reset_events();
    deactivate_extended_services();
 8000e66:	f000 f84c 	bl	8000f02 <deactivate_extended_services>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000014 	.word	0x20000014

08000e74 <set_p2_p2_star_server_timer>:

/**
 * @brief Initialization of diagnostic session server timer
 */
void set_p2_p2_star_server_timer()
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	//initializing the p2 and p2* server timer
	timing_para.p2_server_max = 50;
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <set_p2_p2_star_server_timer+0x1c>)
 8000e7a:	2232      	movs	r2, #50	@ 0x32
 8000e7c:	801a      	strh	r2, [r3, #0]
	timing_para.p2_star_server_max = 500;
 8000e7e:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <set_p2_p2_star_server_timer+0x1c>)
 8000e80:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e84:	805a      	strh	r2, [r3, #2]
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	2000012c 	.word	0x2000012c

08000e94 <reset_s3_timer>:
/**
 * @brief when the session switch from one session to other session reset the s3 timer
 */
void reset_s3_timer()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	//resetting s3 timer
    uds_session.s3_timer = 0;
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <reset_s3_timer+0x1c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	809a      	strh	r2, [r3, #4]
    uds_session.s3_timeout_active = true;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <reset_s3_timer+0x1c>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	709a      	strb	r2, [r3, #2]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000014 	.word	0x20000014

08000eb4 <UDS_Timer_1ms_Tick>:

/**
 * @brief Reset session to default when session timer exceeds the s3 timer
 */
void UDS_Timer_1ms_Tick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    // Handle S3
    if (uds_session.s3_timeout_active)
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <UDS_Timer_1ms_Tick+0x3c>)
 8000eba:	789b      	ldrb	r3, [r3, #2]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d011      	beq.n	8000ee4 <UDS_Timer_1ms_Tick+0x30>
    {
        uds_session.s3_timer++;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <UDS_Timer_1ms_Tick+0x3c>)
 8000ec2:	889b      	ldrh	r3, [r3, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <UDS_Timer_1ms_Tick+0x3c>)
 8000eca:	809a      	strh	r2, [r3, #4]
        if (uds_session.s3_timer >= uds_session.s3_timer_counter)
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <UDS_Timer_1ms_Tick+0x3c>)
 8000ece:	889a      	ldrh	r2, [r3, #4]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <UDS_Timer_1ms_Tick+0x3c>)
 8000ed2:	88db      	ldrh	r3, [r3, #6]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d305      	bcc.n	8000ee4 <UDS_Timer_1ms_Tick+0x30>
        {
            uds_session.current_session = UDS_SESSION_DEFAULT;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <UDS_Timer_1ms_Tick+0x3c>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
            uds_session.s3_timeout_active = false;
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <UDS_Timer_1ms_Tick+0x3c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	709a      	strb	r2, [r3, #2]
        }
    }

    // Similarly, call P2 / P2* tick functions if enabled
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000014 	.word	0x20000014

08000ef4 <reset_events>:

/**
 * @brief Resets active events (eg: ResponseOnEvent)
 */
void reset_events()
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	// Stops all active events triggered in non-default sessions


}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <deactivate_extended_services>:

/**
 * @brief Disables unsupported services in the default session
 */
void deactivate_extended_services() {
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
	// Disable extended services like CommunicationControl, ResponseOnEvent, etc.
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <is_service_allowed>:
/**
 * @brief Checks if a service is allowed in the current session
 * @param service_id: UDS service identifier
 * @return true if the service is authorized, false otherwise
 */
bool is_service_allowed(uint8_t service_id) {
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
    switch (service_id) {
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b87      	cmp	r3, #135	@ 0x87
 8000f1e:	dc77      	bgt.n	8001010 <is_service_allowed+0x100>
 8000f20:	2b83      	cmp	r3, #131	@ 0x83
 8000f22:	da4f      	bge.n	8000fc4 <is_service_allowed+0xb4>
 8000f24:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f26:	dc46      	bgt.n	8000fb6 <is_service_allowed+0xa6>
 8000f28:	2b10      	cmp	r3, #16
 8000f2a:	da23      	bge.n	8000f74 <is_service_allowed+0x64>
 8000f2c:	e070      	b.n	8001010 <is_service_allowed+0x100>
 8000f2e:	3b31      	subs	r3, #49	@ 0x31
 8000f30:	2b0d      	cmp	r3, #13
 8000f32:	d86d      	bhi.n	8001010 <is_service_allowed+0x100>
 8000f34:	a201      	add	r2, pc, #4	@ (adr r2, 8000f3c <is_service_allowed+0x2c>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000ff3 	.word	0x08000ff3
 8000f40:	08001011 	.word	0x08001011
 8000f44:	08001011 	.word	0x08001011
 8000f48:	08000fc5 	.word	0x08000fc5
 8000f4c:	08000fc5 	.word	0x08000fc5
 8000f50:	08000fc5 	.word	0x08000fc5
 8000f54:	08000fc5 	.word	0x08000fc5
 8000f58:	08000fc5 	.word	0x08000fc5
 8000f5c:	08001011 	.word	0x08001011
 8000f60:	08001011 	.word	0x08001011
 8000f64:	08001011 	.word	0x08001011
 8000f68:	08001011 	.word	0x08001011
 8000f6c:	08000fc5 	.word	0x08000fc5
 8000f70:	08000fc1 	.word	0x08000fc1
 8000f74:	3b10      	subs	r3, #16
 8000f76:	2201      	movs	r2, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	4a28      	ldr	r2, [pc, #160]	@ (8001020 <is_service_allowed+0x110>)
 8000f7e:	401a      	ands	r2, r3
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2201      	movne	r2, #1
 8000f86:	2200      	moveq	r2, #0
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d122      	bne.n	8000fd4 <is_service_allowed+0xc4>
 8000f8e:	f240 2213 	movw	r2, #531	@ 0x213
 8000f92:	401a      	ands	r2, r3
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	bf14      	ite	ne
 8000f98:	2201      	movne	r2, #1
 8000f9a:	2200      	moveq	r2, #0
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	d10e      	bne.n	8000fc0 <is_service_allowed+0xb0>
 8000fa2:	f003 73c4 	and.w	r3, r3, #25690112	@ 0x1880000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d107      	bne.n	8000fc4 <is_service_allowed+0xb4>
 8000fb4:	e02c      	b.n	8001010 <is_service_allowed+0x100>
 8000fb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8000fb8:	dc2a      	bgt.n	8001010 <is_service_allowed+0x100>
 8000fba:	2b31      	cmp	r3, #49	@ 0x31
 8000fbc:	dab7      	bge.n	8000f2e <is_service_allowed+0x1e>
 8000fbe:	e027      	b.n	8001010 <is_service_allowed+0x100>
        case UDS_ECU_RESET:
        case UDS_TESTER_PRESENT:
        case UDS_CLEAR_DIAGNOSTIC_INFORMATION:
        case UDS_READ_DTC_INFORMATION:
        	// These services are always allowed in both sessions
            return true;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e026      	b.n	8001012 <is_service_allowed+0x102>
        case UDS_REQUEST_UPLOAD:
        case UDS_TRANSFER_DATA:
        case UDS_REQUEST_TRANSFER_EXIT:
        case UDS_REQUEST_FILE_TRANSFER:
        	// These services are only allowed in non-default sessions
            return uds_session.current_session != UDS_SESSION_DEFAULT;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <is_service_allowed+0x114>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	e01e      	b.n	8001012 <is_service_allowed+0x102>
        case UDS_READ_DATA_BY_IDENTIFIER:
        case UDS_WRITE_DATA_BY_IDENTIFIER:
        case UDS_READ_SCALING_DATA_BY_IDENTIFIER:
        case UDS_DYNAMICAL_DEFINE_DATA_IDENTIFIER:
        	// These services require security access, so they are not allowed in session by default
            return uds_session.current_session != UDS_SESSION_DEFAULT && uds_session.security_access_granted;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <is_service_allowed+0x114>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d005      	beq.n	8000fe8 <is_service_allowed+0xd8>
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <is_service_allowed+0x114>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <is_service_allowed+0xd8>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <is_service_allowed+0xda>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	e00f      	b.n	8001012 <is_service_allowed+0x102>

        case UDS_ROUTINE_CONTROL:
        	// RoutineControl also requires security access and a non-default session
            return uds_session.current_session != UDS_SESSION_DEFAULT && uds_session.security_access_granted;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <is_service_allowed+0x114>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <is_service_allowed+0xf6>
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <is_service_allowed+0x114>)
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <is_service_allowed+0xf6>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <is_service_allowed+0xf8>
 8001006:	2300      	movs	r3, #0
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	e000      	b.n	8001012 <is_service_allowed+0x102>

        default:
        	// For other services not listed
            return false;
 8001010:	2300      	movs	r3, #0
    }
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	50140000 	.word	0x50140000
 8001024:	20000014 	.word	0x20000014

08001028 <send_positive_response_diagnostic_control>:

/**
 * @brief Sends a positive response to the client
 * @param service_id: Identifier of the service for which the response is sent
 */
void send_positive_response_diagnostic_control(uint8_t service_id) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
   uint8_t response[8] = {0};
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
   response[0]=0x06;
 800103c:	2306      	movs	r3, #6
 800103e:	723b      	strb	r3, [r7, #8]
   // SID response to indicate success (add 0x40 to service ID)
    response[1] = service_id + 0x40; // For example, for DiagnosticSessionControl, it will be 0x50
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	3340      	adds	r3, #64	@ 0x40
 8001044:	b2db      	uxtb	r3, r3
 8001046:	727b      	strb	r3, [r7, #9]

    // Sub-function : session type response current (default, extended, etc.)
    response[2] = uds_session.current_session;
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <send_positive_response_diagnostic_control+0x74>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	72bb      	strb	r3, [r7, #10]

    // Session Parameter Record: additional data (P2Server_max and P2*Server_max for example)
    // Let's simulate values for these timings (in ms)

    response[3] = (timing_para.p2_server_max >> 8) & 0xFF;        // P2Server_max high byte
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <send_positive_response_diagnostic_control+0x78>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	b29b      	uxth	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	72fb      	strb	r3, [r7, #11]
    response[4] = (timing_para.p2_server_max) & 0xFF;             // P2Server_max low byte (50 ms par exemple)
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <send_positive_response_diagnostic_control+0x78>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	733b      	strb	r3, [r7, #12]
    response[5] = (timing_para.p2_star_server_max >> 8) & 0xFF;   // P2*Server_max high byte
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <send_positive_response_diagnostic_control+0x78>)
 8001064:	885b      	ldrh	r3, [r3, #2]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	737b      	strb	r3, [r7, #13]
    response[6] = (timing_para.p2_star_server_max) & 0xFF;        // P2*Server_max low byte (500 ms par exemple)
 800106e:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <send_positive_response_diagnostic_control+0x78>)
 8001070:	885b      	ldrh	r3, [r3, #2]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	73bb      	strb	r3, [r7, #14]
    // Length of response data (6 bytes in this case)

    uds_session.suppress = suppress;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <send_positive_response_diagnostic_control+0x7c>)
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <send_positive_response_diagnostic_control+0x74>)
 800107c:	70da      	strb	r2, [r3, #3]

    if(!uds_session.suppress)
 800107e:	4b07      	ldr	r3, [pc, #28]	@ (800109c <send_positive_response_diagnostic_control+0x74>)
 8001080:	78db      	ldrb	r3, [r3, #3]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d105      	bne.n	8001092 <send_positive_response_diagnostic_control+0x6a>
    {
    	send_can_message(response, 7);
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	2107      	movs	r1, #7
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fe2f 	bl	8000cf0 <send_can_message>
    }
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000014 	.word	0x20000014
 80010a0:	2000012c 	.word	0x2000012c
 80010a4:	2001b27c 	.word	0x2001b27c

080010a8 <send_negative_response_diagnostic_control>:
/**
 * @brief Envoie une r�ponse n�gative au client
 * @param service_id : Identifiant du service pour lequel la r�ponse est envoy�e
 * @param nrc : Code de r�ponse n�gative (NRC)
 */
void send_negative_response_diagnostic_control(uint8_t service_id, uint8_t nrc) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
    uint8_t response[4] = {0};
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
    response[0]=0x04;
 80010bc:	2304      	movs	r3, #4
 80010be:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_NEGATIVE_RESPONSE; // R�ponse n�gative g�n�rique
 80010c0:	237f      	movs	r3, #127	@ 0x7f
 80010c2:	737b      	strb	r3, [r7, #13]
    response[2] = service_id; // Service concern�
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	73bb      	strb	r3, [r7, #14]
    response[3] = nrc; // Code NRC (Negative Response Code)
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	73fb      	strb	r3, [r7, #15]

    send_can_message(response, 4);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2104      	movs	r1, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fe0c 	bl	8000cf0 <send_can_message>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <uds_ecu_reset>:
/**********************************************ECU RESET***********************************************************************/
/**
 * @brief ECU Reset Service
 * @param resetType : Type of reset requested by the client (e.g., hard reset, soft reset, etc.)
 */
void uds_ecu_reset(uint8_t resetType, uint8_t len) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
	// Verification of the validity of the resetType
    if (resetType > UDS_RESET_TYPE_DISABLE_RAPID_POWER_SHUTDOWN) {
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	d904      	bls.n	8001100 <uds_ecu_reset+0x20>
        send_negative_response_ecu_reset(UDS_ECU_RESET, NRC_SUB_FUNCTION_NOT_SUPPORTED);
 80010f6:	2112      	movs	r1, #18
 80010f8:	2011      	movs	r0, #17
 80010fa:	f000 f855 	bl	80011a8 <send_negative_response_ecu_reset>
        return;
 80010fe:	e033      	b.n	8001168 <uds_ecu_reset+0x88>
    }

    // Build the positive response (SID = 0x51)
    uint8_t response[4] = {0x04, 0x51, resetType, 0xFF}; // 0xFF for "powerDownTime" if applicable
 8001100:	2304      	movs	r3, #4
 8001102:	733b      	strb	r3, [r7, #12]
 8001104:	2351      	movs	r3, #81	@ 0x51
 8001106:	737b      	strb	r3, [r7, #13]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	73bb      	strb	r3, [r7, #14]
 800110c:	23ff      	movs	r3, #255	@ 0xff
 800110e:	73fb      	strb	r3, [r7, #15]
    send_can_message(response, 4);  // Send the response before executing the reset
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fdea 	bl	8000cf0 <send_can_message>

    // Execution of reset according to resetType
    switch (resetType) {
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	3b01      	subs	r3, #1
 8001120:	2b04      	cmp	r3, #4
 8001122:	d819      	bhi.n	8001158 <uds_ecu_reset+0x78>
 8001124:	a201      	add	r2, pc, #4	@ (adr r2, 800112c <uds_ecu_reset+0x4c>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	08001141 	.word	0x08001141
 8001130:	08001159 	.word	0x08001159
 8001134:	08001147 	.word	0x08001147
 8001138:	0800114d 	.word	0x0800114d
 800113c:	08001153 	.word	0x08001153
        case UDS_RESET_TYPE_HARD_RESET:
            hard_reset();  // Function that performs a hard reset
 8001140:	f000 f818 	bl	8001174 <hard_reset>
            break;
 8001144:	e00d      	b.n	8001162 <uds_ecu_reset+0x82>
        case UDS_RESET_TYPE_SOFT_RESET:
            soft_reset();  // Function that performs a soft reset
 8001146:	f000 f819 	bl	800117c <soft_reset>
            break;
 800114a:	e00a      	b.n	8001162 <uds_ecu_reset+0x82>
        case UDS_RESET_TYPE_ENABLE_RAPID_POWER_SHUTDOWN:
        	// Enable the fast power shutdown function
            enable_rapid_power_shutdown();
 800114c:	f000 f81d 	bl	800118a <enable_rapid_power_shutdown>
            break;
 8001150:	e007      	b.n	8001162 <uds_ecu_reset+0x82>
        case UDS_RESET_TYPE_DISABLE_RAPID_POWER_SHUTDOWN:
        	// Disable the fast power off function
            disable_rapid_power_shutdown();
 8001152:	f000 f822 	bl	800119a <disable_rapid_power_shutdown>
            break;
 8001156:	e004      	b.n	8001162 <uds_ecu_reset+0x82>
        default:
        	// In case of unsupported reset type
            send_negative_response_ecu_reset(UDS_ECU_RESET, NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8001158:	2112      	movs	r1, #18
 800115a:	2011      	movs	r0, #17
 800115c:	f000 f824 	bl	80011a8 <send_negative_response_ecu_reset>
            return;
 8001160:	e002      	b.n	8001168 <uds_ecu_reset+0x88>
    }

    // After reset, return to the default session
    uds_session.current_session = UDS_SESSION_DEFAULT;
 8001162:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <uds_ecu_reset+0x90>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
}
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000014 	.word	0x20000014

08001174 <hard_reset>:

void hard_reset() {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	// Using the NVIC function to trigger a hard reset
    NVIC_SystemReset();
 8001178:	f7ff fddc 	bl	8000d34 <__NVIC_SystemReset>

0800117c <soft_reset>:
}
void key_on_off_reset()
{

}
void soft_reset() {
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	// Example of a soft reset that could restart the application without resetting the hardware registers
	// You can define your own logic here to reset only the necessary parts
	// for example, reset some devices or restart tasks without resetting the entire system.

	// Restart the main loop or reset some devices
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <enable_rapid_power_shutdown>:
void enable_rapid_power_shutdown() {
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
	// Enter low power mode
	// Example with the STM32 Stop mode
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800118e:	2101      	movs	r1, #1
 8001190:	2000      	movs	r0, #0
 8001192:	f005 f9df 	bl	8006554 <HAL_PWR_EnterSTOPMode>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}

0800119a <disable_rapid_power_shutdown>:
void disable_rapid_power_shutdown() {
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <send_negative_response_ecu_reset>:
/**
 * @brief Envoie une r�ponse n�gative pour le service ECUReset
 * @param service_id : Identifiant du service ECUReset (0x11)
 * @param nrc : Code de r�ponse n�gative (NRC)
 */
void send_negative_response_ecu_reset(uint8_t service_id, uint8_t nrc) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	460a      	mov	r2, r1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	71bb      	strb	r3, [r7, #6]
    uint8_t response[4] = {0};
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]

    // Remplir le message de r�ponse n�gative
    response[0]=0x03;
 80011bc:	2303      	movs	r3, #3
 80011be:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_NEGATIVE_RESPONSE;         // R�ponse n�gative g�n�rique
 80011c0:	237f      	movs	r3, #127	@ 0x7f
 80011c2:	737b      	strb	r3, [r7, #13]
    response[2] = service_id;   // Service concern� (ECUReset 0x11)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	73bb      	strb	r3, [r7, #14]
    response[3] = nrc;          // NRC sp�cifique
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	73fb      	strb	r3, [r7, #15]

    // Traitement des diff�rents NRC en fonction des conditions
    switch (nrc) {
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	2b33      	cmp	r3, #51	@ 0x33
 80011d0:	d013      	beq.n	80011fa <send_negative_response_ecu_reset+0x52>
 80011d2:	2b33      	cmp	r3, #51	@ 0x33
 80011d4:	dc14      	bgt.n	8001200 <send_negative_response_ecu_reset+0x58>
 80011d6:	2b22      	cmp	r3, #34	@ 0x22
 80011d8:	d00c      	beq.n	80011f4 <send_negative_response_ecu_reset+0x4c>
 80011da:	2b22      	cmp	r3, #34	@ 0x22
 80011dc:	dc10      	bgt.n	8001200 <send_negative_response_ecu_reset+0x58>
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d002      	beq.n	80011e8 <send_negative_response_ecu_reset+0x40>
 80011e2:	2b13      	cmp	r3, #19
 80011e4:	d003      	beq.n	80011ee <send_negative_response_ecu_reset+0x46>
 80011e6:	e00b      	b.n	8001200 <send_negative_response_ecu_reset+0x58>
        case NRC_SUB_FUNCTION_NOT_SUPPORTED:
            // Code 0x12 : Sous-fonction non prise en charge
            response[2] = NRC_SUB_FUNCTION_NOT_SUPPORTED;
 80011e8:	2312      	movs	r3, #18
 80011ea:	73bb      	strb	r3, [r7, #14]
            break;
 80011ec:	e00b      	b.n	8001206 <send_negative_response_ecu_reset+0x5e>
        case NRC_INCORRECT_MESSAGE_LENGTH:
            // Code 0x13 : Longueur ou format du message incorrect
            response[2] = NRC_INCORRECT_MESSAGE_LENGTH;
 80011ee:	2313      	movs	r3, #19
 80011f0:	73bb      	strb	r3, [r7, #14]
            break;
 80011f2:	e008      	b.n	8001206 <send_negative_response_ecu_reset+0x5e>
        case NRC_CONDITIONS_NOT_CORRECT:
            // Code 0x22 : Conditions non respect�es pour l'ECU Reset
            response[2] = NRC_CONDITIONS_NOT_CORRECT;
 80011f4:	2322      	movs	r3, #34	@ 0x22
 80011f6:	73bb      	strb	r3, [r7, #14]
            break;
 80011f8:	e005      	b.n	8001206 <send_negative_response_ecu_reset+0x5e>
        case NRC_SECURITY_ACCESS_DENIED:
            // Code 0x33 : Acc�s de s�curit� refus�
            response[2] = NRC_SECURITY_ACCESS_DENIED;
 80011fa:	2333      	movs	r3, #51	@ 0x33
 80011fc:	73bb      	strb	r3, [r7, #14]
            break;
 80011fe:	e002      	b.n	8001206 <send_negative_response_ecu_reset+0x5e>
        default:
            // Autres codes de r�ponse n�gative non d�finis
            response[2] = 0x7F; // Code g�n�rique d'erreur si non reconnu
 8001200:	237f      	movs	r3, #127	@ 0x7f
 8001202:	73bb      	strb	r3, [r7, #14]
            break;
 8001204:	bf00      	nop
    }

    // Envoyer la r�ponse CAN avec le code NRC appropri�
    send_can_message(response, 4);
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2104      	movs	r1, #4
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fd6f 	bl	8000cf0 <send_can_message>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <uds_security_access>:
uint8_t security_seed_lvl1[2] = {0x36,0x57}; // Seed pr d fini pour niveau 1
uint8_t security_key_lvl1[2] = {0xC9,0xA9};  // Cl  pr d finie pour le seed de niveau 1
uint8_t security_seed_lvl2[2] = {0x5A,0x9B}; // Seed pr d fini pour niveau 2
uint8_t security_key_lvl2[2]= {0xA5,0x65};  // Cl  pr d finie pour le seed de niveau 2

void uds_security_access(uint8_t sub_function, uint8_t *data, uint8_t data_length) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
    switch (sub_function) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	3b01      	subs	r3, #1
 8001230:	2b03      	cmp	r3, #3
 8001232:	d847      	bhi.n	80012c4 <uds_security_access+0xa8>
 8001234:	a201      	add	r2, pc, #4	@ (adr r2, 800123c <uds_security_access+0x20>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	0800124d 	.word	0x0800124d
 8001240:	08001255 	.word	0x08001255
 8001244:	08001289 	.word	0x08001289
 8001248:	08001291 	.word	0x08001291
        case UDS_SECURITY_ACCESS_REQUEST_SEED_LVL1:
            // Demande de seed pour le niveau 1
            send_seed(UDS_SECURITY_ACCESS_REQUEST_SEED_LVL1);
 800124c:	2001      	movs	r0, #1
 800124e:	f000 f843 	bl	80012d8 <send_seed>
            //send_positive_response_security_access(UDS_SECURITY_ACCESS_REQUEST_SEED_LVL1);
            break;
 8001252:	e03d      	b.n	80012d0 <uds_security_access+0xb4>

        case UDS_SECURITY_ACCESS_SEND_KEY_LVL1:
            // V rifier la longueur des donn es envoy es
            if (data_length != 4) {
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d005      	beq.n	8001266 <uds_security_access+0x4a>
                send_negative_response_security_access(sub_function, NRC_INCORRECT_MESSAGE_LENGTH);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2113      	movs	r1, #19
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f8c9 	bl	80013f6 <send_negative_response_security_access>
                return;
 8001264:	e034      	b.n	80012d0 <uds_security_access+0xb4>
            }
            // V rifier la cl  envoy e
            if (verify_key(UDS_SECURITY_ACCESS_SEND_KEY_LVL1, data)) {
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	2002      	movs	r0, #2
 800126a:	f000 f867 	bl	800133c <verify_key>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <uds_security_access+0x60>
                send_positive_response_security_access(UDS_SECURITY_ACCESS_SEND_KEY_LVL1);
 8001274:	2002      	movs	r0, #2
 8001276:	f000 f899 	bl	80013ac <send_positive_response_security_access>
            } else {
                send_negative_response_security_access(sub_function, NRC_INVALID_KEY);
            }
            break;
 800127a:	e029      	b.n	80012d0 <uds_security_access+0xb4>
                send_negative_response_security_access(sub_function, NRC_INVALID_KEY);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2135      	movs	r1, #53	@ 0x35
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f8b8 	bl	80013f6 <send_negative_response_security_access>
            break;
 8001286:	e023      	b.n	80012d0 <uds_security_access+0xb4>

        case UDS_SECURITY_ACCESS_REQUEST_SEED_LVL2:
            // Demande de seed pour le niveau 2
            send_seed(UDS_SECURITY_ACCESS_REQUEST_SEED_LVL2);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f825 	bl	80012d8 <send_seed>
            //send_positive_response_security_access(UDS_SECURITY_ACCESS_REQUEST_SEED_LVL2);
            break;
 800128e:	e01f      	b.n	80012d0 <uds_security_access+0xb4>

        case UDS_SECURITY_ACCESS_SEND_KEY_LVL2:
            // V rifier la longueur des donn es envoy es
            if (data_length != 2) {
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d005      	beq.n	80012a2 <uds_security_access+0x86>
                send_negative_response_security_access(sub_function, NRC_INCORRECT_MESSAGE_LENGTH);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2113      	movs	r1, #19
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f8ab 	bl	80013f6 <send_negative_response_security_access>
                return;
 80012a0:	e016      	b.n	80012d0 <uds_security_access+0xb4>
            }
            // V rifier la cl  envoy e
            if (verify_key(UDS_SECURITY_ACCESS_SEND_KEY_LVL2, data)) {
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	2004      	movs	r0, #4
 80012a6:	f000 f849 	bl	800133c <verify_key>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <uds_security_access+0x9c>
                send_positive_response_security_access(UDS_SECURITY_ACCESS_SEND_KEY_LVL2);
 80012b0:	2004      	movs	r0, #4
 80012b2:	f000 f87b 	bl	80013ac <send_positive_response_security_access>
            } else {
                send_negative_response_security_access(sub_function, NRC_INVALID_KEY);
            }
            break;
 80012b6:	e00b      	b.n	80012d0 <uds_security_access+0xb4>
                send_negative_response_security_access(sub_function, NRC_INVALID_KEY);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2135      	movs	r1, #53	@ 0x35
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f89a 	bl	80013f6 <send_negative_response_security_access>
            break;
 80012c2:	e005      	b.n	80012d0 <uds_security_access+0xb4>

        default:
            // Sous-fonction non support e
            send_negative_response_security_access(sub_function, NRC_SUB_FUNCTION_NOT_SUPPORTED);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2112      	movs	r1, #18
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f894 	bl	80013f6 <send_negative_response_security_access>
            break;
 80012ce:	bf00      	nop
    }
}
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop

080012d8 <send_seed>:

/**
 * @brief Envoie le seed pour le niveau de s curit  donn
 * @param level : Niveau de s curit  (ex: 0x01 pour niveau 1, 0x03 pour niveau 2)
 */
void send_seed(uint8_t level) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    uint8_t response[5] = {0};
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	711a      	strb	r2, [r3, #4]
    response[0] = 0x04;
 80012ec:	2304      	movs	r3, #4
 80012ee:	723b      	strb	r3, [r7, #8]
    response[1] = UDS_SECURITY_ACCESS + 0x40;  // R ponse positive
 80012f0:	2367      	movs	r3, #103	@ 0x67
 80012f2:	727b      	strb	r3, [r7, #9]
    response[2] = level;  // Niveau de s curit  demand
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	72bb      	strb	r3, [r7, #10]

    // Seed sp cifique au niveau de s curit
    if (level == UDS_SECURITY_ACCESS_REQUEST_SEED_LVL1) {
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d106      	bne.n	800130c <send_seed+0x34>
        response[3] = security_seed_lvl1[0];
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <send_seed+0x5c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	72fb      	strb	r3, [r7, #11]
        response[4] = security_seed_lvl1[1];
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <send_seed+0x5c>)
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	733b      	strb	r3, [r7, #12]
 800130a:	e008      	b.n	800131e <send_seed+0x46>
    } else if (level == UDS_SECURITY_ACCESS_REQUEST_SEED_LVL2) {
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d105      	bne.n	800131e <send_seed+0x46>
        response[3] = security_seed_lvl2[0];
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <send_seed+0x60>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	72fb      	strb	r3, [r7, #11]
        response[4] = security_seed_lvl2[1];
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <send_seed+0x60>)
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	733b      	strb	r3, [r7, #12]
    }

    send_can_message(response, 5);  // Envoyer le seed via CAN
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	2105      	movs	r1, #5
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fce3 	bl	8000cf0 <send_can_message>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000001c 	.word	0x2000001c
 8001338:	20000024 	.word	0x20000024

0800133c <verify_key>:
/**
 * @brief V rifie la cl  envoy e par le client
 * @param level : Niveau de s curit  (ex: 0x02 pour niveau 1, 0x04 pour niveau 2)
 * @param key : Cl  envoy e par le client
 */
bool verify_key(uint8_t level, uint8_t* key) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
    // V rification simple de la cl
    if (key[0] == security_key_lvl1[0] || key[1] == security_key_lvl1[1]) {
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <verify_key+0x64>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d006      	beq.n	8001362 <verify_key+0x26>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <verify_key+0x64>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	429a      	cmp	r2, r3
 8001360:	d104      	bne.n	800136c <verify_key+0x30>
        uds_session.security_access_granted = true;  // Accorder l'acc s de s curit
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <verify_key+0x68>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
        return true;
 8001368:	2301      	movs	r3, #1
 800136a:	e012      	b.n	8001392 <verify_key+0x56>
    } else if (key[0] == security_key_lvl2[0] || key[1] == security_key_lvl2[1]) {
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <verify_key+0x6c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d006      	beq.n	8001386 <verify_key+0x4a>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <verify_key+0x6c>)
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	429a      	cmp	r2, r3
 8001384:	d104      	bne.n	8001390 <verify_key+0x54>
        uds_session.security_access_granted = true;  // Accorder l'acc s de s curit
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <verify_key+0x68>)
 8001388:	2201      	movs	r2, #1
 800138a:	705a      	strb	r2, [r3, #1]
        return true;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <verify_key+0x56>
    } else {
        return false;
 8001390:	2300      	movs	r3, #0
    }
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000020 	.word	0x20000020
 80013a4:	20000014 	.word	0x20000014
 80013a8:	20000028 	.word	0x20000028

080013ac <send_positive_response_security_access>:

/**
 * @brief Envoie une r ponse positive pour le service Security Access
 * @param sub_function : Sous-fonction (0x01 pour demande de seed, 0x02 pour v rification de cl )
 */
void send_positive_response_security_access(uint8_t sub_function) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
    uint8_t response[5] = {0};
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	711a      	strb	r2, [r3, #4]
     	 	response[0] =0x02;
 80013c0:	2302      	movs	r3, #2
 80013c2:	723b      	strb	r3, [r7, #8]

    // R ponse SID pour indiquer un succ s (ajout de 0x40 au service ID)
    response[1] = UDS_SECURITY_ACCESS + 0x40;  // R ponse positive (0x27 + 0x40 = 0x67)
 80013c4:	2367      	movs	r3, #103	@ 0x67
 80013c6:	727b      	strb	r3, [r7, #9]
    response[2] = sub_function;  // Type d'acc s s curis  ( cho de la sous-fonction)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	72bb      	strb	r3, [r7, #10]
    } else if (sub_function == UDS_SECURITY_ACCESS_REQUEST_SEED_LVL2) {
        response[2] = security_seed_lvl2;  // Graine de s curit  niveau 2
    }*/

    // Longueur du message : 2 octets pour la sous-fonction et la graine (si pr sente)
    uint8_t response_length = (sub_function == UDS_SECURITY_ACCESS_REQUEST_SEED_LVL1 ||
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d002      	beq.n	80013d8 <send_positive_response_security_access+0x2c>
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d101      	bne.n	80013dc <send_positive_response_security_access+0x30>
 80013d8:	2304      	movs	r3, #4
 80013da:	e000      	b.n	80013de <send_positive_response_security_access+0x32>
 80013dc:	2303      	movs	r3, #3
 80013de:	73fb      	strb	r3, [r7, #15]
                               sub_function == UDS_SECURITY_ACCESS_REQUEST_SEED_LVL2) ? 4 : 3;

    // Envoyer le message CAN avec la r ponse positive
    send_can_message(response, response_length);
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fc81 	bl	8000cf0 <send_can_message>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <send_negative_response_security_access>:
/**
 * @brief Envoie une r ponse n gative pour le service Security Access
 * @param sub_function : Sous-fonction concern e
 * @param nrc : Code de r ponse n gative (NRC)
 */
void send_negative_response_security_access(uint8_t sub_function, uint8_t nrc) {
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	460a      	mov	r2, r1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	4613      	mov	r3, r2
 8001404:	71bb      	strb	r3, [r7, #6]
    uint8_t response[3] = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2100      	movs	r1, #0
 800140c:	460a      	mov	r2, r1
 800140e:	801a      	strh	r2, [r3, #0]
 8001410:	460a      	mov	r2, r1
 8001412:	709a      	strb	r2, [r3, #2]

    response[0] = UDS_NEGATIVE_RESPONSE;         // Indique une r ponse n gative
 8001414:	237f      	movs	r3, #127	@ 0x7f
 8001416:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_SECURITY_ACCESS;  // Identifiant du service
 8001418:	2327      	movs	r3, #39	@ 0x27
 800141a:	737b      	strb	r3, [r7, #13]
    response[2] = nrc;          // NRC (code de r ponse n gative)
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	73bb      	strb	r3, [r7, #14]

    send_can_message(response, 3);  // Envoyer la r ponse via CAN
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2103      	movs	r1, #3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fc62 	bl	8000cf0 <send_can_message>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <uds_communication_control>:


/************************************************CommunicationControl************************************************************/
// Impl�mentation du service Communication Control (0x28)
void uds_communication_control(uint8_t sub_function) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
    switch (sub_function) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b05      	cmp	r3, #5
 8001442:	f200 8085 	bhi.w	8001550 <uds_communication_control+0x11c>
 8001446:	a201      	add	r2, pc, #4	@ (adr r2, 800144c <uds_communication_control+0x18>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	08001465 	.word	0x08001465
 8001450:	08001485 	.word	0x08001485
 8001454:	080014bb 	.word	0x080014bb
 8001458:	080014f1 	.word	0x080014f1
 800145c:	08001511 	.word	0x08001511
 8001460:	08001531 	.word	0x08001531
        case UDS_COMM_CONTROL_ENABLE_RX_AND_TX:
            // Activer Rx et Tx
            if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8001464:	2103      	movs	r1, #3
 8001466:	483e      	ldr	r0, [pc, #248]	@ (8001560 <uds_communication_control+0x12c>)
 8001468:	f004 fac2 	bl	80059f0 <HAL_CAN_ActivateNotification>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <uds_communication_control+0x46>
                send_negative_response_communication_control(NRC_CONDITIONS_NOT_CORRECT);
 8001472:	2022      	movs	r0, #34	@ 0x22
 8001474:	f000 f889 	bl	800158a <send_negative_response_communication_control>
                return;
 8001478:	e06e      	b.n	8001558 <uds_communication_control+0x124>
            }
            send_positive_response_communication_control(sub_function);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f871 	bl	8001564 <send_positive_response_communication_control>
            break;
 8001482:	e069      	b.n	8001558 <uds_communication_control+0x124>

        case UDS_COMM_CONTROL_ENABLE_RX_AND_DISABLE_TX:
            // Activer uniquement Rx, d�sactiver Tx
            if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001484:	2102      	movs	r1, #2
 8001486:	4836      	ldr	r0, [pc, #216]	@ (8001560 <uds_communication_control+0x12c>)
 8001488:	f004 fab2 	bl	80059f0 <HAL_CAN_ActivateNotification>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <uds_communication_control+0x66>
                send_negative_response_communication_control(NRC_CONDITIONS_NOT_CORRECT);
 8001492:	2022      	movs	r0, #34	@ 0x22
 8001494:	f000 f879 	bl	800158a <send_negative_response_communication_control>
                return;
 8001498:	e05e      	b.n	8001558 <uds_communication_control+0x124>
            }
            if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 800149a:	2101      	movs	r1, #1
 800149c:	4830      	ldr	r0, [pc, #192]	@ (8001560 <uds_communication_control+0x12c>)
 800149e:	f004 facd 	bl	8005a3c <HAL_CAN_DeactivateNotification>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <uds_communication_control+0x7c>
                send_negative_response_communication_control(NRC_CONDITIONS_NOT_CORRECT);
 80014a8:	2022      	movs	r0, #34	@ 0x22
 80014aa:	f000 f86e 	bl	800158a <send_negative_response_communication_control>
                return;
 80014ae:	e053      	b.n	8001558 <uds_communication_control+0x124>
            }
            send_positive_response_communication_control(sub_function);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f856 	bl	8001564 <send_positive_response_communication_control>
            break;
 80014b8:	e04e      	b.n	8001558 <uds_communication_control+0x124>

        case UDS_COMM_CONTROL_DISABLE_RX_AND_ENABLE_TX:
            // D�sactiver Rx, activer Tx
            if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80014ba:	2102      	movs	r1, #2
 80014bc:	4828      	ldr	r0, [pc, #160]	@ (8001560 <uds_communication_control+0x12c>)
 80014be:	f004 fabd 	bl	8005a3c <HAL_CAN_DeactivateNotification>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <uds_communication_control+0x9c>
                send_negative_response_communication_control(NRC_CONDITIONS_NOT_CORRECT);
 80014c8:	2022      	movs	r0, #34	@ 0x22
 80014ca:	f000 f85e 	bl	800158a <send_negative_response_communication_control>
                return;
 80014ce:	e043      	b.n	8001558 <uds_communication_control+0x124>
            }
            if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 80014d0:	2101      	movs	r1, #1
 80014d2:	4823      	ldr	r0, [pc, #140]	@ (8001560 <uds_communication_control+0x12c>)
 80014d4:	f004 fa8c 	bl	80059f0 <HAL_CAN_ActivateNotification>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <uds_communication_control+0xb2>
                send_negative_response_communication_control(NRC_CONDITIONS_NOT_CORRECT);
 80014de:	2022      	movs	r0, #34	@ 0x22
 80014e0:	f000 f853 	bl	800158a <send_negative_response_communication_control>
                return;
 80014e4:	e038      	b.n	8001558 <uds_communication_control+0x124>
            }
            send_positive_response_communication_control(sub_function);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f83b 	bl	8001564 <send_positive_response_communication_control>
            break;
 80014ee:	e033      	b.n	8001558 <uds_communication_control+0x124>

        case UDS_COMM_CONTROL_DISABLE_RX_AND_TX:
            // D�sactiver � la fois Rx et Tx
            if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 80014f0:	2103      	movs	r1, #3
 80014f2:	481b      	ldr	r0, [pc, #108]	@ (8001560 <uds_communication_control+0x12c>)
 80014f4:	f004 faa2 	bl	8005a3c <HAL_CAN_DeactivateNotification>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <uds_communication_control+0xd2>
                send_negative_response_communication_control(NRC_CONDITIONS_NOT_CORRECT);
 80014fe:	2022      	movs	r0, #34	@ 0x22
 8001500:	f000 f843 	bl	800158a <send_negative_response_communication_control>
                return;
 8001504:	e028      	b.n	8001558 <uds_communication_control+0x124>
            }
            send_positive_response_communication_control(sub_function);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f82b 	bl	8001564 <send_positive_response_communication_control>
            break;
 800150e:	e023      	b.n	8001558 <uds_communication_control+0x124>

        case UDS_COMM_CONTROL_ENABLE_RX_AND_TX_WITH_ENHANCED_INFO:
            // Activer Rx et Tx avec informations am�lior�es
            if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8001510:	2103      	movs	r1, #3
 8001512:	4813      	ldr	r0, [pc, #76]	@ (8001560 <uds_communication_control+0x12c>)
 8001514:	f004 fa6c 	bl	80059f0 <HAL_CAN_ActivateNotification>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <uds_communication_control+0xf2>
                send_negative_response_communication_control(NRC_CONDITIONS_NOT_CORRECT);
 800151e:	2022      	movs	r0, #34	@ 0x22
 8001520:	f000 f833 	bl	800158a <send_negative_response_communication_control>
                return;
 8001524:	e018      	b.n	8001558 <uds_communication_control+0x124>
            }
            // Ajoutez la logique pour les informations am�lior�es ici
            send_positive_response_communication_control(sub_function);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f81b 	bl	8001564 <send_positive_response_communication_control>
            break;
 800152e:	e013      	b.n	8001558 <uds_communication_control+0x124>

        case UDS_COMM_CONTROL_ENABLE_RX_WITH_ENHANCED_INFO:
            // Activer Rx avec informations am�lior�es
            if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001530:	2102      	movs	r1, #2
 8001532:	480b      	ldr	r0, [pc, #44]	@ (8001560 <uds_communication_control+0x12c>)
 8001534:	f004 fa5c 	bl	80059f0 <HAL_CAN_ActivateNotification>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <uds_communication_control+0x112>
                send_negative_response_communication_control(NRC_CONDITIONS_NOT_CORRECT);
 800153e:	2022      	movs	r0, #34	@ 0x22
 8001540:	f000 f823 	bl	800158a <send_negative_response_communication_control>
                return;
 8001544:	e008      	b.n	8001558 <uds_communication_control+0x124>
            }
            // Ajoutez la logique pour les informations am�lior�es ici
            send_positive_response_communication_control(sub_function);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f80b 	bl	8001564 <send_positive_response_communication_control>
            break;
 800154e:	e003      	b.n	8001558 <uds_communication_control+0x124>

        default:
            // Sous-fonction non support�e
            send_negative_response_communication_control(NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8001550:	2012      	movs	r0, #18
 8001552:	f000 f81a 	bl	800158a <send_negative_response_communication_control>
            break;
 8001556:	bf00      	nop
    }
}
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2001b1f0 	.word	0x2001b1f0

08001564 <send_positive_response_communication_control>:


// Envoie une r�ponse positive pour Communication Control
void send_positive_response_communication_control(uint8_t sub_function) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
    // Tableau de r�ponse contenant 2 octets
    uint8_t response[2];

    // Octet #1 : SID de r�ponse (0x68 = 0x28 + 0x40)
    response[0] = UDS_COMMUNICATION_CONTROL + 0x40;
 800156e:	2368      	movs	r3, #104	@ 0x68
 8001570:	733b      	strb	r3, [r7, #12]

    // Octet #2 : Echo de la sous-fonction envoy�e par le client
    response[1] = sub_function;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	737b      	strb	r3, [r7, #13]

    // Envoi du message CAN
    send_can_message(response, 2);
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2102      	movs	r1, #2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fbb7 	bl	8000cf0 <send_can_message>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <send_negative_response_communication_control>:

// Envoie une r�ponse n�gative pour Communication Control
void send_negative_response_communication_control(uint8_t nrc) {
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
    // Tableau de r�ponse contenant 3 octets
    uint8_t response[3];

    // Octet #1 : 0x7F indiquant une r�ponse n�gative
    response[0] = UDS_NEGATIVE_RESPONSE;
 8001594:	237f      	movs	r3, #127	@ 0x7f
 8001596:	733b      	strb	r3, [r7, #12]

    // Octet #2 : Service ID (SID) pour Communication Control (0x28)
    response[1] = UDS_COMMUNICATION_CONTROL;
 8001598:	2328      	movs	r3, #40	@ 0x28
 800159a:	737b      	strb	r3, [r7, #13]

    // Octet #3 : Code de r�ponse n�gative (NRC)
    response[2] = nrc;
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	73bb      	strb	r3, [r7, #14]

    // Envoi du message CAN
    send_can_message(response, 3);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2103      	movs	r1, #3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fba2 	bl	8000cf0 <send_can_message>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <uds_tester_present>:

/*****************************************************TesterPresent**************************************************************/
void uds_tester_present(uint8_t sub_function, uint8_t len) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	460a      	mov	r2, r1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	4613      	mov	r3, r2
 80015c2:	71bb      	strb	r3, [r7, #6]
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	60fb      	str	r3, [r7, #12]
    // Utilisation d'une macro pour v�rifier la sous-fonction r�serv�e
    if ((sub_function & UDS_TESTER_PRESENT_SUB_FUNCTION_MASK) != UDS_TESTER_PRESENT_ZERO_SUB_FUNCTION) {
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <uds_tester_present+0x28>
        // Si la sous-fonction est diff�rente de 0x00, elle est non support�e
        send_negative_response_tester_present(NRC_SUB_FUNCTION_NOT_SUPPORTED);
 80015d4:	2012      	movs	r0, #18
 80015d6:	f000 f826 	bl	8001626 <send_negative_response_tester_present>
        return;
 80015da:	e009      	b.n	80015f0 <uds_tester_present+0x3c>
    }

    // V�rification du suppressPosRspMsgIndicationBit avec une macro
    if ((sub_function & UDS_SUPPRESS_POS_RSP_MSG_INDICATION_BIT) == UDS_SUPPRESS_POS_RSP_MSG_INDICATION_BIT) {
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db04      	blt.n	80015ee <uds_tester_present+0x3a>
        uds_session.s3_timer = 0;
        uds_session.s3_timeout_active = true;
    }

    // Si suppressPosRspMsgIndicationBit est � 0, envoyer une r�ponse positive
    send_positive_response_tester_present(sub_function);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f805 	bl	80015f6 <send_positive_response_tester_present>
 80015ec:	e000      	b.n	80015f0 <uds_tester_present+0x3c>
        return;
 80015ee:	bf00      	nop
}
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <send_positive_response_tester_present>:

void send_positive_response_tester_present(uint8_t sub_function) {
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
    // Tableau de r�ponse contenant 2 octets
    uint8_t response[3];

    // Octet #1 : SID de r�ponse pour TesterPresent (0x3E + 0x40 = 0x7E)
    response[0] = 2;
 8001600:	2302      	movs	r3, #2
 8001602:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_TESTER_PRESENT + 0x40;
 8001604:	237e      	movs	r3, #126	@ 0x7e
 8001606:	737b      	strb	r3, [r7, #13]

    // Octet #2 : Echo de la sous-fonction (bits 6 � 0) envoy�e par le client
    response[2] = sub_function & UDS_TESTER_PRESENT_SUB_FUNCTION_MASK;  // On ne prend que les bits 6 � 0
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800160e:	b2db      	uxtb	r3, r3
 8001610:	73bb      	strb	r3, [r7, #14]

    // Envoi du message CAN
    send_can_message(response, 3);
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	2103      	movs	r1, #3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fb69 	bl	8000cf0 <send_can_message>
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <send_negative_response_tester_present>:

void send_negative_response_tester_present(uint8_t nrc) {
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
    // Tableau de r�ponse contenant 3 octets
    uint8_t response[4];

    // Octet #1 : 0x7F indiquant une r�ponse n�gative
    response[0] = 4;
 8001630:	2304      	movs	r3, #4
 8001632:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_NEGATIVE_RESPONSE;
 8001634:	237f      	movs	r3, #127	@ 0x7f
 8001636:	737b      	strb	r3, [r7, #13]

    // Octet #2 : Service ID (SID) pour Tester Present (0x3E)
    response[2] = UDS_TESTER_PRESENT;
 8001638:	233e      	movs	r3, #62	@ 0x3e
 800163a:	73bb      	strb	r3, [r7, #14]

    // Octet #3 : Code de r�ponse n�gative (NRC)
    response[3] = nrc;
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	73fb      	strb	r3, [r7, #15]

    // Envoi du message CAN
    send_can_message(response, sizeof(response));
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2104      	movs	r1, #4
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb52 	bl	8000cf0 <send_can_message>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <uds_access_timing_parameter>:
    .p2_server_max = 0x32,       // 50 ms
    .p2_star_server_max = 0x1F4  // 500 ms
};

// Fonction principale pour Access Timing Parameter
void uds_access_timing_parameter(uint8_t sub_function, uint8_t* data, uint8_t data_length) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]
    if (!is_service_allowed(UDS_ACCESS_TIMING_PARAMETER)) {
 8001664:	2083      	movs	r0, #131	@ 0x83
 8001666:	f7ff fc53 	bl	8000f10 <is_service_allowed>
 800166a:	4603      	mov	r3, r0
 800166c:	f083 0301 	eor.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <uds_access_timing_parameter+0x2a>
        send_negative_response_access_timing(NRC_CONDITIONS_NOT_CORRECT);
 8001676:	2022      	movs	r0, #34	@ 0x22
 8001678:	f000 f88c 	bl	8001794 <send_negative_response_access_timing>
        return;
 800167c:	e020      	b.n	80016c0 <uds_access_timing_parameter+0x6c>
    }

    switch (sub_function) {
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d002      	beq.n	800168a <uds_access_timing_parameter+0x36>
 8001684:	2b02      	cmp	r3, #2
 8001686:	d00a      	beq.n	800169e <uds_access_timing_parameter+0x4a>
 8001688:	e016      	b.n	80016b8 <uds_access_timing_parameter+0x64>
        case UDS_TIMING_PARAMETER_READ:
            // Lire les param�tres de temporisation
            if (data_length != 0) {
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <uds_access_timing_parameter+0x44>
                send_negative_response_access_timing(NRC_INCORRECT_MESSAGE_LENGTH);
 8001690:	2013      	movs	r0, #19
 8001692:	f000 f87f 	bl	8001794 <send_negative_response_access_timing>
                return;
 8001696:	e013      	b.n	80016c0 <uds_access_timing_parameter+0x6c>
            }
            read_timing_parameters();
 8001698:	f000 f816 	bl	80016c8 <read_timing_parameters>
            break;
 800169c:	e010      	b.n	80016c0 <uds_access_timing_parameter+0x6c>

        case UDS_TIMING_PARAMETER_WRITE:
            // �crire de nouveaux param�tres de temporisation
            if (data_length != 4) {
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d003      	beq.n	80016ac <uds_access_timing_parameter+0x58>
                send_negative_response_access_timing(NRC_INCORRECT_MESSAGE_LENGTH);
 80016a4:	2013      	movs	r0, #19
 80016a6:	f000 f875 	bl	8001794 <send_negative_response_access_timing>
                return;
 80016aa:	e009      	b.n	80016c0 <uds_access_timing_parameter+0x6c>
            }
            write_timing_parameters(data, data_length);
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	4619      	mov	r1, r3
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f000 f82d 	bl	8001710 <write_timing_parameters>
            break;
 80016b6:	e003      	b.n	80016c0 <uds_access_timing_parameter+0x6c>

        default:
            send_negative_response_access_timing(NRC_SUB_FUNCTION_NOT_SUPPORTED);
 80016b8:	2012      	movs	r0, #18
 80016ba:	f000 f86b 	bl	8001794 <send_negative_response_access_timing>
            break;
 80016be:	bf00      	nop
    }
}
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <read_timing_parameters>:

// Fonction pour lire les param�tres de temporisation
void read_timing_parameters() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
    uint8_t response[6];

    // SID de r�ponse (0x83 + 0x40 = 0xC3)
    response[0] = UDS_ACCESS_TIMING_PARAMETER + 0x40;
 80016ce:	23c3      	movs	r3, #195	@ 0xc3
 80016d0:	703b      	strb	r3, [r7, #0]

    // P2Server_max
    response[1] = (timing_params.p2_server_max >> 8) & 0xFF; // High byte
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <read_timing_parameters+0x44>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	707b      	strb	r3, [r7, #1]
    response[2] = timing_params.p2_server_max & 0xFF;        // Low byte
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <read_timing_parameters+0x44>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	70bb      	strb	r3, [r7, #2]

    // P2*Server_max
    response[3] = (timing_params.p2_star_server_max >> 8) & 0xFF; // High byte
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <read_timing_parameters+0x44>)
 80016e8:	885b      	ldrh	r3, [r3, #2]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	70fb      	strb	r3, [r7, #3]
    response[4] = timing_params.p2_star_server_max & 0xFF;        // Low byte
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <read_timing_parameters+0x44>)
 80016f4:	885b      	ldrh	r3, [r3, #2]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	713b      	strb	r3, [r7, #4]

    // Envoyer la r�ponse CAN
    send_can_message(response, 5);
 80016fa:	463b      	mov	r3, r7
 80016fc:	2105      	movs	r1, #5
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff faf6 	bl	8000cf0 <send_can_message>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000002c 	.word	0x2000002c

08001710 <write_timing_parameters>:

// Fonction pour �crire de nouveaux param�tres de temporisation
void write_timing_parameters(uint8_t* data, uint8_t data_length) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
    // Mise � jour des param�tres de temporisation avec les donn�es re�ues
    timing_params.p2_server_max = (data[0] << 8) | data[1];        // P2Server_max
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b21b      	sxth	r3, r3
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21a      	sxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3301      	adds	r3, #1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21b      	sxth	r3, r3
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <write_timing_parameters+0x54>)
 8001736:	801a      	strh	r2, [r3, #0]
    timing_params.p2_star_server_max = (data[2] << 8) | data[3];   // P2*Server_max
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3302      	adds	r3, #2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b21b      	sxth	r3, r3
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3303      	adds	r3, #3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <write_timing_parameters+0x54>)
 8001754:	805a      	strh	r2, [r3, #2]

    // Envoyer une r�ponse positive
    send_positive_response_access_timing(UDS_TIMING_PARAMETER_WRITE);
 8001756:	2002      	movs	r0, #2
 8001758:	f000 f806 	bl	8001768 <send_positive_response_access_timing>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000002c 	.word	0x2000002c

08001768 <send_positive_response_access_timing>:

void send_positive_response_access_timing(uint8_t sub_function) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
    uint8_t response[2];

    // SID de r�ponse pour AccessTimingParameter (0x83 + 0x40 = 0xC3)
    response[0] = UDS_ACCESS_TIMING_PARAMETER + 0x40;
 8001772:	23c3      	movs	r3, #195	@ 0xc3
 8001774:	733b      	strb	r3, [r7, #12]

    // �cho de la sous-fonction (bits 6 � 0)
    response[1] = sub_function & 0x7F;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800177c:	b2db      	uxtb	r3, r3
 800177e:	737b      	strb	r3, [r7, #13]

    // Envoyer la r�ponse CAN
    send_can_message(response, 2);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2102      	movs	r1, #2
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fab2 	bl	8000cf0 <send_can_message>
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <send_negative_response_access_timing>:


void send_negative_response_access_timing(uint8_t nrc) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
    uint8_t response[3];

    // Octet #1 : 0x7F indiquant une r�ponse n�gative
    response[0] = UDS_NEGATIVE_RESPONSE;
 800179e:	237f      	movs	r3, #127	@ 0x7f
 80017a0:	733b      	strb	r3, [r7, #12]

    // Octet #2 : Service ID (SID) pour Access Timing Parameter (0x83)
    response[1] = UDS_ACCESS_TIMING_PARAMETER;
 80017a2:	2383      	movs	r3, #131	@ 0x83
 80017a4:	737b      	strb	r3, [r7, #13]

    // Octet #3 : Code de r�ponse n�gative (NRC)
    response[2] = nrc;
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	73bb      	strb	r3, [r7, #14]

    // Envoyer le message CAN
    send_can_message(response, 3);
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2103      	movs	r1, #3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fa9d 	bl	8000cf0 <send_can_message>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <uds_secured_data_transmission>:
SecuritySession current_session = {
    .session_id = UDS_SESSION_DEFAULT,
    .encryption_key = DEFAULT_ENCRYPTION_KEY
};

void uds_secured_data_transmission(uint8_t* data, uint8_t data_length) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0a2      	sub	sp, #136	@ 0x88
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
    // V�rification si le service est autoris� dans la session actuelle
    if (!is_service_allowed(UDS_SECURED_DATA_TRANSMISSION)) {
 80017cc:	2084      	movs	r0, #132	@ 0x84
 80017ce:	f7ff fb9f 	bl	8000f10 <is_service_allowed>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <uds_secured_data_transmission+0x26>
        send_negative_response_secured_data_transmission(NRC_CONDITIONS_NOT_CORRECT);
 80017de:	2022      	movs	r0, #34	@ 0x22
 80017e0:	f000 f889 	bl	80018f6 <send_negative_response_secured_data_transmission>
        return;
 80017e4:	e01b      	b.n	800181e <uds_secured_data_transmission+0x5e>
    }

    // V�rification de la longueur du message
    if (data_length > MAX_DATA_SIZE) {
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	2b40      	cmp	r3, #64	@ 0x40
 80017ea:	d903      	bls.n	80017f4 <uds_secured_data_transmission+0x34>
        send_negative_response_secured_data_transmission(NRC_INCORRECT_MESSAGE_LENGTH);
 80017ec:	2013      	movs	r0, #19
 80017ee:	f000 f882 	bl	80018f6 <send_negative_response_secured_data_transmission>
        return;
 80017f2:	e014      	b.n	800181e <uds_secured_data_transmission+0x5e>
    }

    // Chiffrement des donn�es
    uint8_t encrypted_data[MAX_DATA_SIZE];
    encrypt_data(data, data_length, encrypted_data, current_session.encryption_key);
 80017f4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80017f8:	78f9      	ldrb	r1, [r7, #3]
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <uds_secured_data_transmission+0x64>)
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f813 	bl	8001828 <encrypt_data>

    // Envoi des donn�es chiffr�es
    secured_data_send(encrypted_data, data_length);
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f835 	bl	800187a <secured_data_send>
    // Donn�es de r�ponse (� adapter selon vos besoins)
    uint8_t securityDataResponseRecord[MAX_DATA_SIZE];
    // Remplir le tableau securityDataResponseRecord avec des donn�es appropri�es

    // R�ponse positive apr�s transmission
    send_positive_response_secured_data_transmission(securityDataResponseRecord, data_length);
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f83d 	bl	8001898 <send_positive_response_secured_data_transmission>
}
 800181e:	3788      	adds	r7, #136	@ 0x88
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000031 	.word	0x20000031

08001828 <encrypt_data>:
 * @param data : Donn�es � chiffrer
 * @param length : Longueur des donn�es
 * @param encrypted_data : Tableau o� stocker les donn�es chiffr�es
 * @param key : Cl� de chiffrement
 */
void encrypt_data(uint8_t* data, uint8_t length, uint8_t* encrypted_data, uint8_t* key) {
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	460b      	mov	r3, r1
 8001836:	72fb      	strb	r3, [r7, #11]
    // Exemple basique de chiffrement XOR (vous devez remplacer par un chiffrement plus robuste comme AES)
    for (uint8_t i = 0; i < length; i++) {
 8001838:	2300      	movs	r3, #0
 800183a:	75fb      	strb	r3, [r7, #23]
 800183c:	e012      	b.n	8001864 <encrypt_data+0x3c>
        encrypted_data[i] = data[i] ^ key[i % 16];
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4403      	add	r3, r0
 8001858:	404a      	eors	r2, r1
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	3301      	adds	r3, #1
 8001862:	75fb      	strb	r3, [r7, #23]
 8001864:	7dfa      	ldrb	r2, [r7, #23]
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3e8      	bcc.n	800183e <encrypt_data+0x16>
    }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <secured_data_send>:
/**
 * @brief Envoie les donn�es chiffr�es via le bus CAN
 * @param encrypted_data : Donn�es chiffr�es � envoyer
 * @param length : Longueur des donn�es chiffr�es
 */
void secured_data_send(uint8_t* encrypted_data, uint8_t length) {
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	70fb      	strb	r3, [r7, #3]
    // Vous pouvez ajuster les en-t�tes CAN ici si n�cessaire
    send_can_message(encrypted_data, length);
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	4619      	mov	r1, r3
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fa30 	bl	8000cf0 <send_can_message>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <send_positive_response_secured_data_transmission>:

void send_positive_response_secured_data_transmission(uint8_t* securityDataResponseRecord, uint8_t data_length) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	@ 0x50
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
    uint8_t response[MAX_DATA_SIZE + 1]; // +1 pour l'octet de SID

    // Byte 1: Secured Data Transmission Response SID (0xC4)
    response[0] = UDS_SECURED_DATA_TRANSMISSION + 0x40; // 0xC4
 80018a4:	23c4      	movs	r3, #196	@ 0xc4
 80018a6:	733b      	strb	r3, [r7, #12]

    // Bytes 2 to n: securityDataResponseRecord[]
    for (uint8_t i = 0; i < data_length; i++) {
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80018ae:	e010      	b.n	80018d2 <send_positive_response_secured_data_transmission+0x3a>
        response[i + 1] = securityDataResponseRecord[i]; // Ajouter les param�tres de r�ponse
 80018b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	441a      	add	r2, r3
 80018b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018bc:	3301      	adds	r3, #1
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	3350      	adds	r3, #80	@ 0x50
 80018c2:	443b      	add	r3, r7
 80018c4:	f803 2c44 	strb.w	r2, [r3, #-68]
    for (uint8_t i = 0; i < data_length; i++) {
 80018c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018cc:	3301      	adds	r3, #1
 80018ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80018d2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3e9      	bcc.n	80018b0 <send_positive_response_secured_data_transmission+0x18>
    }

    // Envoyer la r�ponse via CAN
    send_can_message(response, data_length + 1); // La longueur totale inclut SID + securityDataResponseRecord
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fa01 	bl	8000cf0 <send_can_message>
}
 80018ee:	bf00      	nop
 80018f0:	3750      	adds	r7, #80	@ 0x50
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <send_negative_response_secured_data_transmission>:

void send_negative_response_secured_data_transmission(uint8_t nrc) {
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
    uint8_t response[3];

    // Byte 1: Negative Response SID (0x7F)
    response[0] = UDS_NEGATIVE_RESPONSE;
 8001900:	237f      	movs	r3, #127	@ 0x7f
 8001902:	733b      	strb	r3, [r7, #12]

    // Byte 2: Secured Data Transmission Service ID (0x84)
    response[1] = UDS_SECURED_DATA_TRANSMISSION;
 8001904:	2384      	movs	r3, #132	@ 0x84
 8001906:	737b      	strb	r3, [r7, #13]

    // Byte 3: NRC (Code de r�ponse n�gative)
    response[2] = nrc;
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	73bb      	strb	r3, [r7, #14]

    // Envoyer la r�ponse via CAN
    send_can_message(response, 3);
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2103      	movs	r1, #3
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f9ec 	bl	8000cf0 <send_can_message>
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <uds_control_dtc_setting>:

/**
 * @brief Service ControlDTCSetting (0x85)
 * @param sub_function : Sous-fonction (0x01 pour activer, 0x02 pour d�sactiver)
 */
void uds_control_dtc_setting(uint8_t sub_function) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
    // V�rification si le service est autoris� dans la session actuelle
    if (!is_service_allowed(UDS_CONTROL_DTC_SETTING)) {
 800192a:	2085      	movs	r0, #133	@ 0x85
 800192c:	f7ff faf0 	bl	8000f10 <is_service_allowed>
 8001930:	4603      	mov	r3, r0
 8001932:	f083 0301 	eor.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <uds_control_dtc_setting+0x24>
        send_negative_response_control_dtc_setting(NRC_CONDITIONS_NOT_CORRECT);
 800193c:	2022      	movs	r0, #34	@ 0x22
 800193e:	f000 f846 	bl	80019ce <send_negative_response_control_dtc_setting>
        return;
 8001942:	e029      	b.n	8001998 <uds_control_dtc_setting+0x78>
    }

    // V�rifier si la sous-fonction est valide (0x01 ou 0x02)
    if (sub_function != UDS_CONTROL_DTC_SETTING_ON && sub_function != UDS_CONTROL_DTC_SETTING_OFF) {
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d006      	beq.n	8001958 <uds_control_dtc_setting+0x38>
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d003      	beq.n	8001958 <uds_control_dtc_setting+0x38>
        send_negative_response_control_dtc_setting(NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8001950:	2012      	movs	r0, #18
 8001952:	f000 f83c 	bl	80019ce <send_negative_response_control_dtc_setting>
        return;
 8001956:	e01f      	b.n	8001998 <uds_control_dtc_setting+0x78>
    }

    // V�rifier et traiter la sous-fonction
    if (sub_function == UDS_CONTROL_DTC_SETTING_ON) {
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d10e      	bne.n	800197c <uds_control_dtc_setting+0x5c>
        if (!dtc_update_enabled) {
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <uds_control_dtc_setting+0x80>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	f083 0301 	eor.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <uds_control_dtc_setting+0x52>
            dtc_update_enabled = true; // Activer la mise � jour des DTC
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <uds_control_dtc_setting+0x80>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
        }
        // Envoyer une r�ponse positive m�me si d�j� activ�
        send_positive_response_control_dtc_setting(sub_function);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f815 	bl	80019a4 <send_positive_response_control_dtc_setting>
 800197a:	e00d      	b.n	8001998 <uds_control_dtc_setting+0x78>

    } else if (sub_function == UDS_CONTROL_DTC_SETTING_OFF) {
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d10a      	bne.n	8001998 <uds_control_dtc_setting+0x78>
        if (dtc_update_enabled) {
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <uds_control_dtc_setting+0x80>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <uds_control_dtc_setting+0x70>
            dtc_update_enabled = false; // D�sactiver la mise � jour des DTC
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <uds_control_dtc_setting+0x80>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
        }
        // Envoyer une r�ponse positive m�me si d�j� d�sactiv�
        send_positive_response_control_dtc_setting(sub_function);
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f806 	bl	80019a4 <send_positive_response_control_dtc_setting>
    }
}
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000041 	.word	0x20000041

080019a4 <send_positive_response_control_dtc_setting>:

/**
 * @brief Envoie une r�ponse positive pour le service ControlDTCSetting
 * @param sub_function : Sous-fonction (0x01 pour activer, 0x02 pour d�sactiver)
 */
void send_positive_response_control_dtc_setting(uint8_t sub_function) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
    uint8_t response[2] = {0};
 80019ae:	2300      	movs	r3, #0
 80019b0:	81bb      	strh	r3, [r7, #12]

    // R�ponse SID pour indiquer un succ�s (ajout de 0x40 au service ID)
    response[0] = UDS_CONTROL_DTC_SETTING + 0x40; // 0xC5
 80019b2:	23c5      	movs	r3, #197	@ 0xc5
 80019b4:	733b      	strb	r3, [r7, #12]

    // Sous-fonction : Echo de la sous-fonction envoy�e (0x01 ou 0x02)
    response[1] = sub_function;
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	737b      	strb	r3, [r7, #13]

    // Envoi de la r�ponse via CAN
    send_can_message(response, 2);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2102      	movs	r1, #2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f995 	bl	8000cf0 <send_can_message>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <send_negative_response_control_dtc_setting>:

/**
 * @brief Envoie une r�ponse n�gative pour le service ControlDTCSetting
 * @param nrc : Code de r�ponse n�gative (NRC)
 */
void send_negative_response_control_dtc_setting(uint8_t nrc) {
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
    uint8_t response[3] = {0};
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2100      	movs	r1, #0
 80019de:	460a      	mov	r2, r1
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	460a      	mov	r2, r1
 80019e4:	709a      	strb	r2, [r3, #2]

    // R�ponse n�gative g�n�rique (0x7F)
    response[0] = UDS_NEGATIVE_RESPONSE;
 80019e6:	237f      	movs	r3, #127	@ 0x7f
 80019e8:	733b      	strb	r3, [r7, #12]

    // Service concern� (0x85 pour ControlDTCSetting)
    response[1] = UDS_CONTROL_DTC_SETTING;
 80019ea:	2385      	movs	r3, #133	@ 0x85
 80019ec:	737b      	strb	r3, [r7, #13]

    // NRC (Code de r�ponse n�gative)
    response[2] = nrc;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	73bb      	strb	r3, [r7, #14]

    // Envoi de la r�ponse via CAN
    send_can_message(response, 3);
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	2103      	movs	r1, #3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f979 	bl	8000cf0 <send_can_message>
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <uds_response_on_event>:

/*************************************************ResponseOnEvent****************************************************************/
Event events[MAX_EVENTS]; // D�finition de la variable events

void uds_response_on_event(uint8_t sub_function, uint8_t* data, uint8_t data_length) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	4613      	mov	r3, r2
 8001a16:	71bb      	strb	r3, [r7, #6]
    switch (sub_function) {
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d825      	bhi.n	8001a6a <uds_response_on_event+0x62>
 8001a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <uds_response_on_event+0x1c>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a41 	.word	0x08001a41
 8001a28:	08001a47 	.word	0x08001a47
 8001a2c:	08001a53 	.word	0x08001a53
 8001a30:	08001a6b 	.word	0x08001a6b
 8001a34:	08001a6b 	.word	0x08001a6b
 8001a38:	08001a5f 	.word	0x08001a5f
 8001a3c:	08001a65 	.word	0x08001a65
        case ROE_STOP_RESPONSE_ON_EVENT:
            // Appel de la fonction pour arr�ter la r�ponse sur �v�nement
            stop_response_on_event();
 8001a40:	f000 f81e 	bl	8001a80 <stop_response_on_event>
            break;
 8001a44:	e017      	b.n	8001a76 <uds_response_on_event+0x6e>

        case ROE_ON_DTC_STATUS_CHANGE:
            // Gestion de l'�v�nement bas� sur le changement de statut DTC
            on_dtc_status_change(data, data_length);
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6838      	ldr	r0, [r7, #0]
 8001a4c:	f000 f836 	bl	8001abc <on_dtc_status_change>
            break;
 8001a50:	e011      	b.n	8001a76 <uds_response_on_event+0x6e>

        case ROE_ON_TIMER_INTERRUPT:
            // Gestion de l'�v�nement bas� sur une interruption de timer
            on_timer_interrupt(data, data_length);
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	4619      	mov	r1, r3
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f000 f86e 	bl	8001b38 <on_timer_interrupt>
            break;
 8001a5c:	e00b      	b.n	8001a76 <uds_response_on_event+0x6e>

        case ROE_START_RESPONSE_ON_EVENT:
            // D�marrage de la r�ponse sur �v�nement
            start_response_on_event();
 8001a5e:	f000 f8a9 	bl	8001bb4 <start_response_on_event>
            break;
 8001a62:	e008      	b.n	8001a76 <uds_response_on_event+0x6e>

        case ROE_CLEAR_RESPONSE_ON_EVENT:
            // Nettoyage des �v�nements configur�s
            clear_response_on_event();
 8001a64:	f000 f8bc 	bl	8001be0 <clear_response_on_event>
            break;
 8001a68:	e005      	b.n	8001a76 <uds_response_on_event+0x6e>

        default:
            // Envoi d'une r�ponse n�gative si la sous-fonction n'est pas support�e
            send_negative_response_roe(sub_function, NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2112      	movs	r1, #18
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f906 	bl	8001c80 <send_negative_response_roe>
            break;
 8001a74:	bf00      	nop
    }
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop

08001a80 <stop_response_on_event>:

void stop_response_on_event() {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
    // D�sactiver tous les �v�nements actifs
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	e008      	b.n	8001a9e <stop_response_on_event+0x1e>
        events[i].isActive = false;
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <stop_response_on_event+0x38>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	2200      	movs	r2, #0
 8001a96:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	ddf3      	ble.n	8001a8c <stop_response_on_event+0xc>
    }

    // Envoyer une r�ponse positive avec des valeurs par d�faut
    send_positive_response_roe(ROE_STOP_RESPONSE_ON_EVENT, 0x00, 0x00, 0x00);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f8c2 	bl	8001c34 <send_positive_response_roe>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000130 	.word	0x20000130

08001abc <on_dtc_status_change>:

void on_dtc_status_change(uint8_t* data, uint8_t data_length) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur des donn�es
    if (data_length != 1) {
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d004      	beq.n	8001ad8 <on_dtc_status_change+0x1c>
        send_negative_response_roe(ROE_ON_DTC_STATUS_CHANGE, NRC_INCORRECT_MESSAGE_LENGTH);
 8001ace:	2113      	movs	r1, #19
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f000 f8d5 	bl	8001c80 <send_negative_response_roe>
        return;
 8001ad6:	e02a      	b.n	8001b2e <on_dtc_status_change+0x72>
    }

    // Configurer un nouvel �v�nement pour DTC Status Change
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e01e      	b.n	8001b1c <on_dtc_status_change+0x60>
        if (!events[i].isActive) {
 8001ade:	4a15      	ldr	r2, [pc, #84]	@ (8001b34 <on_dtc_status_change+0x78>)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d011      	beq.n	8001b16 <on_dtc_status_change+0x5a>
            events[i].eventType = ROE_ON_DTC_STATUS_CHANGE;
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <on_dtc_status_change+0x78>)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2101      	movs	r1, #1
 8001af8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
            events[i].isActive = true;
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <on_dtc_status_change+0x78>)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	2201      	movs	r2, #1
 8001b06:	709a      	strb	r2, [r3, #2]
            events[i].serviceToRespondTo = UDS_READ_DTC_INFORMATION;
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <on_dtc_status_change+0x78>)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	2219      	movs	r2, #25
 8001b12:	705a      	strb	r2, [r3, #1]
            break;
 8001b14:	e005      	b.n	8001b22 <on_dtc_status_change+0x66>
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b09      	cmp	r3, #9
 8001b20:	dddd      	ble.n	8001ade <on_dtc_status_change+0x22>
        }
    }

    // Envoyer une r�ponse positive
    send_positive_response_roe(ROE_ON_DTC_STATUS_CHANGE, 0x01, 0x01, 0x00);
 8001b22:	2300      	movs	r3, #0
 8001b24:	2201      	movs	r2, #1
 8001b26:	2101      	movs	r1, #1
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f000 f883 	bl	8001c34 <send_positive_response_roe>
}
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000130 	.word	0x20000130

08001b38 <on_timer_interrupt>:

void on_timer_interrupt(uint8_t* data, uint8_t data_length) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur des donn�es
    if (data_length != 1) {
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d004      	beq.n	8001b54 <on_timer_interrupt+0x1c>
        send_negative_response_roe(ROE_ON_TIMER_INTERRUPT, NRC_INCORRECT_MESSAGE_LENGTH);
 8001b4a:	2113      	movs	r1, #19
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f000 f897 	bl	8001c80 <send_negative_response_roe>
        return;
 8001b52:	e02a      	b.n	8001baa <on_timer_interrupt+0x72>
    }

    // Configurer un �v�nement pour Timer Interrupt
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e01e      	b.n	8001b98 <on_timer_interrupt+0x60>
        if (!events[i].isActive) {
 8001b5a:	4a15      	ldr	r2, [pc, #84]	@ (8001bb0 <on_timer_interrupt+0x78>)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	789b      	ldrb	r3, [r3, #2]
 8001b64:	f083 0301 	eor.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d011      	beq.n	8001b92 <on_timer_interrupt+0x5a>
            events[i].eventType = ROE_ON_TIMER_INTERRUPT;
 8001b6e:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <on_timer_interrupt+0x78>)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2102      	movs	r1, #2
 8001b74:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
            events[i].isActive = true;
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <on_timer_interrupt+0x78>)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	2201      	movs	r2, #1
 8001b82:	709a      	strb	r2, [r3, #2]
            events[i].serviceToRespondTo = UDS_READ_DATA_BY_IDENTIFIER;
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <on_timer_interrupt+0x78>)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2222      	movs	r2, #34	@ 0x22
 8001b8e:	705a      	strb	r2, [r3, #1]
            break;
 8001b90:	e005      	b.n	8001b9e <on_timer_interrupt+0x66>
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b09      	cmp	r3, #9
 8001b9c:	dddd      	ble.n	8001b5a <on_timer_interrupt+0x22>
        }
    }

    // Envoyer une r�ponse positive
    send_positive_response_roe(ROE_ON_TIMER_INTERRUPT, 0x01, 0x01, 0x00);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f000 f845 	bl	8001c34 <send_positive_response_roe>
}
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000130 	.word	0x20000130

08001bb4 <start_response_on_event>:


void start_response_on_event() {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
    // Activer les �v�nements configur�s
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	e002      	b.n	8001bc6 <start_response_on_event+0x12>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	ddf9      	ble.n	8001bc0 <start_response_on_event+0xc>
            // Lancer la logique de gestion des �v�nements
        }
    }

    // Envoyer une r�ponse positive
    send_positive_response_roe(ROE_START_RESPONSE_ON_EVENT, 0x00, 0x00, 0x00);
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2005      	movs	r0, #5
 8001bd4:	f000 f82e 	bl	8001c34 <send_positive_response_roe>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <clear_response_on_event>:

void clear_response_on_event() {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
    // R�initialiser tous les �v�nements
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e013      	b.n	8001c14 <clear_response_on_event+0x34>
        events[i].isActive = false;
 8001bec:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <clear_response_on_event+0x50>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	709a      	strb	r2, [r3, #2]
        events[i].eventType = 0;
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <clear_response_on_event+0x50>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        events[i].serviceToRespondTo = 0;
 8001c02:	4a0b      	ldr	r2, [pc, #44]	@ (8001c30 <clear_response_on_event+0x50>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	705a      	strb	r2, [r3, #1]
    for (int i = 0; i < MAX_EVENTS; i++) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3301      	adds	r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	dde8      	ble.n	8001bec <clear_response_on_event+0xc>
    }

    // Envoyer une r�ponse positive
    send_positive_response_roe(ROE_CLEAR_RESPONSE_ON_EVENT, 0x00, 0x00, 0x00);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2006      	movs	r0, #6
 8001c22:	f000 f807 	bl	8001c34 <send_positive_response_roe>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000130 	.word	0x20000130

08001c34 <send_positive_response_roe>:

void send_positive_response_roe(uint8_t sub_function, uint8_t eventType, uint8_t numberOfIdentifiedEvents, uint8_t eventWindowTime) {
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	4603      	mov	r3, r0
 8001c48:	71bb      	strb	r3, [r7, #6]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	717b      	strb	r3, [r7, #5]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	713b      	strb	r3, [r7, #4]
    // Initialiser une taille suffisante pour inclure tous les param�tres (3 octets de base + les autres donn�es)
    uint8_t response[6] = {0};
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	809a      	strh	r2, [r3, #4]

    // Byte 1: ResponseOnEvent Response SID (0x86 + 0x40 = 0xC6)
    response[0] = UDS_RESPONSE_ON_EVENT + 0x40;  // 0xC6
 8001c5c:	23c6      	movs	r3, #198	@ 0xc6
 8001c5e:	723b      	strb	r3, [r7, #8]

    // Byte 2: eventType (echo de la sous-fonction dans la requ�te)
    response[1] = eventType;
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	727b      	strb	r3, [r7, #9]

    // Byte 3: numberOfIdentifiedEvents (0x00 si non applicable ou nombre r�el d'�v�nements)
    response[2] = numberOfIdentifiedEvents;
 8001c64:	797b      	ldrb	r3, [r7, #5]
 8001c66:	72bb      	strb	r3, [r7, #10]

    // Byte 4: eventWindowTime (temps de la fen�tre d'�v�nement)
    response[3] = eventWindowTime;
 8001c68:	793b      	ldrb	r3, [r7, #4]
 8001c6a:	72fb      	strb	r3, [r7, #11]

    // Envoi du message CAN avec la r�ponse positive (4 octets dans ce cas)
    send_can_message(response, 4);
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	2104      	movs	r1, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f83c 	bl	8000cf0 <send_can_message>
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <send_negative_response_roe>:

void send_negative_response_roe(uint8_t sub_function, uint8_t nrc) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	460a      	mov	r2, r1
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71bb      	strb	r3, [r7, #6]
    uint8_t response[3] = {0};
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2100      	movs	r1, #0
 8001c96:	460a      	mov	r2, r1
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	460a      	mov	r2, r1
 8001c9c:	709a      	strb	r2, [r3, #2]

    // Byte 1: NRC indicator (0x7F for negative response)
    response[0] = UDS_NEGATIVE_RESPONSE;
 8001c9e:	237f      	movs	r3, #127	@ 0x7f
 8001ca0:	733b      	strb	r3, [r7, #12]

    // Byte 2: Service ID (SID of ResponseOnEvent, which is 0x86)
    response[1] = UDS_RESPONSE_ON_EVENT;
 8001ca2:	2386      	movs	r3, #134	@ 0x86
 8001ca4:	737b      	strb	r3, [r7, #13]

    // Byte 3: Negative Response Code (NRC) from Table 108
    response[2] = nrc;
 8001ca6:	79bb      	ldrb	r3, [r7, #6]
 8001ca8:	73bb      	strb	r3, [r7, #14]

    // Send the negative response via CAN
    send_can_message(response, 3);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2103      	movs	r1, #3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f81d 	bl	8000cf0 <send_can_message>
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <uds_link_control>:

/****************************************************LinkControl****************************************************************/
LinkControl link_control;

void uds_link_control(uint8_t sub_function, uint8_t* data, uint8_t data_length) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	71bb      	strb	r3, [r7, #6]
    switch (sub_function) {
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d02d      	beq.n	8001d32 <uds_link_control+0x72>
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	dc3a      	bgt.n	8001d50 <uds_link_control+0x90>
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d002      	beq.n	8001ce4 <uds_link_control+0x24>
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d012      	beq.n	8001d08 <uds_link_control+0x48>
 8001ce2:	e035      	b.n	8001d50 <uds_link_control+0x90>
        case UDS_LINK_CONTROL_VERIFY_MODE_TRANSITION_FIXED:
            if (data_length != 1) {
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <uds_link_control+0x36>
                send_negative_response_link_control(sub_function, NRC_INCORRECT_MESSAGE_LENGTH);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2113      	movs	r1, #19
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f84f 	bl	8001d92 <send_negative_response_link_control>
                return;
 8001cf4:	e032      	b.n	8001d5c <uds_link_control+0x9c>
            }
            link_control.modeIdentifier = data[0];
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <uds_link_control+0xa4>)
 8001cfc:	701a      	strb	r2, [r3, #0]
            send_positive_response_link_control(sub_function);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f831 	bl	8001d68 <send_positive_response_link_control>
            break;
 8001d06:	e029      	b.n	8001d5c <uds_link_control+0x9c>

        case UDS_LINK_CONTROL_VERIFY_MODE_TRANSITION_SPECIFIC:
            if (data_length != 3) {
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d005      	beq.n	8001d1a <uds_link_control+0x5a>
                send_negative_response_link_control(sub_function, NRC_INCORRECT_MESSAGE_LENGTH);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2113      	movs	r1, #19
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f83d 	bl	8001d92 <send_negative_response_link_control>
                return;
 8001d18:	e020      	b.n	8001d5c <uds_link_control+0x9c>
            }
            memcpy(link_control.linkRecord, data, 3);
 8001d1a:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <uds_link_control+0xa4>)
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	8811      	ldrh	r1, [r2, #0]
 8001d22:	7892      	ldrb	r2, [r2, #2]
 8001d24:	8019      	strh	r1, [r3, #0]
 8001d26:	709a      	strb	r2, [r3, #2]
            send_positive_response_link_control(sub_function);
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f81c 	bl	8001d68 <send_positive_response_link_control>
            break;
 8001d30:	e014      	b.n	8001d5c <uds_link_control+0x9c>

        case UDS_LINK_CONTROL_TRANSITION_MODE:
            if (link_control.modeIdentifier == 0) {
 8001d32:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <uds_link_control+0xa4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <uds_link_control+0x86>
                send_negative_response_link_control(sub_function, NRC_REQUEST_SEQUENCE_ERROR);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2124      	movs	r1, #36	@ 0x24
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f827 	bl	8001d92 <send_negative_response_link_control>
                return;
 8001d44:	e00a      	b.n	8001d5c <uds_link_control+0x9c>
            }
            // Effectuer la transition ici en fonction de modeIdentifier ou linkRecord
            send_positive_response_link_control(sub_function);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f80d 	bl	8001d68 <send_positive_response_link_control>
            break;
 8001d4e:	e005      	b.n	8001d5c <uds_link_control+0x9c>

        default:
            send_negative_response_link_control(sub_function, NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2112      	movs	r1, #18
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f81c 	bl	8001d92 <send_negative_response_link_control>
            break;
 8001d5a:	bf00      	nop
    }
}
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000180 	.word	0x20000180

08001d68 <send_positive_response_link_control>:

void send_positive_response_link_control(uint8_t sub_function) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
    uint8_t response[2] = {0};
 8001d72:	2300      	movs	r3, #0
 8001d74:	81bb      	strh	r3, [r7, #12]

    response[0] = UDS_LINK_CONTROL + 0x40;  // R�ponse SID
 8001d76:	23c7      	movs	r3, #199	@ 0xc7
 8001d78:	733b      	strb	r3, [r7, #12]
    response[1] = sub_function;  // Echo de la sous-fonction
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	737b      	strb	r3, [r7, #13]

    send_can_message(response, 2);
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2102      	movs	r1, #2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ffb3 	bl	8000cf0 <send_can_message>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <send_negative_response_link_control>:

void send_negative_response_link_control(uint8_t sub_function, uint8_t nrc) {
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	71bb      	strb	r3, [r7, #6]
    uint8_t response[3] = {0};
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	2100      	movs	r1, #0
 8001da8:	460a      	mov	r2, r1
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	460a      	mov	r2, r1
 8001dae:	709a      	strb	r2, [r3, #2]

    response[0] = UDS_NEGATIVE_RESPONSE; // R�ponse n�gative
 8001db0:	237f      	movs	r3, #127	@ 0x7f
 8001db2:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_LINK_CONTROL; // Service concern� (LinkControl)
 8001db4:	2387      	movs	r3, #135	@ 0x87
 8001db6:	737b      	strb	r3, [r7, #13]
    response[2] = nrc; // NRC (Code de r�ponse n�gative)
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	73bb      	strb	r3, [r7, #14]

    send_can_message(response, 3);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ff94 	bl	8000cf0 <send_can_message>
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <uds_input_output_control_by_identifier>:


/************************************************InputOutputControlByIdentifier*************************************************/

// Fonction pour g�rer la commande InputOutputControlByIdentifier
void uds_input_output_control_by_identifier(IOControlRequest_t *request, IOControlResponse_t *response) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
        send_negative_response_input_output_control_by_identifier(NRC_INCORRECT_MESSAGE_LENGTH);
        return;
    }

    // V�rification de la prise en charge de l'Identifiant de Donn�es (DID)
    if (!is_data_identifier_supported_for_write(request->dataIdentifier)) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	885b      	ldrh	r3, [r3, #2]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fef2 	bl	8000bc8 <is_data_identifier_supported_for_write>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <uds_input_output_control_by_identifier+0x28>
        send_negative_response_input_output_control_by_identifier(NRC_REQUEST_OUT_OF_RANGE);
 8001df0:	2031      	movs	r0, #49	@ 0x31
 8001df2:	f000 f84b 	bl	8001e8c <send_negative_response_input_output_control_by_identifier>
        return;
 8001df6:	e02a      	b.n	8001e4e <uds_input_output_control_by_identifier+0x7e>
    }

    // Traitement des options de contr�le
    switch (request->controlOptionRecord) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d009      	beq.n	8001e14 <uds_input_output_control_by_identifier+0x44>
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	dc03      	bgt.n	8001e0c <uds_input_output_control_by_identifier+0x3c>
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <uds_input_output_control_by_identifier+0x48>
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d007      	beq.n	8001e1c <uds_input_output_control_by_identifier+0x4c>
            // Logique pour geler l'�tat actuel
            // Exemple : freeze_current_state(request->dataIdentifier);
            break;

        default:
            send_negative_response_input_output_control_by_identifier(NRC_CONDITIONS_NOT_CORRECT);
 8001e0c:	2022      	movs	r0, #34	@ 0x22
 8001e0e:	f000 f83d 	bl	8001e8c <send_negative_response_input_output_control_by_identifier>
            return;
 8001e12:	e01c      	b.n	8001e4e <uds_input_output_control_by_identifier+0x7e>
            break;
 8001e14:	bf00      	nop
 8001e16:	e002      	b.n	8001e1e <uds_input_output_control_by_identifier+0x4e>
            break;
 8001e18:	bf00      	nop
 8001e1a:	e000      	b.n	8001e1e <uds_input_output_control_by_identifier+0x4e>
            break;
 8001e1c:	bf00      	nop
    }

    // Pr�parer la r�ponse positive
    response->SID = UDS_RESPONSE_INPUT_OUTPUT_CONTROL;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	226f      	movs	r2, #111	@ 0x6f
 8001e22:	701a      	strb	r2, [r3, #0]
    response->dataIdentifier = request->dataIdentifier;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	885a      	ldrh	r2, [r3, #2]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	805a      	strh	r2, [r3, #2]

    // Remplir le tableau de statut de contr�le avec les valeurs actuelles ou d�sir�es
    memcpy(response->controlStatusRecord, request->controlState, sizeof(request->controlState));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	1d18      	adds	r0, r3, #4
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3305      	adds	r3, #5
 8001e34:	2208      	movs	r2, #8
 8001e36:	4619      	mov	r1, r3
 8001e38:	f006 f990 	bl	800815c <memcpy>

    // Envoyer la r�ponse positive
    send_positive_response_input_output_control_by_identifier(request->dataIdentifier, request->controlOptionRecord, response->controlStatusRecord);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8858      	ldrh	r0, [r3, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7919      	ldrb	r1, [r3, #4]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	3304      	adds	r3, #4
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f000 f803 	bl	8001e54 <send_positive_response_input_output_control_by_identifier>
}
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <send_positive_response_input_output_control_by_identifier>:

// Fonction pour envoyer une r�ponse positive
void send_positive_response_input_output_control_by_identifier(uint16_t dataIdentifier, uint8_t controlOptionRecord, uint8_t *controlStatusRecord) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	603a      	str	r2, [r7, #0]
 8001e5e:	80fb      	strh	r3, [r7, #6]
 8001e60:	460b      	mov	r3, r1
 8001e62:	717b      	strb	r3, [r7, #5]
    IOControlResponse_t response;

    response.SID = UDS_RESPONSE_INPUT_OUTPUT_CONTROL;
 8001e64:	236f      	movs	r3, #111	@ 0x6f
 8001e66:	733b      	strb	r3, [r7, #12]
    response.dataIdentifier = dataIdentifier;
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	81fb      	strh	r3, [r7, #14]

    // Copie des �tats de contr�le dans la r�ponse
    memcpy(response.controlStatusRecord, controlStatusRecord, sizeof(response.controlStatusRecord));
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	6810      	ldr	r0, [r2, #0]
 8001e74:	6851      	ldr	r1, [r2, #4]
 8001e76:	c303      	stmia	r3!, {r0, r1}

    // Envoi du message via CAN
    send_can_message((uint8_t*)&response, sizeof(response));
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	210c      	movs	r1, #12
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ff36 	bl	8000cf0 <send_can_message>
    // send_uart_message((uint8_t*)&response, sizeof(response));
}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <send_negative_response_input_output_control_by_identifier>:


// Fonction pour envoyer une r�ponse n�gative
void send_negative_response_input_output_control_by_identifier(uint8_t nrc) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
    // Envoi d'un message d'erreur par CAN
    // Exemple : send_can_message(&nrc, sizeof(nrc));
    uint8_t response[2];
    response[0] = UDS_RESPONSE_INPUT_OUTPUT_CONTROL; // SID de r�ponse
 8001e96:	236f      	movs	r3, #111	@ 0x6f
 8001e98:	733b      	strb	r3, [r7, #12]
    response[1] = nrc; // NRC
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	737b      	strb	r3, [r7, #13]

    send_can_message(response, sizeof(response));
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ff23 	bl	8000cf0 <send_can_message>
    // send_uart_message(response, sizeof(response));
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <uds_routine_control>:
#include "uds_services.c"


/*******************************************************RoutineControl******************************************************/
// Fonction pour g�rer la commande RoutineControl
void uds_routine_control(RoutineControlRequest_t *request, RoutineControlResponse_t *response) {
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
        send_negative_response_routine_control(NRC_INCORRECT_MESSAGE_LENGTH);
        return;
    }

    // 2. V�rification du Routine Identifier (RID)
    if (!is_routine_supported(request->routineIdentifier)) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	885b      	ldrh	r3, [r3, #2]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f87a 	bl	8001fba <is_routine_supported>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <uds_routine_control+0x28>
        send_negative_response_routine_control(NRC_REQUEST_OUT_OF_RANGE);
 8001ed2:	2031      	movs	r0, #49	@ 0x31
 8001ed4:	f000 f85e 	bl	8001f94 <send_negative_response_routine_control>
        return;
 8001ed8:	e04d      	b.n	8001f76 <uds_routine_control+0xc4>
    }

    // 3. V�rification de la S�curit� du RID
    if (!is_security_granted_for_routine(request->routineIdentifier)) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	885b      	ldrh	r3, [r3, #2]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f877 	bl	8001fd2 <is_security_granted_for_routine>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <uds_routine_control+0x46>
        send_negative_response_routine_control(NRC_SECURITY_ACCESS_DENIED);
 8001ef0:	2033      	movs	r0, #51	@ 0x33
 8001ef2:	f000 f84f 	bl	8001f94 <send_negative_response_routine_control>
        return;
 8001ef6:	e03e      	b.n	8001f76 <uds_routine_control+0xc4>
    }

    // 4. V�rification de la Sous-Fonction
    if (!is_sub_function_supported(request->subFunction)) {
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 f874 	bl	8001fea <is_sub_function_supported>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <uds_routine_control+0x64>
        send_negative_response_routine_control(NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8001f0e:	2012      	movs	r0, #18
 8001f10:	f000 f840 	bl	8001f94 <send_negative_response_routine_control>
        return;
 8001f14:	e02f      	b.n	8001f76 <uds_routine_control+0xc4>

    // 5. V�rification de la Longueur Totale
    // (Ajoutez ici si n�cessaire, selon les donn�es suppl�mentaires)

    // 6. Validation des Donn�es dans routineControlOptionRecord
    if (!validate_routine_control_option(request->routineControlOption))  {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	791b      	ldrb	r3, [r3, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f871 	bl	8002002 <validate_routine_control_option>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f083 0301 	eor.w	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <uds_routine_control+0x82>
        send_negative_response_routine_control(NRC_REQUEST_OUT_OF_RANGE);
 8001f2c:	2031      	movs	r0, #49	@ 0x31
 8001f2e:	f000 f831 	bl	8001f94 <send_negative_response_routine_control>
        return;
 8001f32:	e020      	b.n	8001f76 <uds_routine_control+0xc4>

    // 7. V�rifications Suppl�mentaires (conditions sp�cifiques)
    // (Ajoutez ici si n�cessaire)

    // Traitement des sous-fonctions
    switch (request->subFunction) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d009      	beq.n	8001f50 <uds_routine_control+0x9e>
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	dc03      	bgt.n	8001f48 <uds_routine_control+0x96>
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d007      	beq.n	8001f54 <uds_routine_control+0xa2>
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d007      	beq.n	8001f58 <uds_routine_control+0xa6>
            // Logique pour demander les r�sultats de la routine
            // request_routine_results(request->routineIdentifier);
            break;

        default:
            send_negative_response_routine_control(NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8001f48:	2012      	movs	r0, #18
 8001f4a:	f000 f823 	bl	8001f94 <send_negative_response_routine_control>
            return;
 8001f4e:	e012      	b.n	8001f76 <uds_routine_control+0xc4>
            break;
 8001f50:	bf00      	nop
 8001f52:	e002      	b.n	8001f5a <uds_routine_control+0xa8>
            break;
 8001f54:	bf00      	nop
 8001f56:	e000      	b.n	8001f5a <uds_routine_control+0xa8>
            break;
 8001f58:	bf00      	nop
    }

    // Pr�parer la r�ponse positive
    response->SID = UDS_RESPONSE_ROUTINE_CONTROL;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2271      	movs	r2, #113	@ 0x71
 8001f5e:	701a      	strb	r2, [r3, #0]
    response->routineControlType = request->subFunction;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	781a      	ldrb	r2, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	705a      	strb	r2, [r3, #1]
    response->routineIdentifier = request->routineIdentifier;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	885a      	ldrh	r2, [r3, #2]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	805a      	strh	r2, [r3, #2]
    // Remplir routineInfo et routineStatusRecord selon la logique de la routine
    // response->routineInfo = get_routine_info(request->routineIdentifier);

    // Envoyer la r�ponse positive
    send_positive_response_routine_control(response);
 8001f70:	6838      	ldr	r0, [r7, #0]
 8001f72:	f000 f803 	bl	8001f7c <send_positive_response_routine_control>
}
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <send_positive_response_routine_control>:


// Fonction pour envoyer une r�ponse positive
void send_positive_response_routine_control(RoutineControlResponse_t *response) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    // Envoi du message via CAN
    send_can_message((uint8_t *)response, sizeof(RoutineControlResponse_t));
 8001f84:	210e      	movs	r1, #14
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe feb2 	bl	8000cf0 <send_can_message>
    // send_uart_message((uint8_t *)response, sizeof(RoutineControlResponse_t));
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <send_negative_response_routine_control>:

// Fonction pour envoyer une r�ponse n�gative
void send_negative_response_routine_control(uint8_t nrc) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
    uint8_t response[2];
    response[0] = UDS_RESPONSE_ROUTINE_CONTROL; // SID de r�ponse
 8001f9e:	2371      	movs	r3, #113	@ 0x71
 8001fa0:	733b      	strb	r3, [r7, #12]
    response[1] = nrc; // NRC
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	737b      	strb	r3, [r7, #13]

    send_can_message(response, sizeof(response));
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	2102      	movs	r1, #2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fe9f 	bl	8000cf0 <send_can_message>
    // send_uart_message(response, sizeof(response));
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <is_routine_supported>:

// Fonction pour v�rifier si le routineIdentifier est support�
bool is_routine_supported(uint16_t routineIdentifier) {
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	80fb      	strh	r3, [r7, #6]
    // Impl�mentez votre logique pour v�rifier si le routineIdentifier est support�
    return true; // Remplacez ceci par la logique appropri�e
 8001fc4:	2301      	movs	r3, #1
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <is_security_granted_for_routine>:

// Fonction pour v�rifier la s�curit� pour le routineIdentifier
bool is_security_granted_for_routine(uint16_t routineIdentifier) {
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	80fb      	strh	r3, [r7, #6]
    // Impl�mentez votre logique pour v�rifier si la s�curit� est accord�e pour ce routineIdentifier
    return true; // Remplacez ceci par la logique appropri�e
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <is_sub_function_supported>:

// Fonction pour v�rifier si la sous-fonction est support�e
bool is_sub_function_supported(uint8_t subFunction) {
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
    // Impl�mentez votre logique pour v�rifier si la sous-fonction est support�e
    return true; // Remplacez ceci par la logique appropri�e
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <validate_routine_control_option>:

// Fonction pour valider les donn�es dans routineControlOptionRecord
bool validate_routine_control_option(uint8_t option) {
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
    // Impl�mentez votre logique pour valider l'option
    return true; // Modifier selon votre logique
 800200c:	2301      	movs	r3, #1
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <uds_clear_diagnostic_information>:
#include "uds_services.c"
#include"main.h"

/************************************************ClearDiagnosticInformation*************************************************/
// Fonction principale pour ClearDiagnosticInformation
void uds_clear_diagnostic_information(uint8_t* data, uint8_t data_length) {
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur du message (SID + groupOfDTC = 4 octets)
    if (data_length != 4) {
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	2b04      	cmp	r3, #4
 800202a:	d003      	beq.n	8002034 <uds_clear_diagnostic_information+0x1a>
        send_negative_response_clear_diagnostic_information(NRC_INCORRECT_MESSAGE_LENGTH);
 800202c:	2013      	movs	r0, #19
 800202e:	f000 f888 	bl	8002142 <send_negative_response_clear_diagnostic_information>
        return;
 8002032:	e035      	b.n	80020a0 <uds_clear_diagnostic_information+0x86>
    }

    // Extraire le groupOfDTC (3 octets)
    uint32_t groupOfDTC = (data[1] << 16) | (data[2] << 8) | data[3];
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	041a      	lsls	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3302      	adds	r3, #2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4313      	orrs	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	3203      	adds	r2, #3
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    // V�rifier si le groupOfDTC est support�
    if (!is_group_of_dtc_supported(groupOfDTC)) {
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f828 	bl	80020a6 <is_group_of_dtc_supported>
 8002056:	4603      	mov	r3, r0
 8002058:	f083 0301 	eor.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <uds_clear_diagnostic_information+0x50>
        send_negative_response_clear_diagnostic_information(NRC_REQUEST_OUT_OF_RANGE);
 8002062:	2031      	movs	r0, #49	@ 0x31
 8002064:	f000 f86d 	bl	8002142 <send_negative_response_clear_diagnostic_information>
        return;
 8002068:	e01a      	b.n	80020a0 <uds_clear_diagnostic_information+0x86>
    }

    // V�rifier si les conditions pour effacer les DTC sont correctes
    if (!are_conditions_correct_for_dtc_clear()) {
 800206a:	f000 f841 	bl	80020f0 <are_conditions_correct_for_dtc_clear>
 800206e:	4603      	mov	r3, r0
 8002070:	f083 0301 	eor.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <uds_clear_diagnostic_information+0x68>
        send_negative_response_clear_diagnostic_information(NRC_CONDITIONS_NOT_CORRECT);
 800207a:	2022      	movs	r0, #34	@ 0x22
 800207c:	f000 f861 	bl	8002142 <send_negative_response_clear_diagnostic_information>
        return;
 8002080:	e00e      	b.n	80020a0 <uds_clear_diagnostic_information+0x86>
    }

    // Effacer les informations diagnostiques pour le groupOfDTC
    if (!clear_diagnostic_information(groupOfDTC)) {
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f844 	bl	8002110 <clear_diagnostic_information>
 8002088:	4603      	mov	r3, r0
 800208a:	f083 0301 	eor.w	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <uds_clear_diagnostic_information+0x82>
        send_negative_response_clear_diagnostic_information(NRC_GENERAL_PROGRAMMING_FAILURE);
 8002094:	2072      	movs	r0, #114	@ 0x72
 8002096:	f000 f854 	bl	8002142 <send_negative_response_clear_diagnostic_information>
        return;
 800209a:	e001      	b.n	80020a0 <uds_clear_diagnostic_information+0x86>
    }

    // Si tout est correct, envoyer une r�ponse positive
    send_positive_response_clear_diagnostic_information();
 800209c:	f000 f843 	bl	8002126 <send_positive_response_clear_diagnostic_information>
}
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <is_group_of_dtc_supported>:

// V�rifier si le groupOfDTC est support�
bool is_group_of_dtc_supported(uint32_t groupOfDTC) {
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
    // Impl�menter la logique pour v�rifier si le groupOfDTC est support�
    // Par exemple, supposons que nous supportons uniquement certains groupes de DTC
    switch (groupOfDTC) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80020b4:	d012      	beq.n	80020dc <is_group_of_dtc_supported+0x36>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80020bc:	d810      	bhi.n	80020e0 <is_group_of_dtc_supported+0x3a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020c4:	d00a      	beq.n	80020dc <is_group_of_dtc_supported+0x36>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020cc:	d808      	bhi.n	80020e0 <is_group_of_dtc_supported+0x3a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <is_group_of_dtc_supported+0x36>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020da:	d101      	bne.n	80020e0 <is_group_of_dtc_supported+0x3a>
        case 0x000000:  // Exemples de groupes de DTC
        case 0x010000:  // Groupe Powertrain
        case 0x020000:  // Groupe Chassis
        case 0x030000:  // Groupe Body
            return true;
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <is_group_of_dtc_supported+0x3c>
        default:
            return false;
 80020e0:	2300      	movs	r3, #0
    }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <are_conditions_correct_for_dtc_clear>:

// V�rifier si les conditions pour effacer les DTC sont correctes
bool are_conditions_correct_for_dtc_clear(void) {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
    // Impl�menter les v�rifications sp�cifiques, par exemple :
    // - Le v�hicule est-il dans un mode qui permet l'effacement des DTC ?
    // - La session diagnostique actuelle est-elle correcte ?

    if (uds_session.current_session == UDS_SESSION_DEFAULT) {
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <are_conditions_correct_for_dtc_clear+0x1c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <are_conditions_correct_for_dtc_clear+0x10>
        return false;  // L'effacement n'est pas autoris� dans la session par d�faut
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <are_conditions_correct_for_dtc_clear+0x12>
    }
    // Ajoutez d'autres v�rifications selon les besoins (�tat moteur, etc.)

    return true;  // Toutes les conditions sont correctes
 8002100:	2301      	movs	r3, #1
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	20000014 	.word	0x20000014

08002110 <clear_diagnostic_information>:

// Effacer les informations diagnostiques pour le groupOfDTC sp�cifi�
bool clear_diagnostic_information(uint32_t groupOfDTC) {
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    // Impl�menter la logique pour effacer les informations DTC
    // Ici, nous simulons simplement l'effacement, mais dans un vrai syst�me,
    // cela inclurait des op�rations sur la m�moire et des bases de donn�es de DTC.

    // Exemple : Supposons que l'effacement r�ussit toujours pour cette d�monstration
    return true;
 8002118:	2301      	movs	r3, #1

    // En cas d'�chec (par exemple, �chec d'�criture en m�moire), renvoyer false
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <send_positive_response_clear_diagnostic_information>:

// Envoyer une r�ponse positive apr�s effacement r�ussi
void send_positive_response_clear_diagnostic_information(void) {
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
    uint8_t response[1];
    response[0] = UDS_CLEAR_DIAGNOSTIC_INFORMATION + 0x40;  // SID de r�ponse positive (0x14 + 0x40 = 0x54)
 800212c:	2354      	movs	r3, #84	@ 0x54
 800212e:	713b      	strb	r3, [r7, #4]
    send_can_message(response, 1);  // Envoyer la r�ponse sur le bus CAN
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2101      	movs	r1, #1
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fddb 	bl	8000cf0 <send_can_message>
    // send_uart_message(response, 1);
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <send_negative_response_clear_diagnostic_information>:

// Envoyer une r�ponse n�gative en cas d'erreur
void send_negative_response_clear_diagnostic_information(uint8_t nrc) {
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
    uint8_t response[3];
    response[0] = UDS_NEGATIVE_RESPONSE;  // SID pour une r�ponse n�gative
 800214c:	237f      	movs	r3, #127	@ 0x7f
 800214e:	733b      	strb	r3, [r7, #12]
    response[1] = UDS_CLEAR_DIAGNOSTIC_INFORMATION;  // SID de ClearDiagnosticInformation (0x14)
 8002150:	2314      	movs	r3, #20
 8002152:	737b      	strb	r3, [r7, #13]
    response[2] = nrc;  // Code de r�ponse n�gative (NRC)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	73bb      	strb	r3, [r7, #14]
    send_can_message(response, 3);  // Envoyer la r�ponse sur le bus CAN
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	2103      	movs	r1, #3
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fdc6 	bl	8000cf0 <send_can_message>
    // send_uart_message(response, 3);
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <uds_read_dtc_information>:
DTC_Record mirror_dtc_list[MAX_DTC_COUNT];
DTC_Record user_defined_memory_list[MAX_DTC_COUNT];


// Fonction principale du service ReadDTCInformation
void uds_read_dtc_information(uint8_t sub_function, uint8_t* data, uint8_t data_length) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	4613      	mov	r3, r2
 800217a:	71bb      	strb	r3, [r7, #6]
    switch (sub_function) {
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	3b01      	subs	r3, #1
 8002180:	2b54      	cmp	r3, #84	@ 0x54
 8002182:	f200 814f 	bhi.w	8002424 <uds_read_dtc_information+0x2b8>
 8002186:	a201      	add	r2, pc, #4	@ (adr r2, 800218c <uds_read_dtc_information+0x20>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	080022e1 	.word	0x080022e1
 8002190:	080022ed 	.word	0x080022ed
 8002194:	080022f9 	.word	0x080022f9
 8002198:	08002305 	.word	0x08002305
 800219c:	08002311 	.word	0x08002311
 80021a0:	0800231d 	.word	0x0800231d
 80021a4:	08002329 	.word	0x08002329
 80021a8:	08002335 	.word	0x08002335
 80021ac:	08002341 	.word	0x08002341
 80021b0:	0800234d 	.word	0x0800234d
 80021b4:	08002359 	.word	0x08002359
 80021b8:	08002365 	.word	0x08002365
 80021bc:	08002371 	.word	0x08002371
 80021c0:	0800237d 	.word	0x0800237d
 80021c4:	08002389 	.word	0x08002389
 80021c8:	08002395 	.word	0x08002395
 80021cc:	080023a1 	.word	0x080023a1
 80021d0:	080023ad 	.word	0x080023ad
 80021d4:	080023b9 	.word	0x080023b9
 80021d8:	080023c5 	.word	0x080023c5
 80021dc:	080023d1 	.word	0x080023d1
 80021e0:	080023dd 	.word	0x080023dd
 80021e4:	080023e9 	.word	0x080023e9
 80021e8:	080023f5 	.word	0x080023f5
 80021ec:	08002401 	.word	0x08002401
 80021f0:	08002425 	.word	0x08002425
 80021f4:	08002425 	.word	0x08002425
 80021f8:	08002425 	.word	0x08002425
 80021fc:	08002425 	.word	0x08002425
 8002200:	08002425 	.word	0x08002425
 8002204:	08002425 	.word	0x08002425
 8002208:	08002425 	.word	0x08002425
 800220c:	08002425 	.word	0x08002425
 8002210:	08002425 	.word	0x08002425
 8002214:	08002425 	.word	0x08002425
 8002218:	08002425 	.word	0x08002425
 800221c:	08002425 	.word	0x08002425
 8002220:	08002425 	.word	0x08002425
 8002224:	08002425 	.word	0x08002425
 8002228:	08002425 	.word	0x08002425
 800222c:	08002425 	.word	0x08002425
 8002230:	08002425 	.word	0x08002425
 8002234:	08002425 	.word	0x08002425
 8002238:	08002425 	.word	0x08002425
 800223c:	08002425 	.word	0x08002425
 8002240:	08002425 	.word	0x08002425
 8002244:	08002425 	.word	0x08002425
 8002248:	08002425 	.word	0x08002425
 800224c:	08002425 	.word	0x08002425
 8002250:	08002425 	.word	0x08002425
 8002254:	08002425 	.word	0x08002425
 8002258:	08002425 	.word	0x08002425
 800225c:	08002425 	.word	0x08002425
 8002260:	08002425 	.word	0x08002425
 8002264:	08002425 	.word	0x08002425
 8002268:	08002425 	.word	0x08002425
 800226c:	08002425 	.word	0x08002425
 8002270:	08002425 	.word	0x08002425
 8002274:	08002425 	.word	0x08002425
 8002278:	08002425 	.word	0x08002425
 800227c:	08002425 	.word	0x08002425
 8002280:	08002425 	.word	0x08002425
 8002284:	08002425 	.word	0x08002425
 8002288:	08002425 	.word	0x08002425
 800228c:	08002425 	.word	0x08002425
 8002290:	0800240d 	.word	0x0800240d
 8002294:	08002425 	.word	0x08002425
 8002298:	08002425 	.word	0x08002425
 800229c:	08002425 	.word	0x08002425
 80022a0:	08002425 	.word	0x08002425
 80022a4:	08002425 	.word	0x08002425
 80022a8:	08002425 	.word	0x08002425
 80022ac:	08002425 	.word	0x08002425
 80022b0:	08002425 	.word	0x08002425
 80022b4:	08002425 	.word	0x08002425
 80022b8:	08002425 	.word	0x08002425
 80022bc:	08002425 	.word	0x08002425
 80022c0:	08002425 	.word	0x08002425
 80022c4:	08002425 	.word	0x08002425
 80022c8:	08002425 	.word	0x08002425
 80022cc:	08002425 	.word	0x08002425
 80022d0:	08002425 	.word	0x08002425
 80022d4:	08002425 	.word	0x08002425
 80022d8:	08002425 	.word	0x08002425
 80022dc:	08002419 	.word	0x08002419
        case REPORT_NUMBER_OF_DTC_BY_STATUS_MASK:
            report_number_of_dtc_by_status_mask(data, data_length);
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	4619      	mov	r1, r3
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f000 f981 	bl	80025ec <report_number_of_dtc_by_status_mask>
            break;
 80022ea:	e0a1      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_BY_STATUS_MASK:
            report_dtc_by_status_mask(data, data_length);
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	4619      	mov	r1, r3
 80022f0:	6838      	ldr	r0, [r7, #0]
 80022f2:	f000 f9e3 	bl	80026bc <report_dtc_by_status_mask>
            break;
 80022f6:	e09b      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_SNAPSHOT_IDENTIFICATION:
            report_dtc_snapshot_identification(data, data_length);
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	4619      	mov	r1, r3
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f000 fa87 	bl	8002810 <report_dtc_snapshot_identification>
            break;
 8002302:	e095      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_SNAPSHOT_RECORD_BY_DTC_NUMBER:
            report_dtc_snapshot_record_by_dtc_number(data, data_length);
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	4619      	mov	r1, r3
 8002308:	6838      	ldr	r0, [r7, #0]
 800230a:	f000 fb27 	bl	800295c <report_dtc_snapshot_record_by_dtc_number>
            break;
 800230e:	e08f      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_STORED_DATA_BY_RECORD_NUMBER:
            report_dtc_stored_data_by_record_number(data, data_length);
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	4619      	mov	r1, r3
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	f000 fbdd 	bl	8002ad4 <report_dtc_stored_data_by_record_number>
            break;
 800231a:	e089      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_EXT_DATA_RECORD_BY_DTC_NUMBER:
            report_dtc_ext_data_record_by_dtc_number(data, data_length);
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	4619      	mov	r1, r3
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	f000 fc85 	bl	8002c30 <report_dtc_ext_data_record_by_dtc_number>
            break;
 8002326:	e083      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_NUMBER_OF_DTC_BY_SEVERITY_MASK:
            report_number_of_dtc_by_severity_mask(data, data_length);
 8002328:	79bb      	ldrb	r3, [r7, #6]
 800232a:	4619      	mov	r1, r3
 800232c:	6838      	ldr	r0, [r7, #0]
 800232e:	f000 fd43 	bl	8002db8 <report_number_of_dtc_by_severity_mask>
            break;
 8002332:	e07d      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_BY_SEVERITY_MASK_RECORD:
            report_dtc_by_severity_mask_record(data, data_length);
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	4619      	mov	r1, r3
 8002338:	6838      	ldr	r0, [r7, #0]
 800233a:	f000 fd93 	bl	8002e64 <report_dtc_by_severity_mask_record>
            break;
 800233e:	e077      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_SEVERITY_INFORMATION_OF_DTC:
            report_severity_information_of_dtc(data, data_length);
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	4619      	mov	r1, r3
 8002344:	6838      	ldr	r0, [r7, #0]
 8002346:	f000 fe05 	bl	8002f54 <report_severity_information_of_dtc>
            break;
 800234a:	e071      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_SUPPORTED_DTC:
            report_supported_dtc(data, data_length);
 800234c:	79bb      	ldrb	r3, [r7, #6]
 800234e:	4619      	mov	r1, r3
 8002350:	6838      	ldr	r0, [r7, #0]
 8002352:	f000 fe61 	bl	8003018 <report_supported_dtc>
            break;
 8002356:	e06b      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_FIRST_TEST_FAILED_DTC:
            report_first_test_failed_dtc(data, data_length);
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	4619      	mov	r1, r3
 800235c:	6838      	ldr	r0, [r7, #0]
 800235e:	f000 febb 	bl	80030d8 <report_first_test_failed_dtc>
            break;
 8002362:	e065      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_FIRST_CONFIRMED_DTC:
            report_first_confirmed_dtc(data, data_length);
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	4619      	mov	r1, r3
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f000 ff09 	bl	8003180 <report_first_confirmed_dtc>
            break;
 800236e:	e05f      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_MOST_RECENT_TEST_FAILED_DTC:
            report_most_recent_test_failed_dtc(data, data_length);
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	4619      	mov	r1, r3
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f000 ff57 	bl	8003228 <report_most_recent_test_failed_dtc>
            break;
 800237a:	e059      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_MOST_RECENT_CONFIRMED_DTC:
            report_most_recent_confirmed_dtc(data, data_length);
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	4619      	mov	r1, r3
 8002380:	6838      	ldr	r0, [r7, #0]
 8002382:	f000 ffb1 	bl	80032e8 <report_most_recent_confirmed_dtc>
            break;
 8002386:	e053      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_MIRROR_MEMORY_DTC_BY_STATUS_MASK:
            report_mirror_memory_dtc_by_status_mask(data, data_length);
 8002388:	79bb      	ldrb	r3, [r7, #6]
 800238a:	4619      	mov	r1, r3
 800238c:	6838      	ldr	r0, [r7, #0]
 800238e:	f001 f80b 	bl	80033a8 <report_mirror_memory_dtc_by_status_mask>
            break;
 8002392:	e04d      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_MIRROR_MEMORY_DTC_EXT_DATA_RECORD:
            report_mirror_memory_dtc_ext_data_record(data, data_length);
 8002394:	79bb      	ldrb	r3, [r7, #6]
 8002396:	4619      	mov	r1, r3
 8002398:	6838      	ldr	r0, [r7, #0]
 800239a:	f001 f86b 	bl	8003474 <report_mirror_memory_dtc_ext_data_record>
            break;
 800239e:	e047      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_NUMBER_OF_MIRROR_MEMORY_DTC_BY_STATUS_MASK:
            report_number_of_mirror_memory_dtc_by_status_mask(data, data_length);
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	4619      	mov	r1, r3
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f001 f8c5 	bl	8003534 <report_number_of_mirror_memory_dtc_by_status_mask>
            break;
 80023aa:	e041      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_NUMBER_OF_EMISSIONS_OBD_DTC_BY_STATUS_MASK:
            report_number_of_emissions_obd_dtc_by_status_mask(data, data_length);
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	4619      	mov	r1, r3
 80023b0:	6838      	ldr	r0, [r7, #0]
 80023b2:	f001 f90f 	bl	80035d4 <report_number_of_emissions_obd_dtc_by_status_mask>
            break;
 80023b6:	e03b      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_EMISSIONS_OBD_DTC_BY_STATUS_MASK:
            report_emissions_obd_dtc_by_status_mask(data, data_length);
 80023b8:	79bb      	ldrb	r3, [r7, #6]
 80023ba:	4619      	mov	r1, r3
 80023bc:	6838      	ldr	r0, [r7, #0]
 80023be:	f001 f973 	bl	80036a8 <report_emissions_obd_dtc_by_status_mask>
            break;
 80023c2:	e035      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_FAULT_DETECTION_COUNTER:
            report_dtc_fault_detection_counter(data, data_length);
 80023c4:	79bb      	ldrb	r3, [r7, #6]
 80023c6:	4619      	mov	r1, r3
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f001 f9db 	bl	8003784 <report_dtc_fault_detection_counter>
            break;
 80023ce:	e02f      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_WITH_PERMANENT_STATUS:
            report_dtc_with_permanent_status(data, data_length);
 80023d0:	79bb      	ldrb	r3, [r7, #6]
 80023d2:	4619      	mov	r1, r3
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f001 fa33 	bl	8003840 <report_dtc_with_permanent_status>
            break;
 80023da:	e029      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_DTC_EXT_DATA_RECORD_BY_RECORD_NUMBER:
            report_dtc_ext_data_record_by_record_number(data, data_length);
 80023dc:	79bb      	ldrb	r3, [r7, #6]
 80023de:	4619      	mov	r1, r3
 80023e0:	6838      	ldr	r0, [r7, #0]
 80023e2:	f001 fa8d 	bl	8003900 <report_dtc_ext_data_record_by_record_number>
            break;
 80023e6:	e023      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_USER_DEF_MEMORY_DTC_BY_STATUS_MASK:
            report_user_def_memory_dtc_by_status_mask(data, data_length);
 80023e8:	79bb      	ldrb	r3, [r7, #6]
 80023ea:	4619      	mov	r1, r3
 80023ec:	6838      	ldr	r0, [r7, #0]
 80023ee:	f001 fad7 	bl	80039a0 <report_user_def_memory_dtc_by_status_mask>
            break;
 80023f2:	e01d      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_USER_DEF_MEMORY_DTC_SNAPSHOT_RECORD:
            report_user_def_memory_dtc_snapshot_record(data, data_length);
 80023f4:	79bb      	ldrb	r3, [r7, #6]
 80023f6:	4619      	mov	r1, r3
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f001 fb35 	bl	8003a68 <report_user_def_memory_dtc_snapshot_record>
            break;
 80023fe:	e017      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_USER_DEF_MEMORY_DTC_EXT_DATA_RECORD:
            report_user_def_memory_dtc_ext_data_record(data, data_length);
 8002400:	79bb      	ldrb	r3, [r7, #6]
 8002402:	4619      	mov	r1, r3
 8002404:	6838      	ldr	r0, [r7, #0]
 8002406:	f001 fba3 	bl	8003b50 <report_user_def_memory_dtc_ext_data_record>
            break;
 800240a:	e011      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_WWH_OBD_DTC_BY_MASK_RECORD:
            report_wwh_obd_dtc_by_mask_record(data, data_length);
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	4619      	mov	r1, r3
 8002410:	6838      	ldr	r0, [r7, #0]
 8002412:	f001 fc11 	bl	8003c38 <report_wwh_obd_dtc_by_mask_record>
            break;
 8002416:	e00b      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        case REPORT_WWH_OBD_DTC_WITH_PERMANENT_STATUS:
            report_wwh_obd_dtc_with_permanent_status(data, data_length);
 8002418:	79bb      	ldrb	r3, [r7, #6]
 800241a:	4619      	mov	r1, r3
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	f001 fc7d 	bl	8003d1c <report_wwh_obd_dtc_with_permanent_status>
            break;
 8002422:	e005      	b.n	8002430 <uds_read_dtc_information+0x2c4>
        default:
            send_negative_response_read_dtc_information(sub_function, NRC_SUB_FUNCTION_NOT_SUPPORTED);
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2112      	movs	r1, #18
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f8c7 	bl	80025bc <send_negative_response_read_dtc_information>
            break;
 800242e:	bf00      	nop
    }
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <send_positive_response_read_dtc_information>:

void send_positive_response_read_dtc_information(uint8_t sub_function, DTC_Record* dtcRecords, uint8_t dtcCount) {
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	4613      	mov	r3, r2
 8002446:	71bb      	strb	r3, [r7, #6]
    // Limiter la taille maximale de la r�ponse � la taille d'un message CAN (par exemple, 8 octets)
    uint8_t response[8];  // Tableau de r�ponse limit� � 8 octets
    uint8_t index = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	75bb      	strb	r3, [r7, #22]

    // Champ 1 : SID pour ReadDTCInformation
    response[index++] = 0x59;  // SID pour ReadDTCInformation (r�ponse positive)
 800244c:	7dbb      	ldrb	r3, [r7, #22]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	75ba      	strb	r2, [r7, #22]
 8002452:	3318      	adds	r3, #24
 8002454:	443b      	add	r3, r7
 8002456:	2259      	movs	r2, #89	@ 0x59
 8002458:	f803 2c0c 	strb.w	r2, [r3, #-12]

    // Champ 2 : Type de rapport (sub_function)
    response[index++] = sub_function;
 800245c:	7dbb      	ldrb	r3, [r7, #22]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	75ba      	strb	r2, [r7, #22]
 8002462:	3318      	adds	r3, #24
 8002464:	443b      	add	r3, r7
 8002466:	79fa      	ldrb	r2, [r7, #7]
 8002468:	f803 2c0c 	strb.w	r2, [r3, #-12]

    switch (sub_function) {
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	3b01      	subs	r3, #1
 8002470:	2b0a      	cmp	r3, #10
 8002472:	f200 809a 	bhi.w	80025aa <send_positive_response_read_dtc_information+0x172>
 8002476:	a201      	add	r2, pc, #4	@ (adr r2, 800247c <send_positive_response_read_dtc_information+0x44>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	080024a9 	.word	0x080024a9
 8002480:	080024f5 	.word	0x080024f5
 8002484:	080025ab 	.word	0x080025ab
 8002488:	080025ab 	.word	0x080025ab
 800248c:	080025ab 	.word	0x080025ab
 8002490:	080025ab 	.word	0x080025ab
 8002494:	080024a9 	.word	0x080024a9
 8002498:	080025ab 	.word	0x080025ab
 800249c:	080025ab 	.word	0x080025ab
 80024a0:	080024f5 	.word	0x080024f5
 80024a4:	080024f5 	.word	0x080024f5
        case REPORT_NUMBER_OF_DTC_BY_STATUS_MASK:
        case REPORT_NUMBER_OF_DTC_BY_SEVERITY_MASK:
            // Champs 3 : DTCStatusAvailabilityMask
            response[index++] = get_dtc_status_availability_mask();
 80024a8:	7dbb      	ldrb	r3, [r7, #22]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	75ba      	strb	r2, [r7, #22]
 80024ae:	461c      	mov	r4, r3
 80024b0:	f001 fc98 	bl	8003de4 <get_dtc_status_availability_mask>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	f104 0318 	add.w	r3, r4, #24
 80024bc:	443b      	add	r3, r7
 80024be:	f803 2c0c 	strb.w	r2, [r3, #-12]

            // Champs 4 : Nombre de DTCs
            response[index++] = (dtcCount >> 8) & 0xFF;  // Octet �lev� du nombre de DTCs
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	75ba      	strb	r2, [r7, #22]
 80024c8:	3318      	adds	r3, #24
 80024ca:	443b      	add	r3, r7
 80024cc:	2200      	movs	r2, #0
 80024ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
            response[index++] = dtcCount & 0xFF;         // Octet bas du nombre de DTCs
 80024d2:	7dbb      	ldrb	r3, [r7, #22]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	75ba      	strb	r2, [r7, #22]
 80024d8:	3318      	adds	r3, #24
 80024da:	443b      	add	r3, r7
 80024dc:	79ba      	ldrb	r2, [r7, #6]
 80024de:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 80024e2:	bf00      	nop
            send_negative_response_read_dtc_information(sub_function, NRC_SUB_FUNCTION_NOT_SUPPORTED);
            return;
    }

    // Envoi du message si tous les octets tiennent dans un seul message CAN
    send_can_message(response, index);
 80024e4:	7dba      	ldrb	r2, [r7, #22]
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fbff 	bl	8000cf0 <send_can_message>
 80024f2:	e060      	b.n	80025b6 <send_positive_response_read_dtc_information+0x17e>
            for (uint8_t i = 0; i < dtcCount; i++) {
 80024f4:	2300      	movs	r3, #0
 80024f6:	75fb      	strb	r3, [r7, #23]
 80024f8:	e052      	b.n	80025a0 <send_positive_response_read_dtc_information+0x168>
                index = 2;  // R�initialiser l'index apr�s SID et sous-fonction pour chaque nouveau message
 80024fa:	2302      	movs	r3, #2
 80024fc:	75bb      	strb	r3, [r7, #22]
                response[index++] = (dtcRecords[i].dtcNumber >> 16) & 0xFF;  // Octet sup�rieur du DTC
 80024fe:	7dfa      	ldrb	r2, [r7, #23]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	461a      	mov	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0c1a      	lsrs	r2, r3, #16
 8002512:	7dbb      	ldrb	r3, [r7, #22]
 8002514:	1c59      	adds	r1, r3, #1
 8002516:	75b9      	strb	r1, [r7, #22]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	3318      	adds	r3, #24
 800251c:	443b      	add	r3, r7
 800251e:	f803 2c0c 	strb.w	r2, [r3, #-12]
                response[index++] = (dtcRecords[i].dtcNumber >> 8) & 0xFF;   // Octet du milieu
 8002522:	7dfa      	ldrb	r2, [r7, #23]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	461a      	mov	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0a1a      	lsrs	r2, r3, #8
 8002536:	7dbb      	ldrb	r3, [r7, #22]
 8002538:	1c59      	adds	r1, r3, #1
 800253a:	75b9      	strb	r1, [r7, #22]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	3318      	adds	r3, #24
 8002540:	443b      	add	r3, r7
 8002542:	f803 2c0c 	strb.w	r2, [r3, #-12]
                response[index++] = dtcRecords[i].dtcNumber & 0xFF;          // Octet inf�rieur
 8002546:	7dfa      	ldrb	r2, [r7, #23]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	461a      	mov	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	7dbb      	ldrb	r3, [r7, #22]
 800255a:	1c59      	adds	r1, r3, #1
 800255c:	75b9      	strb	r1, [r7, #22]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	3318      	adds	r3, #24
 8002562:	443b      	add	r3, r7
 8002564:	f803 2c0c 	strb.w	r2, [r3, #-12]
                response[index++] = dtcRecords[i].status;                    // Statut du DTC
 8002568:	7dfa      	ldrb	r2, [r7, #23]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	461a      	mov	r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	441a      	add	r2, r3
 8002578:	7dbb      	ldrb	r3, [r7, #22]
 800257a:	1c59      	adds	r1, r3, #1
 800257c:	75b9      	strb	r1, [r7, #22]
 800257e:	7912      	ldrb	r2, [r2, #4]
 8002580:	3318      	adds	r3, #24
 8002582:	443b      	add	r3, r7
 8002584:	f803 2c0c 	strb.w	r2, [r3, #-12]
                send_can_message(response, index);
 8002588:	7dba      	ldrb	r2, [r7, #22]
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fbad 	bl	8000cf0 <send_can_message>
                index = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	75bb      	strb	r3, [r7, #22]
            for (uint8_t i = 0; i < dtcCount; i++) {
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	3301      	adds	r3, #1
 800259e:	75fb      	strb	r3, [r7, #23]
 80025a0:	7dfa      	ldrb	r2, [r7, #23]
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3a8      	bcc.n	80024fa <send_positive_response_read_dtc_information+0xc2>
            return;  // Tous les messages ont �t� envoy�s
 80025a8:	e005      	b.n	80025b6 <send_positive_response_read_dtc_information+0x17e>
            send_negative_response_read_dtc_information(sub_function, NRC_SUB_FUNCTION_NOT_SUPPORTED);
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2112      	movs	r1, #18
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f804 	bl	80025bc <send_negative_response_read_dtc_information>
            return;
 80025b4:	bf00      	nop
    // send_uart_message(response, 3);
}
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd90      	pop	{r4, r7, pc}

080025bc <send_negative_response_read_dtc_information>:




// Envoi d'une r�ponse n�gative pour ReadDTCInformation
void send_negative_response_read_dtc_information(uint8_t sub_function, uint8_t nrc) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	460a      	mov	r2, r1
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71bb      	strb	r3, [r7, #6]
    uint8_t response[3];
    response[0] = 0x7F; // Negative Response SID
 80025cc:	237f      	movs	r3, #127	@ 0x7f
 80025ce:	733b      	strb	r3, [r7, #12]
    response[1] = sub_function;
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	737b      	strb	r3, [r7, #13]
    response[2] = nrc;
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	73bb      	strb	r3, [r7, #14]
    send_can_message(response, 3);
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	2103      	movs	r1, #3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fb86 	bl	8000cf0 <send_can_message>
    // send_uart_message(response, 3);
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <report_number_of_dtc_by_status_mask>:

// Impl�mentation des sous-fonctions ReadDTCInformation
void report_number_of_dtc_by_status_mask(uint8_t* data, uint8_t data_length) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur des donn�es re�ues
    if (data_length != 1) {
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d004      	beq.n	8002608 <report_number_of_dtc_by_status_mask+0x1c>
        send_negative_response_read_dtc_information(REPORT_NUMBER_OF_DTC_BY_STATUS_MASK, NRC_INCORRECT_MESSAGE_LENGTH);
 80025fe:	2113      	movs	r1, #19
 8002600:	2001      	movs	r0, #1
 8002602:	f7ff ffdb 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002606:	e053      	b.n	80026b0 <report_number_of_dtc_by_status_mask+0xc4>
    }

    uint8_t status_mask = data[0];  // Le masque de statut est envoy� en premier
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	753b      	strb	r3, [r7, #20]
    uint16_t dtc_count = 0;         // Compteur de DTC
 800260e:	2300      	movs	r3, #0
 8002610:	82fb      	strh	r3, [r7, #22]
    uint8_t dtc_status_availability_mask = get_dtc_status_availability_mask();
 8002612:	f001 fbe7 	bl	8003de4 <get_dtc_status_availability_mask>
 8002616:	4603      	mov	r3, r0
 8002618:	74fb      	strb	r3, [r7, #19]
    uint8_t dtc_format_identifier = get_dtc_format_identifier();
 800261a:	f001 fbeb 	bl	8003df4 <get_dtc_format_identifier>
 800261e:	4603      	mov	r3, r0
 8002620:	74bb      	strb	r3, [r7, #18]

    // Compter les DTC qui correspondent au masque de statut
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002622:	2300      	movs	r3, #0
 8002624:	757b      	strb	r3, [r7, #21]
 8002626:	e013      	b.n	8002650 <report_number_of_dtc_by_status_mask+0x64>
        if ((stored_dtc_list[i].status & status_mask) != 0) {
 8002628:	7d7a      	ldrb	r2, [r7, #21]
 800262a:	4923      	ldr	r1, [pc, #140]	@ (80026b8 <report_number_of_dtc_by_status_mask+0xcc>)
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	440b      	add	r3, r1
 8002636:	3304      	adds	r3, #4
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	7d3b      	ldrb	r3, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <report_number_of_dtc_by_status_mask+0x5e>
            dtc_count++;
 8002644:	8afb      	ldrh	r3, [r7, #22]
 8002646:	3301      	adds	r3, #1
 8002648:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 800264a:	7d7b      	ldrb	r3, [r7, #21]
 800264c:	3301      	adds	r3, #1
 800264e:	757b      	strb	r3, [r7, #21]
 8002650:	7d7b      	ldrb	r3, [r7, #21]
 8002652:	2bff      	cmp	r3, #255	@ 0xff
 8002654:	d1e8      	bne.n	8002628 <report_number_of_dtc_by_status_mask+0x3c>
        }
    }

    // Si aucun DTC n'a �t� trouv�, renvoyer un NRC (aucune condition remplie)
    if (dtc_count == 0) {
 8002656:	8afb      	ldrh	r3, [r7, #22]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <report_number_of_dtc_by_status_mask+0x7a>
        send_negative_response_read_dtc_information(REPORT_NUMBER_OF_DTC_BY_STATUS_MASK, NRC_CONDITIONS_NOT_CORRECT);
 800265c:	2122      	movs	r1, #34	@ 0x22
 800265e:	2001      	movs	r0, #1
 8002660:	f7ff ffac 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002664:	e024      	b.n	80026b0 <report_number_of_dtc_by_status_mask+0xc4>
    }

    // Allouer dynamiquement la m�moire pour la r�ponse (4 octets)
    uint8_t* response = (uint8_t*)malloc(4 * sizeof(uint8_t));
 8002666:	2004      	movs	r0, #4
 8002668:	f005 fc54 	bl	8007f14 <malloc>
 800266c:	4603      	mov	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]
    if (response == NULL) {
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <report_number_of_dtc_by_status_mask+0x90>
        // Si l'allocation �choue, g�rer l'erreur
        Error_handler();
 8002676:	f002 f9ad 	bl	80049d4 <Error_handler>
        return;
 800267a:	e019      	b.n	80026b0 <report_number_of_dtc_by_status_mask+0xc4>
    }

    // Cr�er la r�ponse avec le masque de disponibilit� et l'identifiant du format de DTC
    response[0] = dtc_status_availability_mask;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	7cfa      	ldrb	r2, [r7, #19]
 8002680:	701a      	strb	r2, [r3, #0]
    response[1] = dtc_format_identifier;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3301      	adds	r3, #1
 8002686:	7cba      	ldrb	r2, [r7, #18]
 8002688:	701a      	strb	r2, [r3, #0]
    response[2] = (dtc_count >> 8) & 0xFF;  // Octet de poids fort du compteur de DTC
 800268a:	8afb      	ldrh	r3, [r7, #22]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3302      	adds	r3, #2
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]
    response[3] = dtc_count & 0xFF;         // Octet de poids faible du compteur de DTC
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3303      	adds	r3, #3
 800269c:	8afa      	ldrh	r2, [r7, #22]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

    // Envoyer la r�ponse positive au client via le CAN (ou autre protocole de communication)
    send_can_message(response, 4);  // Utiliser send_can_message pour envoyer la r�ponse sous forme de tableau d'octets
 80026a2:	2104      	movs	r1, #4
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7fe fb23 	bl	8000cf0 <send_can_message>
    // send_uart_message(response, 4);
    // Lib�rer la m�moire allou�e dynamiquement
    free(response);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f005 fc3a 	bl	8007f24 <free>
}
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000184 	.word	0x20000184

080026bc <report_dtc_by_status_mask>:

void report_dtc_by_status_mask(uint8_t* data, uint8_t data_length) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur des donn�es re�ues
    if (data_length != 1) {
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d004      	beq.n	80026d8 <report_dtc_by_status_mask+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_BY_STATUS_MASK, NRC_INCORRECT_MESSAGE_LENGTH);
 80026ce:	2113      	movs	r1, #19
 80026d0:	2002      	movs	r0, #2
 80026d2:	f7ff ff73 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 80026d6:	e095      	b.n	8002804 <report_dtc_by_status_mask+0x148>
    }

    uint8_t status_mask = data[0];  // Le masque de statut est envoy� en premier
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	743b      	strb	r3, [r7, #16]
    uint16_t dtc_count = 0;         // Compteur de DTC
 80026de:	2300      	movs	r3, #0
 80026e0:	82fb      	strh	r3, [r7, #22]

    // Compter le nombre de DTC correspondant au masque de statut
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80026e2:	2300      	movs	r3, #0
 80026e4:	757b      	strb	r3, [r7, #21]
 80026e6:	e013      	b.n	8002710 <report_dtc_by_status_mask+0x54>
        if ((stored_dtc_list[i].status & status_mask) != 0) {
 80026e8:	7d7a      	ldrb	r2, [r7, #21]
 80026ea:	4948      	ldr	r1, [pc, #288]	@ (800280c <report_dtc_by_status_mask+0x150>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	440b      	add	r3, r1
 80026f6:	3304      	adds	r3, #4
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	7c3b      	ldrb	r3, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <report_dtc_by_status_mask+0x4e>
            dtc_count++;
 8002704:	8afb      	ldrh	r3, [r7, #22]
 8002706:	3301      	adds	r3, #1
 8002708:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 800270a:	7d7b      	ldrb	r3, [r7, #21]
 800270c:	3301      	adds	r3, #1
 800270e:	757b      	strb	r3, [r7, #21]
 8002710:	7d7b      	ldrb	r3, [r7, #21]
 8002712:	2bff      	cmp	r3, #255	@ 0xff
 8002714:	d1e8      	bne.n	80026e8 <report_dtc_by_status_mask+0x2c>
        }
    }

    // Si aucun DTC n'a �t� trouv�, renvoyer un NRC (aucune condition remplie)
    if (dtc_count == 0) {
 8002716:	8afb      	ldrh	r3, [r7, #22]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <report_dtc_by_status_mask+0x6a>
        send_negative_response_read_dtc_information(REPORT_DTC_BY_STATUS_MASK, NRC_CONDITIONS_NOT_CORRECT);
 800271c:	2122      	movs	r1, #34	@ 0x22
 800271e:	2002      	movs	r0, #2
 8002720:	f7ff ff4c 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002724:	e06e      	b.n	8002804 <report_dtc_by_status_mask+0x148>
    }

    // Allouer dynamiquement de la m�moire pour les DTC_Record
    DTC_Record* dtc_records = (DTC_Record*)malloc(dtc_count * sizeof(DTC_Record));
 8002726:	8afa      	ldrh	r2, [r7, #22]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f005 fbef 	bl	8007f14 <malloc>
 8002736:	4603      	mov	r3, r0
 8002738:	60fb      	str	r3, [r7, #12]
    if (dtc_records == NULL) {
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <report_dtc_by_status_mask+0x8a>
        // Si l'allocation �choue, g�rer l'erreur
        Error_handler();
 8002740:	f002 f948 	bl	80049d4 <Error_handler>
        return;
 8002744:	e05e      	b.n	8002804 <report_dtc_by_status_mask+0x148>
    }

    // Remplir les enregistrements DTC
    uint16_t index = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	827b      	strh	r3, [r7, #18]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 800274a:	2300      	movs	r3, #0
 800274c:	747b      	strb	r3, [r7, #17]
 800274e:	e04c      	b.n	80027ea <report_dtc_by_status_mask+0x12e>
        if ((stored_dtc_list[i].status & status_mask) != 0 && index < dtc_count) {
 8002750:	7c7a      	ldrb	r2, [r7, #17]
 8002752:	492e      	ldr	r1, [pc, #184]	@ (800280c <report_dtc_by_status_mask+0x150>)
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	440b      	add	r3, r1
 800275e:	3304      	adds	r3, #4
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	7c3b      	ldrb	r3, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03b      	beq.n	80027e4 <report_dtc_by_status_mask+0x128>
 800276c:	8a7a      	ldrh	r2, [r7, #18]
 800276e:	8afb      	ldrh	r3, [r7, #22]
 8002770:	429a      	cmp	r2, r3
 8002772:	d237      	bcs.n	80027e4 <report_dtc_by_status_mask+0x128>
            dtc_records[index].dtcNumber = stored_dtc_list[i].dtcNumber;
 8002774:	7c7a      	ldrb	r2, [r7, #17]
 8002776:	8a79      	ldrh	r1, [r7, #18]
 8002778:	460b      	mov	r3, r1
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	4619      	mov	r1, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4419      	add	r1, r3
 8002786:	4821      	ldr	r0, [pc, #132]	@ (800280c <report_dtc_by_status_mask+0x150>)
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4403      	add	r3, r0
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	600b      	str	r3, [r1, #0]
            dtc_records[index].status = stored_dtc_list[i].status;
 8002796:	7c7a      	ldrb	r2, [r7, #17]
 8002798:	8a79      	ldrh	r1, [r7, #18]
 800279a:	460b      	mov	r3, r1
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4619      	mov	r1, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4419      	add	r1, r3
 80027a8:	4818      	ldr	r0, [pc, #96]	@ (800280c <report_dtc_by_status_mask+0x150>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4403      	add	r3, r0
 80027b4:	3304      	adds	r3, #4
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	710b      	strb	r3, [r1, #4]
            dtc_records[index].severity = stored_dtc_list[i].severity;
 80027ba:	7c7a      	ldrb	r2, [r7, #17]
 80027bc:	8a79      	ldrh	r1, [r7, #18]
 80027be:	460b      	mov	r3, r1
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4419      	add	r1, r3
 80027cc:	480f      	ldr	r0, [pc, #60]	@ (800280c <report_dtc_by_status_mask+0x150>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	4403      	add	r3, r0
 80027d8:	3305      	adds	r3, #5
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	714b      	strb	r3, [r1, #5]
            index++;
 80027de:	8a7b      	ldrh	r3, [r7, #18]
 80027e0:	3301      	adds	r3, #1
 80027e2:	827b      	strh	r3, [r7, #18]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80027e4:	7c7b      	ldrb	r3, [r7, #17]
 80027e6:	3301      	adds	r3, #1
 80027e8:	747b      	strb	r3, [r7, #17]
 80027ea:	7c7b      	ldrb	r3, [r7, #17]
 80027ec:	2bff      	cmp	r3, #255	@ 0xff
 80027ee:	d1af      	bne.n	8002750 <report_dtc_by_status_mask+0x94>
        }
    }

    // Envoyer la r�ponse positive avec les DTC_Record
    send_positive_response_read_dtc_information(REPORT_DTC_BY_STATUS_MASK, dtc_records, dtc_count);
 80027f0:	8afb      	ldrh	r3, [r7, #22]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	2002      	movs	r0, #2
 80027fa:	f7ff fe1d 	bl	8002438 <send_positive_response_read_dtc_information>

    // Lib�rer la m�moire allou�e dynamiquement
    free(dtc_records);
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f005 fb90 	bl	8007f24 <free>
}
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000184 	.word	0x20000184

08002810 <report_dtc_snapshot_identification>:



void report_dtc_snapshot_identification(uint8_t* data, uint8_t data_length) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur des donn�es re�ues
    if (data_length != 0) {  // Aucune donn�e n'est attendue pour ce service
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <report_dtc_snapshot_identification+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_SNAPSHOT_IDENTIFICATION, NRC_INCORRECT_MESSAGE_LENGTH);
 8002822:	2113      	movs	r1, #19
 8002824:	2003      	movs	r0, #3
 8002826:	f7ff fec9 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800282a:	e091      	b.n	8002950 <report_dtc_snapshot_identification+0x140>
    }

    uint16_t dtc_count = 0;  // Compteur pour le nombre de DTC
 800282c:	2300      	movs	r3, #0
 800282e:	82fb      	strh	r3, [r7, #22]
    uint16_t snapshot_count = 0;  // Compteur pour le nombre de snapshots
 8002830:	2300      	movs	r3, #0
 8002832:	82bb      	strh	r3, [r7, #20]

    // Compter le nombre de DTCs qui ont un snapshot associ�
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002834:	2300      	movs	r3, #0
 8002836:	74fb      	strb	r3, [r7, #19]
 8002838:	e01d      	b.n	8002876 <report_dtc_snapshot_identification+0x66>
        if (stored_dtc_list[i].snapshotDataLength > 0) {  // Un snapshot est pr�sent pour ce DTC
 800283a:	7cfa      	ldrb	r2, [r7, #19]
 800283c:	4946      	ldr	r1, [pc, #280]	@ (8002958 <report_dtc_snapshot_identification+0x148>)
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	440b      	add	r3, r1
 8002848:	3347      	adds	r3, #71	@ 0x47
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00f      	beq.n	8002870 <report_dtc_snapshot_identification+0x60>
            snapshot_count += stored_dtc_list[i].snapshotRecordNumber;  // Compter chaque occurrence
 8002850:	7cfa      	ldrb	r2, [r7, #19]
 8002852:	4941      	ldr	r1, [pc, #260]	@ (8002958 <report_dtc_snapshot_identification+0x148>)
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	440b      	add	r3, r1
 800285e:	3306      	adds	r3, #6
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	8abb      	ldrh	r3, [r7, #20]
 8002866:	4413      	add	r3, r2
 8002868:	82bb      	strh	r3, [r7, #20]
            dtc_count++;
 800286a:	8afb      	ldrh	r3, [r7, #22]
 800286c:	3301      	adds	r3, #1
 800286e:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	3301      	adds	r3, #1
 8002874:	74fb      	strb	r3, [r7, #19]
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2bff      	cmp	r3, #255	@ 0xff
 800287a:	d1de      	bne.n	800283a <report_dtc_snapshot_identification+0x2a>
        }
    }

    // Si aucun snapshot n'est trouv�, renvoyer un NRC
    if (snapshot_count == 0) {
 800287c:	8abb      	ldrh	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <report_dtc_snapshot_identification+0x7c>
        send_negative_response_read_dtc_information(REPORT_DTC_SNAPSHOT_IDENTIFICATION, NRC_CONDITIONS_NOT_CORRECT);
 8002882:	2122      	movs	r1, #34	@ 0x22
 8002884:	2003      	movs	r0, #3
 8002886:	f7ff fe99 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800288a:	e061      	b.n	8002950 <report_dtc_snapshot_identification+0x140>
    }

    // Allouer dynamiquement de la m�moire pour les enregistrements DTC_Record
    DTC_Record* dtc_records = (DTC_Record*)malloc(snapshot_count * sizeof(DTC_Record));
 800288c:	8aba      	ldrh	r2, [r7, #20]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	4618      	mov	r0, r3
 8002898:	f005 fb3c 	bl	8007f14 <malloc>
 800289c:	4603      	mov	r3, r0
 800289e:	60bb      	str	r3, [r7, #8]
    if (dtc_records == NULL) {
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <report_dtc_snapshot_identification+0x9c>
        // Si l'allocation �choue, g�rer l'erreur
        Error_handler();
 80028a6:	f002 f895 	bl	80049d4 <Error_handler>
        return;
 80028aa:	e051      	b.n	8002950 <report_dtc_snapshot_identification+0x140>
    }

    // Remplir les enregistrements DTC_Record avec le num�ro DTC et le num�ro de snapshot
    uint16_t index = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	823b      	strh	r3, [r7, #16]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e03f      	b.n	8002936 <report_dtc_snapshot_identification+0x126>
        if (stored_dtc_list[i].snapshotDataLength > 0) {
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	4927      	ldr	r1, [pc, #156]	@ (8002958 <report_dtc_snapshot_identification+0x148>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	440b      	add	r3, r1
 80028c4:	3347      	adds	r3, #71	@ 0x47
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d031      	beq.n	8002930 <report_dtc_snapshot_identification+0x120>
            // Pour chaque occurrence de snapshot pour un DTC donn�
            for (uint8_t j = 0; j < stored_dtc_list[i].snapshotRecordNumber; j++) {
 80028cc:	2300      	movs	r3, #0
 80028ce:	73bb      	strb	r3, [r7, #14]
 80028d0:	e022      	b.n	8002918 <report_dtc_snapshot_identification+0x108>
                dtc_records[index].dtcNumber = stored_dtc_list[i].dtcNumber;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	8a39      	ldrh	r1, [r7, #16]
 80028d6:	460b      	mov	r3, r1
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4419      	add	r1, r3
 80028e4:	481c      	ldr	r0, [pc, #112]	@ (8002958 <report_dtc_snapshot_identification+0x148>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	4403      	add	r3, r0
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	600b      	str	r3, [r1, #0]
                dtc_records[index].snapshotRecordNumber = j + 1;  // Num�rotation des snapshots
 80028f4:	8a3a      	ldrh	r2, [r7, #16]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4413      	add	r3, r2
 8002904:	7bba      	ldrb	r2, [r7, #14]
 8002906:	3201      	adds	r2, #1
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	719a      	strb	r2, [r3, #6]
                index++;
 800290c:	8a3b      	ldrh	r3, [r7, #16]
 800290e:	3301      	adds	r3, #1
 8002910:	823b      	strh	r3, [r7, #16]
            for (uint8_t j = 0; j < stored_dtc_list[i].snapshotRecordNumber; j++) {
 8002912:	7bbb      	ldrb	r3, [r7, #14]
 8002914:	3301      	adds	r3, #1
 8002916:	73bb      	strb	r3, [r7, #14]
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	490f      	ldr	r1, [pc, #60]	@ (8002958 <report_dtc_snapshot_identification+0x148>)
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	440b      	add	r3, r1
 8002926:	3306      	adds	r3, #6
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	7bba      	ldrb	r2, [r7, #14]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3d0      	bcc.n	80028d2 <report_dtc_snapshot_identification+0xc2>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	3301      	adds	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	2bff      	cmp	r3, #255	@ 0xff
 800293a:	d1bc      	bne.n	80028b6 <report_dtc_snapshot_identification+0xa6>
            }
        }
    }

    // Envoyer la r�ponse positive avec les enregistrements DTC_Record
    send_positive_response_read_dtc_information(REPORT_DTC_SNAPSHOT_IDENTIFICATION, dtc_records, snapshot_count);
 800293c:	8abb      	ldrh	r3, [r7, #20]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	2003      	movs	r0, #3
 8002946:	f7ff fd77 	bl	8002438 <send_positive_response_read_dtc_information>

    // Lib�rer la m�moire allou�e dynamiquement
    free(dtc_records);
 800294a:	68b8      	ldr	r0, [r7, #8]
 800294c:	f005 faea 	bl	8007f24 <free>
}
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000184 	.word	0x20000184

0800295c <report_dtc_snapshot_record_by_dtc_number>:



void report_dtc_snapshot_record_by_dtc_number(uint8_t* data, uint8_t data_length) {
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b0ab      	sub	sp, #172	@ 0xac
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur des donn�es re�ues (DTCMaskRecord + SnapshotRecordNumber = 4 octets attendus)
    if (data_length != 4) {
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d004      	beq.n	8002978 <report_dtc_snapshot_record_by_dtc_number+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_SNAPSHOT_RECORD_BY_DTC_NUMBER, NRC_INCORRECT_MESSAGE_LENGTH);
 800296e:	2113      	movs	r1, #19
 8002970:	2004      	movs	r0, #4
 8002972:	f7ff fe23 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002976:	e0a7      	b.n	8002ac8 <report_dtc_snapshot_record_by_dtc_number+0x16c>
    }

    // Extraire le num�ro de DTC depuis la requ�te du client (3 octets)
    uint32_t dtc_mask_record = (data[0] << 16) | (data[1] << 8) | data[2];
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3301      	adds	r3, #1
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	4313      	orrs	r3, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	3202      	adds	r2, #2
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    uint8_t snapshot_record_number = data[3];  // Num�ro d'enregistrement du snapshot
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    uint8_t found = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    DTC_Record dtc_record;  // Pas d'allocation dynamique pour DTC_Record

    // Parcourir la liste des DTCs pour trouver le DTC correspondant au masque demand�
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 80029a8:	e07a      	b.n	8002aa0 <report_dtc_snapshot_record_by_dtc_number+0x144>
        if (stored_dtc_list[i].dtcNumber == dtc_mask_record) {
 80029aa:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 80029ae:	4948      	ldr	r1, [pc, #288]	@ (8002ad0 <report_dtc_snapshot_record_by_dtc_number+0x174>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	440b      	add	r3, r1
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d168      	bne.n	8002a96 <report_dtc_snapshot_record_by_dtc_number+0x13a>
            // Si un enregistrement de snapshot est trouv�
            if ((stored_dtc_list[i].snapshotRecordNumber >= snapshot_record_number && snapshot_record_number != 0xFF) || snapshot_record_number == 0xFF) {
 80029c4:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 80029c8:	4941      	ldr	r1, [pc, #260]	@ (8002ad0 <report_dtc_snapshot_record_by_dtc_number+0x174>)
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	440b      	add	r3, r1
 80029d4:	3306      	adds	r3, #6
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80029dc:	429a      	cmp	r2, r3
 80029de:	d803      	bhi.n	80029e8 <report_dtc_snapshot_record_by_dtc_number+0x8c>
 80029e0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80029e4:	2bff      	cmp	r3, #255	@ 0xff
 80029e6:	d103      	bne.n	80029f0 <report_dtc_snapshot_record_by_dtc_number+0x94>
 80029e8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80029ec:	2bff      	cmp	r3, #255	@ 0xff
 80029ee:	d152      	bne.n	8002a96 <report_dtc_snapshot_record_by_dtc_number+0x13a>
                dtc_record.dtcNumber = stored_dtc_list[i].dtcNumber;
 80029f0:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 80029f4:	4936      	ldr	r1, [pc, #216]	@ (8002ad0 <report_dtc_snapshot_record_by_dtc_number+0x174>)
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	440b      	add	r3, r1
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]
                dtc_record.status = stored_dtc_list[i].status;
 8002a04:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002a08:	4931      	ldr	r1, [pc, #196]	@ (8002ad0 <report_dtc_snapshot_record_by_dtc_number+0x174>)
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	440b      	add	r3, r1
 8002a14:	3304      	adds	r3, #4
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	743b      	strb	r3, [r7, #16]
                dtc_record.snapshotRecordNumber = snapshot_record_number;
 8002a1a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002a1e:	74bb      	strb	r3, [r7, #18]

                // Remplir les donn�es de snapshot
                for (uint8_t j = 0; j < stored_dtc_list[i].snapshotDataLength; j++) {
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
 8002a26:	e018      	b.n	8002a5a <report_dtc_snapshot_record_by_dtc_number+0xfe>
                    dtc_record.snapshotData[j] = stored_dtc_list[i].snapshotData[j];  // Utiliser le tableau fixe
 8002a28:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002a2c:	f897 00a5 	ldrb.w	r0, [r7, #165]	@ 0xa5
 8002a30:	f897 10a5 	ldrb.w	r1, [r7, #165]	@ 0xa5
 8002a34:	4c26      	ldr	r4, [pc, #152]	@ (8002ad0 <report_dtc_snapshot_record_by_dtc_number+0x174>)
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	4423      	add	r3, r4
 8002a40:	4403      	add	r3, r0
 8002a42:	3307      	adds	r3, #7
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	f101 03a8 	add.w	r3, r1, #168	@ 0xa8
 8002a4a:	443b      	add	r3, r7
 8002a4c:	f803 2c95 	strb.w	r2, [r3, #-149]
                for (uint8_t j = 0; j < stored_dtc_list[i].snapshotDataLength; j++) {
 8002a50:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8002a54:	3301      	adds	r3, #1
 8002a56:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
 8002a5a:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002a5e:	491c      	ldr	r1, [pc, #112]	@ (8002ad0 <report_dtc_snapshot_record_by_dtc_number+0x174>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	440b      	add	r3, r1
 8002a6a:	3347      	adds	r3, #71	@ 0x47
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3d8      	bcc.n	8002a28 <report_dtc_snapshot_record_by_dtc_number+0xcc>
                }
                dtc_record.snapshotDataLength = stored_dtc_list[i].snapshotDataLength;
 8002a76:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002a7a:	4915      	ldr	r1, [pc, #84]	@ (8002ad0 <report_dtc_snapshot_record_by_dtc_number+0x174>)
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	440b      	add	r3, r1
 8002a86:	3347      	adds	r3, #71	@ 0x47
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                found = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                break;
 8002a94:	e008      	b.n	8002aa8 <report_dtc_snapshot_record_by_dtc_number+0x14c>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002a96:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002aa0:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002aa4:	2bff      	cmp	r3, #255	@ 0xff
 8002aa6:	d180      	bne.n	80029aa <report_dtc_snapshot_record_by_dtc_number+0x4e>
            }
        }
    }

    // Si aucun enregistrement n'est trouv�, renvoyer un NRC
    if (!found) {
 8002aa8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d104      	bne.n	8002aba <report_dtc_snapshot_record_by_dtc_number+0x15e>
        send_negative_response_read_dtc_information(REPORT_DTC_SNAPSHOT_RECORD_BY_DTC_NUMBER, NRC_REQUEST_OUT_OF_RANGE);
 8002ab0:	2131      	movs	r1, #49	@ 0x31
 8002ab2:	2004      	movs	r0, #4
 8002ab4:	f7ff fd82 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002ab8:	e006      	b.n	8002ac8 <report_dtc_snapshot_record_by_dtc_number+0x16c>
    }

    // Envoyer une r�ponse positive avec l'enregistrement DTC et le snapshot correspondant
    send_positive_response_read_dtc_information(REPORT_DTC_SNAPSHOT_RECORD_BY_DTC_NUMBER, &dtc_record, 1);
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2004      	movs	r0, #4
 8002ac4:	f7ff fcb8 	bl	8002438 <send_positive_response_read_dtc_information>
}
 8002ac8:	37ac      	adds	r7, #172	@ 0xac
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000184 	.word	0x20000184

08002ad4 <report_dtc_stored_data_by_record_number>:



void report_dtc_stored_data_by_record_number(uint8_t* data, uint8_t data_length) {
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b0a9      	sub	sp, #164	@ 0xa4
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur des donn�es re�ues
    if (data_length != 2) {
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d004      	beq.n	8002af0 <report_dtc_stored_data_by_record_number+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_STORED_DATA_BY_RECORD_NUMBER, NRC_INCORRECT_MESSAGE_LENGTH);
 8002ae6:	2113      	movs	r1, #19
 8002ae8:	2005      	movs	r0, #5
 8002aea:	f7ff fd67 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002aee:	e09a      	b.n	8002c26 <report_dtc_stored_data_by_record_number+0x152>
    }

    uint16_t dtc_stored_data_record_number = (data[0] << 8) | data[1];
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b21b      	sxth	r3, r3
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3301      	adds	r3, #1
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	4313      	orrs	r3, r2
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

    uint8_t found = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    DTC_Record dtc_record;  // Pas d'allocation dynamique ici

    // Parcourir la liste des DTCs pour trouver l'enregistrement correspondant au num�ro fourni
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8002b16:	e072      	b.n	8002bfe <report_dtc_stored_data_by_record_number+0x12a>
        if (stored_dtc_list[i].storedDataRecordNumber == dtc_stored_data_record_number || dtc_stored_data_record_number == 0xFF) {
 8002b18:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002b1c:	4943      	ldr	r1, [pc, #268]	@ (8002c2c <report_dtc_stored_data_by_record_number+0x158>)
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	440b      	add	r3, r1
 8002b28:	3348      	adds	r3, #72	@ 0x48
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d003      	beq.n	8002b3c <report_dtc_stored_data_by_record_number+0x68>
 8002b34:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8002b38:	2bff      	cmp	r3, #255	@ 0xff
 8002b3a:	d15b      	bne.n	8002bf4 <report_dtc_stored_data_by_record_number+0x120>
            dtc_record.dtcNumber = stored_dtc_list[i].dtcNumber;
 8002b3c:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002b40:	493a      	ldr	r1, [pc, #232]	@ (8002c2c <report_dtc_stored_data_by_record_number+0x158>)
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	440b      	add	r3, r1
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60bb      	str	r3, [r7, #8]
            dtc_record.status = stored_dtc_list[i].status;
 8002b50:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002b54:	4935      	ldr	r1, [pc, #212]	@ (8002c2c <report_dtc_stored_data_by_record_number+0x158>)
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	440b      	add	r3, r1
 8002b60:	3304      	adds	r3, #4
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	733b      	strb	r3, [r7, #12]
            dtc_record.storedDataRecordNumber = stored_dtc_list[i].storedDataRecordNumber;
 8002b66:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002b6a:	4930      	ldr	r1, [pc, #192]	@ (8002c2c <report_dtc_stored_data_by_record_number+0x158>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	440b      	add	r3, r1
 8002b76:	3348      	adds	r3, #72	@ 0x48
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

            // Copie les donn�es dans le tableau de taille fixe
            for (uint8_t j = 0; j < stored_dtc_list[i].storedDataLength; j++) {
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8002b84:	e018      	b.n	8002bb8 <report_dtc_stored_data_by_record_number+0xe4>
                dtc_record.snapshotData[j] = stored_dtc_list[i].storedData[j];
 8002b86:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002b8a:	f897 009d 	ldrb.w	r0, [r7, #157]	@ 0x9d
 8002b8e:	f897 109d 	ldrb.w	r1, [r7, #157]	@ 0x9d
 8002b92:	4c26      	ldr	r4, [pc, #152]	@ (8002c2c <report_dtc_stored_data_by_record_number+0x158>)
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4423      	add	r3, r4
 8002b9e:	4403      	add	r3, r0
 8002ba0:	334a      	adds	r3, #74	@ 0x4a
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	f101 03a0 	add.w	r3, r1, #160	@ 0xa0
 8002ba8:	443b      	add	r3, r7
 8002baa:	f803 2c91 	strb.w	r2, [r3, #-145]
            for (uint8_t j = 0; j < stored_dtc_list[i].storedDataLength; j++) {
 8002bae:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8002bb8:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002bbc:	491b      	ldr	r1, [pc, #108]	@ (8002c2c <report_dtc_stored_data_by_record_number+0x158>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	440b      	add	r3, r1
 8002bc8:	338a      	adds	r3, #138	@ 0x8a
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3d8      	bcc.n	8002b86 <report_dtc_stored_data_by_record_number+0xb2>
            }
            dtc_record.snapshotDataLength = stored_dtc_list[i].storedDataLength;
 8002bd4:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002bd8:	4914      	ldr	r1, [pc, #80]	@ (8002c2c <report_dtc_stored_data_by_record_number+0x158>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	440b      	add	r3, r1
 8002be4:	338a      	adds	r3, #138	@ 0x8a
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            found = 1;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            break;
 8002bf2:	e008      	b.n	8002c06 <report_dtc_stored_data_by_record_number+0x132>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002bf4:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8002bfe:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002c02:	2bff      	cmp	r3, #255	@ 0xff
 8002c04:	d188      	bne.n	8002b18 <report_dtc_stored_data_by_record_number+0x44>
        }
    }

    // Si aucun enregistrement n'est trouv�
    if (!found) {
 8002c06:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d104      	bne.n	8002c18 <report_dtc_stored_data_by_record_number+0x144>
        send_negative_response_read_dtc_information(REPORT_DTC_STORED_DATA_BY_RECORD_NUMBER, NRC_REQUEST_OUT_OF_RANGE);
 8002c0e:	2131      	movs	r1, #49	@ 0x31
 8002c10:	2005      	movs	r0, #5
 8002c12:	f7ff fcd3 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002c16:	e006      	b.n	8002c26 <report_dtc_stored_data_by_record_number+0x152>
    }

    // Envoyer une r�ponse positive avec les donn�es trouv�es
    send_positive_response_read_dtc_information(REPORT_DTC_STORED_DATA_BY_RECORD_NUMBER, &dtc_record, 1);
 8002c18:	f107 0308 	add.w	r3, r7, #8
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4619      	mov	r1, r3
 8002c20:	2005      	movs	r0, #5
 8002c22:	f7ff fc09 	bl	8002438 <send_positive_response_read_dtc_information>
}
 8002c26:	37a4      	adds	r7, #164	@ 0xa4
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	20000184 	.word	0x20000184

08002c30 <report_dtc_ext_data_record_by_dtc_number>:



void report_dtc_ext_data_record_by_dtc_number(uint8_t* data, uint8_t data_length) {
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b0ab      	sub	sp, #172	@ 0xac
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
    // V�rifier la longueur des donn�es re�ues (DTCMaskRecord + ExtDataRecordNumber = 4 octets attendus)
    if (data_length != 4) {
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d004      	beq.n	8002c4c <report_dtc_ext_data_record_by_dtc_number+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_EXT_DATA_RECORD_BY_DTC_NUMBER, NRC_INCORRECT_MESSAGE_LENGTH);
 8002c42:	2113      	movs	r1, #19
 8002c44:	2006      	movs	r0, #6
 8002c46:	f7ff fcb9 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002c4a:	e0af      	b.n	8002dac <report_dtc_ext_data_record_by_dtc_number+0x17c>
    }

    // Extraire le num�ro de DTC depuis la requ�te du client (3 octets)
    uint32_t dtc_mask_record = (data[0] << 16) | (data[1] << 8) | data[2];
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	041a      	lsls	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3301      	adds	r3, #1
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	3202      	adds	r2, #2
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    uint8_t ext_data_record_number = data[3];  // Num�ro d'enregistrement des donn�es �tendues
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	78db      	ldrb	r3, [r3, #3]
 8002c6c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    uint8_t found = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    DTC_Record dtc_record;

    // Parcourir la liste des DTCs pour trouver le DTC correspondant au masque et au num�ro de donn�es �tendues
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002c7c:	e081      	b.n	8002d82 <report_dtc_ext_data_record_by_dtc_number+0x152>
        if (stored_dtc_list[i].dtcNumber == dtc_mask_record) {
 8002c7e:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002c82:	494c      	ldr	r1, [pc, #304]	@ (8002db4 <report_dtc_ext_data_record_by_dtc_number+0x184>)
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	440b      	add	r3, r1
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d16f      	bne.n	8002d78 <report_dtc_ext_data_record_by_dtc_number+0x148>
            // Si un enregistrement de donn�es �tendues est trouv�
            if (stored_dtc_list[i].storedDataRecordNumber == ext_data_record_number || ext_data_record_number == 0xFF) {
 8002c98:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002c9c:	4945      	ldr	r1, [pc, #276]	@ (8002db4 <report_dtc_ext_data_record_by_dtc_number+0x184>)
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3348      	adds	r3, #72	@ 0x48
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d003      	beq.n	8002cbe <report_dtc_ext_data_record_by_dtc_number+0x8e>
 8002cb6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002cba:	2bff      	cmp	r3, #255	@ 0xff
 8002cbc:	d15c      	bne.n	8002d78 <report_dtc_ext_data_record_by_dtc_number+0x148>
                dtc_record.dtcNumber = stored_dtc_list[i].dtcNumber;
 8002cbe:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002cc2:	493c      	ldr	r1, [pc, #240]	@ (8002db4 <report_dtc_ext_data_record_by_dtc_number+0x184>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	440b      	add	r3, r1
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]
                dtc_record.status = stored_dtc_list[i].status;
 8002cd2:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002cd6:	4937      	ldr	r1, [pc, #220]	@ (8002db4 <report_dtc_ext_data_record_by_dtc_number+0x184>)
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	743b      	strb	r3, [r7, #16]
                dtc_record.storedDataRecordNumber = stored_dtc_list[i].storedDataRecordNumber;
 8002ce8:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002cec:	4931      	ldr	r1, [pc, #196]	@ (8002db4 <report_dtc_ext_data_record_by_dtc_number+0x184>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3348      	adds	r3, #72	@ 0x48
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

                // Copier les donn�es �tendues directement dans le tableau `snapshotData`
                dtc_record.snapshotDataLength = stored_dtc_list[i].storedDataLength;
 8002d00:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002d04:	492b      	ldr	r1, [pc, #172]	@ (8002db4 <report_dtc_ext_data_record_by_dtc_number+0x184>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	440b      	add	r3, r1
 8002d10:	338a      	adds	r3, #138	@ 0x8a
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                if (dtc_record.snapshotDataLength > MAX_DTC_EXT_DATA_RECORD_SIZE) {
 8002d18:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002d1c:	2b40      	cmp	r3, #64	@ 0x40
 8002d1e:	d904      	bls.n	8002d2a <report_dtc_ext_data_record_by_dtc_number+0xfa>
                    send_negative_response_read_dtc_information(REPORT_DTC_EXT_DATA_RECORD_BY_DTC_NUMBER, NRC_REQUEST_OUT_OF_RANGE);
 8002d20:	2131      	movs	r1, #49	@ 0x31
 8002d22:	2006      	movs	r0, #6
 8002d24:	f7ff fc4a 	bl	80025bc <send_negative_response_read_dtc_information>
                    return;
 8002d28:	e040      	b.n	8002dac <report_dtc_ext_data_record_by_dtc_number+0x17c>
                }
                for (uint8_t j = 0; j < dtc_record.snapshotDataLength; j++) {
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
 8002d30:	e018      	b.n	8002d64 <report_dtc_ext_data_record_by_dtc_number+0x134>
                    dtc_record.snapshotData[j] = stored_dtc_list[i].storedData[j];
 8002d32:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8002d36:	f897 00a5 	ldrb.w	r0, [r7, #165]	@ 0xa5
 8002d3a:	f897 10a5 	ldrb.w	r1, [r7, #165]	@ 0xa5
 8002d3e:	4c1d      	ldr	r4, [pc, #116]	@ (8002db4 <report_dtc_ext_data_record_by_dtc_number+0x184>)
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	4423      	add	r3, r4
 8002d4a:	4403      	add	r3, r0
 8002d4c:	334a      	adds	r3, #74	@ 0x4a
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	f101 03a8 	add.w	r3, r1, #168	@ 0xa8
 8002d54:	443b      	add	r3, r7
 8002d56:	f803 2c95 	strb.w	r2, [r3, #-149]
                for (uint8_t j = 0; j < dtc_record.snapshotDataLength; j++) {
 8002d5a:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
 8002d64:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002d68:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d3e0      	bcc.n	8002d32 <report_dtc_ext_data_record_by_dtc_number+0x102>
                }

                found = 1;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                break;
 8002d76:	e009      	b.n	8002d8c <report_dtc_ext_data_record_by_dtc_number+0x15c>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002d78:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002d82:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002d86:	2bff      	cmp	r3, #255	@ 0xff
 8002d88:	f47f af79 	bne.w	8002c7e <report_dtc_ext_data_record_by_dtc_number+0x4e>
            }
        }
    }

    // Si aucun enregistrement n'est trouv�, renvoyer un NRC
    if (!found) {
 8002d8c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <report_dtc_ext_data_record_by_dtc_number+0x16e>
        send_negative_response_read_dtc_information(REPORT_DTC_EXT_DATA_RECORD_BY_DTC_NUMBER, NRC_REQUEST_OUT_OF_RANGE);
 8002d94:	2131      	movs	r1, #49	@ 0x31
 8002d96:	2006      	movs	r0, #6
 8002d98:	f7ff fc10 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002d9c:	e006      	b.n	8002dac <report_dtc_ext_data_record_by_dtc_number+0x17c>
    }

    // Envoyer une r�ponse positive avec l'enregistrement DTC et les donn�es �tendues correspondantes
    send_positive_response_read_dtc_information(REPORT_DTC_EXT_DATA_RECORD_BY_DTC_NUMBER, &dtc_record, 1);
 8002d9e:	f107 030c 	add.w	r3, r7, #12
 8002da2:	2201      	movs	r2, #1
 8002da4:	4619      	mov	r1, r3
 8002da6:	2006      	movs	r0, #6
 8002da8:	f7ff fb46 	bl	8002438 <send_positive_response_read_dtc_information>
}
 8002dac:	37ac      	adds	r7, #172	@ 0xac
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000184 	.word	0x20000184

08002db8 <report_number_of_dtc_by_severity_mask>:



void report_number_of_dtc_by_severity_mask(uint8_t* data, uint8_t data_length) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
    // V�rifier que la longueur des donn�es est correcte (statut + gravit� = 2 octets attendus)
    if (data_length != 2) {
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d004      	beq.n	8002dd4 <report_number_of_dtc_by_severity_mask+0x1c>
        send_negative_response_read_dtc_information(REPORT_NUMBER_OF_DTC_BY_SEVERITY_MASK, NRC_INCORRECT_MESSAGE_LENGTH);
 8002dca:	2113      	movs	r1, #19
 8002dcc:	2007      	movs	r0, #7
 8002dce:	f7ff fbf5 	bl	80025bc <send_negative_response_read_dtc_information>
 8002dd2:	e042      	b.n	8002e5a <report_number_of_dtc_by_severity_mask+0xa2>
        return;
    }

    uint8_t dtc_status_mask = data[0];
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	733b      	strb	r3, [r7, #12]
    uint8_t dtc_severity_mask = data[1];
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	72fb      	strb	r3, [r7, #11]
    uint16_t dtc_count = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	81fb      	strh	r3, [r7, #14]

    // Parcourir tous les DTCs et compter ceux qui correspondent au masque de statut et de gravit�
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002de4:	2300      	movs	r3, #0
 8002de6:	737b      	strb	r3, [r7, #13]
 8002de8:	e021      	b.n	8002e2e <report_number_of_dtc_by_severity_mask+0x76>
        if (((stored_dtc_list[i].status & dtc_status_mask) != 0) &&
 8002dea:	7b7a      	ldrb	r2, [r7, #13]
 8002dec:	491c      	ldr	r1, [pc, #112]	@ (8002e60 <report_number_of_dtc_by_severity_mask+0xa8>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	440b      	add	r3, r1
 8002df8:	3304      	adds	r3, #4
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	7b3b      	ldrb	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <report_number_of_dtc_by_severity_mask+0x70>
            ((stored_dtc_list[i].severity & dtc_severity_mask) != 0)) {
 8002e06:	7b7a      	ldrb	r2, [r7, #13]
 8002e08:	4915      	ldr	r1, [pc, #84]	@ (8002e60 <report_number_of_dtc_by_severity_mask+0xa8>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	440b      	add	r3, r1
 8002e14:	3305      	adds	r3, #5
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	7afb      	ldrb	r3, [r7, #11]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	b2db      	uxtb	r3, r3
        if (((stored_dtc_list[i].status & dtc_status_mask) != 0) &&
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <report_number_of_dtc_by_severity_mask+0x70>
            dtc_count++;
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	3301      	adds	r3, #1
 8002e26:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002e28:	7b7b      	ldrb	r3, [r7, #13]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	737b      	strb	r3, [r7, #13]
 8002e2e:	7b7b      	ldrb	r3, [r7, #13]
 8002e30:	2bff      	cmp	r3, #255	@ 0xff
 8002e32:	d1da      	bne.n	8002dea <report_number_of_dtc_by_severity_mask+0x32>
        }
    }

    // Cr�er la r�ponse
    uint8_t response[3];
    response[0] = get_dtc_status_availability_mask();
 8002e34:	f000 ffd6 	bl	8003de4 <get_dtc_status_availability_mask>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	723b      	strb	r3, [r7, #8]
    response[1] = (dtc_count >> 8) & 0xFF;  // Octet de poids fort
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	727b      	strb	r3, [r7, #9]
    response[2] = dtc_count & 0xFF;         // Octet de poids faible
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	72bb      	strb	r3, [r7, #10]

    // Envoyer la r�ponse au client
    send_positive_response_read_dtc_information(REPORT_NUMBER_OF_DTC_BY_SEVERITY_MASK, (DTC_Record*)response, 0);
 8002e4c:	f107 0308 	add.w	r3, r7, #8
 8002e50:	2200      	movs	r2, #0
 8002e52:	4619      	mov	r1, r3
 8002e54:	2007      	movs	r0, #7
 8002e56:	f7ff faef 	bl	8002438 <send_positive_response_read_dtc_information>
}
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000184 	.word	0x20000184

08002e64 <report_dtc_by_severity_mask_record>:




void report_dtc_by_severity_mask_record(uint8_t* data, uint8_t data_length) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
    // V�rifier que la longueur des donn�es est correcte (statut + gravit� = 2 octets attendus)
    if (data_length != 2) {
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d004      	beq.n	8002e80 <report_dtc_by_severity_mask_record+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_BY_SEVERITY_MASK_RECORD, NRC_INCORRECT_MESSAGE_LENGTH);
 8002e76:	2113      	movs	r1, #19
 8002e78:	2008      	movs	r0, #8
 8002e7a:	f7ff fb9f 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002e7e:	e063      	b.n	8002f48 <report_dtc_by_severity_mask_record+0xe4>
    }

    uint8_t dtc_status_mask = data[0];
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	737b      	strb	r3, [r7, #13]
    uint8_t dtc_severity_mask = data[1];
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	785b      	ldrb	r3, [r3, #1]
 8002e8a:	733b      	strb	r3, [r7, #12]
    uint8_t found_dtc_count = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

    // Allouer dynamiquement de la m�moire pour les enregistrements DTC
    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 8002e90:	f648 7070 	movw	r0, #36720	@ 0x8f70
 8002e94:	f005 f83e 	bl	8007f14 <malloc>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60bb      	str	r3, [r7, #8]
    if (dtc_records == NULL) {
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <report_dtc_by_severity_mask_record+0x44>
        Error_handler();
 8002ea2:	f001 fd97 	bl	80049d4 <Error_handler>
        return;
 8002ea6:	e04f      	b.n	8002f48 <report_dtc_by_severity_mask_record+0xe4>
    }

    // Parcourir tous les DTCs et ajouter ceux qui correspondent au masque de statut et de gravit�
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73bb      	strb	r3, [r7, #14]
 8002eac:	e035      	b.n	8002f1a <report_dtc_by_severity_mask_record+0xb6>
        if (((stored_dtc_list[i].status & dtc_status_mask) != 0) &&
 8002eae:	7bba      	ldrb	r2, [r7, #14]
 8002eb0:	4927      	ldr	r1, [pc, #156]	@ (8002f50 <report_dtc_by_severity_mask_record+0xec>)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	440b      	add	r3, r1
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	7b7b      	ldrb	r3, [r7, #13]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d024      	beq.n	8002f14 <report_dtc_by_severity_mask_record+0xb0>
            ((stored_dtc_list[i].severity & dtc_severity_mask) != 0)) {
 8002eca:	7bba      	ldrb	r2, [r7, #14]
 8002ecc:	4920      	ldr	r1, [pc, #128]	@ (8002f50 <report_dtc_by_severity_mask_record+0xec>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3305      	adds	r3, #5
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	7b3b      	ldrb	r3, [r7, #12]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	b2db      	uxtb	r3, r3
        if (((stored_dtc_list[i].status & dtc_status_mask) != 0) &&
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <report_dtc_by_severity_mask_record+0xb0>
            dtc_records[found_dtc_count] = stored_dtc_list[i];
 8002ee6:	7bba      	ldrb	r2, [r7, #14]
 8002ee8:	7bf9      	ldrb	r1, [r7, #15]
 8002eea:	460b      	mov	r3, r1
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1858      	adds	r0, r3, r1
 8002ef8:	4915      	ldr	r1, [pc, #84]	@ (8002f50 <report_dtc_by_severity_mask_record+0xec>)
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	440b      	add	r3, r1
 8002f04:	4619      	mov	r1, r3
 8002f06:	2390      	movs	r3, #144	@ 0x90
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f005 f927 	bl	800815c <memcpy>
            found_dtc_count++;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	3301      	adds	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002f14:	7bbb      	ldrb	r3, [r7, #14]
 8002f16:	3301      	adds	r3, #1
 8002f18:	73bb      	strb	r3, [r7, #14]
 8002f1a:	7bbb      	ldrb	r3, [r7, #14]
 8002f1c:	2bff      	cmp	r3, #255	@ 0xff
 8002f1e:	d1c6      	bne.n	8002eae <report_dtc_by_severity_mask_record+0x4a>
        }
    }

    // Si aucun DTC n'a �t� trouv�, envoyer un NRC
    if (found_dtc_count == 0) {
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <report_dtc_by_severity_mask_record+0xd2>
        free(dtc_records);
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	f004 fffc 	bl	8007f24 <free>
        send_negative_response_read_dtc_information(REPORT_DTC_BY_SEVERITY_MASK_RECORD, NRC_CONDITIONS_NOT_CORRECT);
 8002f2c:	2122      	movs	r1, #34	@ 0x22
 8002f2e:	2008      	movs	r0, #8
 8002f30:	f7ff fb44 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002f34:	e008      	b.n	8002f48 <report_dtc_by_severity_mask_record+0xe4>
    }

    // Envoyer la r�ponse avec les enregistrements DTC correspondants
    send_positive_response_read_dtc_information(REPORT_DTC_BY_SEVERITY_MASK_RECORD, dtc_records, found_dtc_count);
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	2008      	movs	r0, #8
 8002f3e:	f7ff fa7b 	bl	8002438 <send_positive_response_read_dtc_information>

    // Lib�rer la m�moire allou�e
    free(dtc_records);
 8002f42:	68b8      	ldr	r0, [r7, #8]
 8002f44:	f004 ffee 	bl	8007f24 <free>
}
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000184 	.word	0x20000184

08002f54 <report_severity_information_of_dtc>:



void report_severity_information_of_dtc(uint8_t* data, uint8_t data_length) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b0a8      	sub	sp, #160	@ 0xa0
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
    // V�rifier que la longueur des donn�es est correcte (3 octets pour le num�ro de DTC)
    if (data_length != 3) {
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d004      	beq.n	8002f70 <report_severity_information_of_dtc+0x1c>
        send_negative_response_read_dtc_information(REPORT_SEVERITY_INFORMATION_OF_DTC, NRC_INCORRECT_MESSAGE_LENGTH);
 8002f66:	2113      	movs	r1, #19
 8002f68:	2009      	movs	r0, #9
 8002f6a:	f7ff fb27 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002f6e:	e04d      	b.n	800300c <report_severity_information_of_dtc+0xb8>
    }

    // Extraire le num�ro de DTC depuis la requ�te du client (3 octets)
    uint32_t dtc_mask_record = (data[0] << 16) | (data[1] << 8) | data[2];
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	041a      	lsls	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	3202      	adds	r2, #2
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    uint8_t found = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    DTC_Record dtc_record;

    // Parcourir tous les DTCs pour trouver celui qui correspond au DTCMaskRecord
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8002f98:	e024      	b.n	8002fe4 <report_severity_information_of_dtc+0x90>
        if (stored_dtc_list[i].dtcNumber == dtc_mask_record) {
 8002f9a:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002f9e:	491d      	ldr	r1, [pc, #116]	@ (8003014 <report_severity_information_of_dtc+0xc0>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	440b      	add	r3, r1
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d112      	bne.n	8002fda <report_severity_information_of_dtc+0x86>
            dtc_record = stored_dtc_list[i];
 8002fb4:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002fb8:	4916      	ldr	r1, [pc, #88]	@ (8003014 <report_severity_information_of_dtc+0xc0>)
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	18ca      	adds	r2, r1, r3
 8002fc4:	f107 0308 	add.w	r3, r7, #8
 8002fc8:	4611      	mov	r1, r2
 8002fca:	2290      	movs	r2, #144	@ 0x90
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f005 f8c5 	bl	800815c <memcpy>
            found = 1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            break;
 8002fd8:	e008      	b.n	8002fec <report_severity_information_of_dtc+0x98>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8002fda:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8002fe4:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002fe8:	2bff      	cmp	r3, #255	@ 0xff
 8002fea:	d1d6      	bne.n	8002f9a <report_severity_information_of_dtc+0x46>
        }
    }

    // Si aucun DTC correspondant n'est trouv�, envoyer un NRC
    if (!found) {
 8002fec:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <report_severity_information_of_dtc+0xaa>
        send_negative_response_read_dtc_information(REPORT_SEVERITY_INFORMATION_OF_DTC, NRC_REQUEST_OUT_OF_RANGE);
 8002ff4:	2131      	movs	r1, #49	@ 0x31
 8002ff6:	2009      	movs	r0, #9
 8002ff8:	f7ff fae0 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8002ffc:	e006      	b.n	800300c <report_severity_information_of_dtc+0xb8>
    }

    // Envoyer une r�ponse positive avec les informations de gravit� pour le DTC trouv�
    send_positive_response_read_dtc_information(REPORT_SEVERITY_INFORMATION_OF_DTC, &dtc_record, 1);
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	2201      	movs	r2, #1
 8003004:	4619      	mov	r1, r3
 8003006:	2009      	movs	r0, #9
 8003008:	f7ff fa16 	bl	8002438 <send_positive_response_read_dtc_information>
}
 800300c:	37a0      	adds	r7, #160	@ 0xa0
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000184 	.word	0x20000184

08003018 <report_supported_dtc>:



void report_supported_dtc(uint8_t* data, uint8_t data_length) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
    // Aucune donn�e suppl�mentaire n'est attendue
    if (data_length != 0) {
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <report_supported_dtc+0x1c>
        send_negative_response_read_dtc_information(REPORT_SUPPORTED_DTC, NRC_INCORRECT_MESSAGE_LENGTH);
 800302a:	2113      	movs	r1, #19
 800302c:	200a      	movs	r0, #10
 800302e:	f7ff fac5 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003032:	e04c      	b.n	80030ce <report_supported_dtc+0xb6>
    }

    uint8_t dtc_count = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

    // Allouer dynamiquement la m�moire pour stocker les DTCs
    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 8003038:	f648 7070 	movw	r0, #36720	@ 0x8f70
 800303c:	f004 ff6a 	bl	8007f14 <malloc>
 8003040:	4603      	mov	r3, r0
 8003042:	60bb      	str	r3, [r7, #8]
    if (dtc_records == NULL) {
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <report_supported_dtc+0x38>
        Error_handler();
 800304a:	f001 fcc3 	bl	80049d4 <Error_handler>
        return;
 800304e:	e03e      	b.n	80030ce <report_supported_dtc+0xb6>
    }

    // Parcourir les DTCs pour r�cup�rer tous ceux support�s
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003050:	2300      	movs	r3, #0
 8003052:	73bb      	strb	r3, [r7, #14]
 8003054:	e024      	b.n	80030a0 <report_supported_dtc+0x88>
        if (stored_dtc_list[i].status != 0) {
 8003056:	7bba      	ldrb	r2, [r7, #14]
 8003058:	491e      	ldr	r1, [pc, #120]	@ (80030d4 <report_supported_dtc+0xbc>)
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	440b      	add	r3, r1
 8003064:	3304      	adds	r3, #4
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d016      	beq.n	800309a <report_supported_dtc+0x82>
            dtc_records[dtc_count] = stored_dtc_list[i];
 800306c:	7bba      	ldrb	r2, [r7, #14]
 800306e:	7bf9      	ldrb	r1, [r7, #15]
 8003070:	460b      	mov	r3, r1
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	440b      	add	r3, r1
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	4619      	mov	r1, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1858      	adds	r0, r3, r1
 800307e:	4915      	ldr	r1, [pc, #84]	@ (80030d4 <report_supported_dtc+0xbc>)
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	440b      	add	r3, r1
 800308a:	4619      	mov	r1, r3
 800308c:	2390      	movs	r3, #144	@ 0x90
 800308e:	461a      	mov	r2, r3
 8003090:	f005 f864 	bl	800815c <memcpy>
            dtc_count++;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	3301      	adds	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 800309a:	7bbb      	ldrb	r3, [r7, #14]
 800309c:	3301      	adds	r3, #1
 800309e:	73bb      	strb	r3, [r7, #14]
 80030a0:	7bbb      	ldrb	r3, [r7, #14]
 80030a2:	2bff      	cmp	r3, #255	@ 0xff
 80030a4:	d1d7      	bne.n	8003056 <report_supported_dtc+0x3e>
        }
    }

    // Si aucun DTC n'a �t� trouv�, envoyer un NRC
    if (dtc_count == 0) {
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <report_supported_dtc+0xa4>
        free(dtc_records);
 80030ac:	68b8      	ldr	r0, [r7, #8]
 80030ae:	f004 ff39 	bl	8007f24 <free>
        send_negative_response_read_dtc_information(REPORT_SUPPORTED_DTC, NRC_CONDITIONS_NOT_CORRECT);
 80030b2:	2122      	movs	r1, #34	@ 0x22
 80030b4:	200a      	movs	r0, #10
 80030b6:	f7ff fa81 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 80030ba:	e008      	b.n	80030ce <report_supported_dtc+0xb6>
    }

    // Envoyer les DTCs support�s
    send_positive_response_read_dtc_information(REPORT_SUPPORTED_DTC, dtc_records, dtc_count);
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	461a      	mov	r2, r3
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	200a      	movs	r0, #10
 80030c4:	f7ff f9b8 	bl	8002438 <send_positive_response_read_dtc_information>

    // Lib�rer la m�moire
    free(dtc_records);
 80030c8:	68b8      	ldr	r0, [r7, #8]
 80030ca:	f004 ff2b 	bl	8007f24 <free>
}
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000184 	.word	0x20000184

080030d8 <report_first_test_failed_dtc>:


void report_first_test_failed_dtc(uint8_t* data, uint8_t data_length) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b0a8      	sub	sp, #160	@ 0xa0
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
    if (data_length != 0) {
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <report_first_test_failed_dtc+0x1c>
        send_negative_response_read_dtc_information(REPORT_FIRST_TEST_FAILED_DTC, NRC_INCORRECT_MESSAGE_LENGTH);
 80030ea:	2113      	movs	r1, #19
 80030ec:	200b      	movs	r0, #11
 80030ee:	f7ff fa65 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 80030f2:	e040      	b.n	8003176 <report_first_test_failed_dtc+0x9e>
    }

    uint8_t found = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    DTC_Record dtc_record;

    // Parcourir les DTCs pour trouver le premier qui a �chou� un test
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8003100:	e025      	b.n	800314e <report_first_test_failed_dtc+0x76>
        if (stored_dtc_list[i].status & DTC_TEST_FAILED) {
 8003102:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8003106:	491d      	ldr	r1, [pc, #116]	@ (800317c <report_first_test_failed_dtc+0xa4>)
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	440b      	add	r3, r1
 8003112:	3304      	adds	r3, #4
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <report_first_test_failed_dtc+0x6c>
            dtc_record = stored_dtc_list[i];
 800311e:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8003122:	4916      	ldr	r1, [pc, #88]	@ (800317c <report_first_test_failed_dtc+0xa4>)
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	18ca      	adds	r2, r1, r3
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4611      	mov	r1, r2
 8003134:	2290      	movs	r2, #144	@ 0x90
 8003136:	4618      	mov	r0, r3
 8003138:	f005 f810 	bl	800815c <memcpy>
            found = 1;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            break;
 8003142:	e008      	b.n	8003156 <report_first_test_failed_dtc+0x7e>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003144:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8003148:	3301      	adds	r3, #1
 800314a:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800314e:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8003152:	2bff      	cmp	r3, #255	@ 0xff
 8003154:	d1d5      	bne.n	8003102 <report_first_test_failed_dtc+0x2a>
        }
    }

    // Si aucun DTC n'a �t� trouv�, envoyer un NRC
    if (!found) {
 8003156:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800315a:	2b00      	cmp	r3, #0
 800315c:	d104      	bne.n	8003168 <report_first_test_failed_dtc+0x90>
        send_negative_response_read_dtc_information(REPORT_FIRST_TEST_FAILED_DTC, NRC_CONDITIONS_NOT_CORRECT);
 800315e:	2122      	movs	r1, #34	@ 0x22
 8003160:	200b      	movs	r0, #11
 8003162:	f7ff fa2b 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003166:	e006      	b.n	8003176 <report_first_test_failed_dtc+0x9e>
    }

    // Envoyer la r�ponse avec le premier DTC ayant �chou�
    send_positive_response_read_dtc_information(REPORT_FIRST_TEST_FAILED_DTC, &dtc_record, 1);
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	2201      	movs	r2, #1
 800316e:	4619      	mov	r1, r3
 8003170:	200b      	movs	r0, #11
 8003172:	f7ff f961 	bl	8002438 <send_positive_response_read_dtc_information>
}
 8003176:	37a0      	adds	r7, #160	@ 0xa0
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000184 	.word	0x20000184

08003180 <report_first_confirmed_dtc>:



void report_first_confirmed_dtc(uint8_t* data, uint8_t data_length) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b0a8      	sub	sp, #160	@ 0xa0
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	70fb      	strb	r3, [r7, #3]
    if (data_length != 0) {
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <report_first_confirmed_dtc+0x1c>
        send_negative_response_read_dtc_information(REPORT_FIRST_CONFIRMED_DTC, NRC_INCORRECT_MESSAGE_LENGTH);
 8003192:	2113      	movs	r1, #19
 8003194:	200c      	movs	r0, #12
 8003196:	f7ff fa11 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800319a:	e040      	b.n	800321e <report_first_confirmed_dtc+0x9e>
    }

    uint8_t found = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    DTC_Record dtc_record;

    // Parcourir les DTCs pour trouver le premier confirm�
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 80031a8:	e025      	b.n	80031f6 <report_first_confirmed_dtc+0x76>
        if (stored_dtc_list[i].status & DTC_CONFIRMED) {
 80031aa:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 80031ae:	491d      	ldr	r1, [pc, #116]	@ (8003224 <report_first_confirmed_dtc+0xa4>)
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	440b      	add	r3, r1
 80031ba:	3304      	adds	r3, #4
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <report_first_confirmed_dtc+0x6c>
            dtc_record = stored_dtc_list[i];
 80031c6:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 80031ca:	4916      	ldr	r1, [pc, #88]	@ (8003224 <report_first_confirmed_dtc+0xa4>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	18ca      	adds	r2, r1, r3
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	4611      	mov	r1, r2
 80031dc:	2290      	movs	r2, #144	@ 0x90
 80031de:	4618      	mov	r0, r3
 80031e0:	f004 ffbc 	bl	800815c <memcpy>
            found = 1;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            break;
 80031ea:	e008      	b.n	80031fe <report_first_confirmed_dtc+0x7e>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80031ec:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80031f0:	3301      	adds	r3, #1
 80031f2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 80031f6:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80031fa:	2bff      	cmp	r3, #255	@ 0xff
 80031fc:	d1d5      	bne.n	80031aa <report_first_confirmed_dtc+0x2a>
        }
    }

    // Si aucun DTC confirm� n'est trouv�, envoyer un NRC
    if (!found) {
 80031fe:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <report_first_confirmed_dtc+0x90>
        send_negative_response_read_dtc_information(REPORT_FIRST_CONFIRMED_DTC, NRC_CONDITIONS_NOT_CORRECT);
 8003206:	2122      	movs	r1, #34	@ 0x22
 8003208:	200c      	movs	r0, #12
 800320a:	f7ff f9d7 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800320e:	e006      	b.n	800321e <report_first_confirmed_dtc+0x9e>
    }

    // Envoyer la r�ponse avec le premier DTC confirm�
    send_positive_response_read_dtc_information(REPORT_FIRST_CONFIRMED_DTC, &dtc_record, 1);
 8003210:	f107 030c 	add.w	r3, r7, #12
 8003214:	2201      	movs	r2, #1
 8003216:	4619      	mov	r1, r3
 8003218:	200c      	movs	r0, #12
 800321a:	f7ff f90d 	bl	8002438 <send_positive_response_read_dtc_information>
}
 800321e:	37a0      	adds	r7, #160	@ 0xa0
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000184 	.word	0x20000184

08003228 <report_most_recent_test_failed_dtc>:



void report_most_recent_test_failed_dtc(uint8_t* data, uint8_t data_length) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
    if (data_length != 0) {
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <report_most_recent_test_failed_dtc+0x1c>
        send_negative_response_read_dtc_information(REPORT_MOST_RECENT_TEST_FAILED_DTC, NRC_INCORRECT_MESSAGE_LENGTH);
 800323a:	2113      	movs	r1, #19
 800323c:	200d      	movs	r0, #13
 800323e:	f7ff f9bd 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003242:	e04b      	b.n	80032dc <report_most_recent_test_failed_dtc+0xb4>
    }

    uint8_t found = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
    DTC_Record* dtc_record = (DTC_Record*)malloc(sizeof(DTC_Record));
 8003248:	2090      	movs	r0, #144	@ 0x90
 800324a:	f004 fe63 	bl	8007f14 <malloc>
 800324e:	4603      	mov	r3, r0
 8003250:	60bb      	str	r3, [r7, #8]
    if (dtc_record == NULL) {
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <report_most_recent_test_failed_dtc+0x36>
        Error_handler();
 8003258:	f001 fbbc 	bl	80049d4 <Error_handler>
        return;
 800325c:	e03e      	b.n	80032dc <report_most_recent_test_failed_dtc+0xb4>
    }

    // Parcourir les DTCs pour trouver le plus r�cent ayant �chou�
    for (int8_t i = MAX_DTC_COUNT - 1; i >= 0; i--) {
 800325e:	23fe      	movs	r3, #254	@ 0xfe
 8003260:	73bb      	strb	r3, [r7, #14]
 8003262:	e024      	b.n	80032ae <report_most_recent_test_failed_dtc+0x86>
        if (stored_dtc_list[i].status & DTC_TEST_FAILED) {
 8003264:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003268:	491e      	ldr	r1, [pc, #120]	@ (80032e4 <report_most_recent_test_failed_dtc+0xbc>)
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	440b      	add	r3, r1
 8003274:	3304      	adds	r3, #4
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <report_most_recent_test_failed_dtc+0x7a>
            *dtc_record = stored_dtc_list[i];
 8003280:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003284:	68b8      	ldr	r0, [r7, #8]
 8003286:	4917      	ldr	r1, [pc, #92]	@ (80032e4 <report_most_recent_test_failed_dtc+0xbc>)
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	440b      	add	r3, r1
 8003292:	4619      	mov	r1, r3
 8003294:	2390      	movs	r3, #144	@ 0x90
 8003296:	461a      	mov	r2, r3
 8003298:	f004 ff60 	bl	800815c <memcpy>
            found = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
            break;
 80032a0:	e009      	b.n	80032b6 <report_most_recent_test_failed_dtc+0x8e>
    for (int8_t i = MAX_DTC_COUNT - 1; i >= 0; i--) {
 80032a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	73bb      	strb	r3, [r7, #14]
 80032ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	dad6      	bge.n	8003264 <report_most_recent_test_failed_dtc+0x3c>
        }
    }

    // Si aucun DTC �chou� n'est trouv�, envoyer un NRC
    if (!found) {
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <report_most_recent_test_failed_dtc+0xa4>
        free(dtc_record);
 80032bc:	68b8      	ldr	r0, [r7, #8]
 80032be:	f004 fe31 	bl	8007f24 <free>
        send_negative_response_read_dtc_information(REPORT_MOST_RECENT_TEST_FAILED_DTC, NRC_CONDITIONS_NOT_CORRECT);
 80032c2:	2122      	movs	r1, #34	@ 0x22
 80032c4:	200d      	movs	r0, #13
 80032c6:	f7ff f979 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 80032ca:	e007      	b.n	80032dc <report_most_recent_test_failed_dtc+0xb4>
    }

    // Envoyer la r�ponse avec le DTC le plus r�cent ayant �chou�
    send_positive_response_read_dtc_information(REPORT_MOST_RECENT_TEST_FAILED_DTC, dtc_record, 1);
 80032cc:	2201      	movs	r2, #1
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	200d      	movs	r0, #13
 80032d2:	f7ff f8b1 	bl	8002438 <send_positive_response_read_dtc_information>
    free(dtc_record);
 80032d6:	68b8      	ldr	r0, [r7, #8]
 80032d8:	f004 fe24 	bl	8007f24 <free>
}
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000184 	.word	0x20000184

080032e8 <report_most_recent_confirmed_dtc>:



void report_most_recent_confirmed_dtc(uint8_t* data, uint8_t data_length) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	70fb      	strb	r3, [r7, #3]
    if (data_length != 0) {
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <report_most_recent_confirmed_dtc+0x1c>
        send_negative_response_read_dtc_information(REPORT_MOST_RECENT_CONFIRMED_DTC, NRC_INCORRECT_MESSAGE_LENGTH);
 80032fa:	2113      	movs	r1, #19
 80032fc:	200e      	movs	r0, #14
 80032fe:	f7ff f95d 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003302:	e04b      	b.n	800339c <report_most_recent_confirmed_dtc+0xb4>
    }

    uint8_t found = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
    DTC_Record* dtc_record = (DTC_Record*)malloc(sizeof(DTC_Record));
 8003308:	2090      	movs	r0, #144	@ 0x90
 800330a:	f004 fe03 	bl	8007f14 <malloc>
 800330e:	4603      	mov	r3, r0
 8003310:	60bb      	str	r3, [r7, #8]
    if (dtc_record == NULL) {
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <report_most_recent_confirmed_dtc+0x36>
        Error_handler();
 8003318:	f001 fb5c 	bl	80049d4 <Error_handler>
        return;
 800331c:	e03e      	b.n	800339c <report_most_recent_confirmed_dtc+0xb4>
    }

    // Parcourir les DTCs pour trouver le plus r�cent confirm�
    for (int8_t i = MAX_DTC_COUNT - 1; i >= 0; i--) {
 800331e:	23fe      	movs	r3, #254	@ 0xfe
 8003320:	73bb      	strb	r3, [r7, #14]
 8003322:	e024      	b.n	800336e <report_most_recent_confirmed_dtc+0x86>
        if (stored_dtc_list[i].status & DTC_CONFIRMED) {
 8003324:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003328:	491e      	ldr	r1, [pc, #120]	@ (80033a4 <report_most_recent_confirmed_dtc+0xbc>)
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	440b      	add	r3, r1
 8003334:	3304      	adds	r3, #4
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <report_most_recent_confirmed_dtc+0x7a>
            *dtc_record = stored_dtc_list[i];
 8003340:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003344:	68b8      	ldr	r0, [r7, #8]
 8003346:	4917      	ldr	r1, [pc, #92]	@ (80033a4 <report_most_recent_confirmed_dtc+0xbc>)
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	440b      	add	r3, r1
 8003352:	4619      	mov	r1, r3
 8003354:	2390      	movs	r3, #144	@ 0x90
 8003356:	461a      	mov	r2, r3
 8003358:	f004 ff00 	bl	800815c <memcpy>
            found = 1;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
            break;
 8003360:	e009      	b.n	8003376 <report_most_recent_confirmed_dtc+0x8e>
    for (int8_t i = MAX_DTC_COUNT - 1; i >= 0; i--) {
 8003362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	73bb      	strb	r3, [r7, #14]
 800336e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003372:	2b00      	cmp	r3, #0
 8003374:	dad6      	bge.n	8003324 <report_most_recent_confirmed_dtc+0x3c>
        }
    }

    // Si aucun DTC confirm� n'est trouv�, envoyer un NRC
    if (!found) {
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <report_most_recent_confirmed_dtc+0xa4>
        free(dtc_record);
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f004 fdd1 	bl	8007f24 <free>
        send_negative_response_read_dtc_information(REPORT_MOST_RECENT_CONFIRMED_DTC, NRC_CONDITIONS_NOT_CORRECT);
 8003382:	2122      	movs	r1, #34	@ 0x22
 8003384:	200e      	movs	r0, #14
 8003386:	f7ff f919 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800338a:	e007      	b.n	800339c <report_most_recent_confirmed_dtc+0xb4>
    }

    // Envoyer la r�ponse avec le DTC le plus r�cent confirm�
    send_positive_response_read_dtc_information(REPORT_MOST_RECENT_CONFIRMED_DTC, dtc_record, 1);
 800338c:	2201      	movs	r2, #1
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	200e      	movs	r0, #14
 8003392:	f7ff f851 	bl	8002438 <send_positive_response_read_dtc_information>
    free(dtc_record);
 8003396:	68b8      	ldr	r0, [r7, #8]
 8003398:	f004 fdc4 	bl	8007f24 <free>
}
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000184 	.word	0x20000184

080033a8 <report_mirror_memory_dtc_by_status_mask>:




void report_mirror_memory_dtc_by_status_mask(uint8_t* data, uint8_t data_length) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
    if (data_length != 1) { // V�rifier si le masque de statut est fourni
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d004      	beq.n	80033c4 <report_mirror_memory_dtc_by_status_mask+0x1c>
        send_negative_response_read_dtc_information(REPORT_MIRROR_MEMORY_DTC_BY_STATUS_MASK, NRC_INCORRECT_MESSAGE_LENGTH);
 80033ba:	2113      	movs	r1, #19
 80033bc:	200f      	movs	r0, #15
 80033be:	f7ff f8fd 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 80033c2:	e052      	b.n	800346a <report_mirror_memory_dtc_by_status_mask+0xc2>
    }

    uint8_t status_mask = data[0]; // Masque de statut envoy� par le client
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	737b      	strb	r3, [r7, #13]
    uint8_t dtc_count = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]

    // Allouer dynamiquement de la m�moire pour les DTCs
    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 80033ce:	f648 7070 	movw	r0, #36720	@ 0x8f70
 80033d2:	f004 fd9f 	bl	8007f14 <malloc>
 80033d6:	4603      	mov	r3, r0
 80033d8:	60bb      	str	r3, [r7, #8]
    if (dtc_records == NULL) {
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <report_mirror_memory_dtc_by_status_mask+0x3e>
        Error_handler();
 80033e0:	f001 faf8 	bl	80049d4 <Error_handler>
        return;
 80033e4:	e041      	b.n	800346a <report_mirror_memory_dtc_by_status_mask+0xc2>
    }

    // Parcourir les DTCs de la m�moire miroir et filtrer par le masque
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80033e6:	2300      	movs	r3, #0
 80033e8:	73bb      	strb	r3, [r7, #14]
 80033ea:	e027      	b.n	800343c <report_mirror_memory_dtc_by_status_mask+0x94>
        if ((mirror_dtc_list[i].status & status_mask) != 0) {
 80033ec:	7bba      	ldrb	r2, [r7, #14]
 80033ee:	4920      	ldr	r1, [pc, #128]	@ (8003470 <report_mirror_memory_dtc_by_status_mask+0xc8>)
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	440b      	add	r3, r1
 80033fa:	3304      	adds	r3, #4
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	7b7b      	ldrb	r3, [r7, #13]
 8003400:	4013      	ands	r3, r2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d016      	beq.n	8003436 <report_mirror_memory_dtc_by_status_mask+0x8e>
            dtc_records[dtc_count] = mirror_dtc_list[i];
 8003408:	7bba      	ldrb	r2, [r7, #14]
 800340a:	7bf9      	ldrb	r1, [r7, #15]
 800340c:	460b      	mov	r3, r1
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	440b      	add	r3, r1
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1858      	adds	r0, r3, r1
 800341a:	4915      	ldr	r1, [pc, #84]	@ (8003470 <report_mirror_memory_dtc_by_status_mask+0xc8>)
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	440b      	add	r3, r1
 8003426:	4619      	mov	r1, r3
 8003428:	2390      	movs	r3, #144	@ 0x90
 800342a:	461a      	mov	r2, r3
 800342c:	f004 fe96 	bl	800815c <memcpy>
            dtc_count++;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	3301      	adds	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003436:	7bbb      	ldrb	r3, [r7, #14]
 8003438:	3301      	adds	r3, #1
 800343a:	73bb      	strb	r3, [r7, #14]
 800343c:	7bbb      	ldrb	r3, [r7, #14]
 800343e:	2bff      	cmp	r3, #255	@ 0xff
 8003440:	d1d4      	bne.n	80033ec <report_mirror_memory_dtc_by_status_mask+0x44>
        }
    }

    if (dtc_count == 0) {
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <report_mirror_memory_dtc_by_status_mask+0xb0>
        free(dtc_records);
 8003448:	68b8      	ldr	r0, [r7, #8]
 800344a:	f004 fd6b 	bl	8007f24 <free>
        send_negative_response_read_dtc_information(REPORT_MIRROR_MEMORY_DTC_BY_STATUS_MASK, NRC_CONDITIONS_NOT_CORRECT);
 800344e:	2122      	movs	r1, #34	@ 0x22
 8003450:	200f      	movs	r0, #15
 8003452:	f7ff f8b3 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003456:	e008      	b.n	800346a <report_mirror_memory_dtc_by_status_mask+0xc2>
    }

    // Envoyer la r�ponse avec les DTCs de la m�moire miroir
    send_positive_response_read_dtc_information(REPORT_MIRROR_MEMORY_DTC_BY_STATUS_MASK, dtc_records, dtc_count);
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	461a      	mov	r2, r3
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	200f      	movs	r0, #15
 8003460:	f7fe ffea 	bl	8002438 <send_positive_response_read_dtc_information>
    free(dtc_records);
 8003464:	68b8      	ldr	r0, [r7, #8]
 8003466:	f004 fd5d 	bl	8007f24 <free>
}
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200090f4 	.word	0x200090f4

08003474 <report_mirror_memory_dtc_ext_data_record>:



void report_mirror_memory_dtc_ext_data_record(uint8_t* data, uint8_t data_length) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
    if (data_length != 4) {
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	2b04      	cmp	r3, #4
 8003484:	d004      	beq.n	8003490 <report_mirror_memory_dtc_ext_data_record+0x1c>
        send_negative_response_read_dtc_information(REPORT_MIRROR_MEMORY_DTC_EXT_DATA_RECORD, NRC_INCORRECT_MESSAGE_LENGTH);
 8003486:	2113      	movs	r1, #19
 8003488:	2010      	movs	r0, #16
 800348a:	f7ff f897 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800348e:	e04c      	b.n	800352a <report_mirror_memory_dtc_ext_data_record+0xb6>
    }

    // Extraire le num�ro de DTC et d'enregistrement des donn�es �tendues
    uint32_t dtc_mask_record = (data[0] << 16) | (data[1] << 8) | data[2];
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	041a      	lsls	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3301      	adds	r3, #1
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	4313      	orrs	r3, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	3202      	adds	r2, #2
 80034a4:	7812      	ldrb	r2, [r2, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
    uint8_t ext_data_record_number = data[3];
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	78db      	ldrb	r3, [r3, #3]
 80034ae:	73fb      	strb	r3, [r7, #15]

    uint8_t found = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	77fb      	strb	r3, [r7, #31]
    DTC_Record* dtc_record = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]

    // Parcourir les DTCs dans la m�moire miroir
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
 80034bc:	e025      	b.n	800350a <report_mirror_memory_dtc_ext_data_record+0x96>
        if (mirror_dtc_list[i].dtcNumber == dtc_mask_record && mirror_dtc_list[i].storedDataRecordNumber == ext_data_record_number) {
 80034be:	7dfa      	ldrb	r2, [r7, #23]
 80034c0:	491b      	ldr	r1, [pc, #108]	@ (8003530 <report_mirror_memory_dtc_ext_data_record+0xbc>)
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	440b      	add	r3, r1
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d117      	bne.n	8003504 <report_mirror_memory_dtc_ext_data_record+0x90>
 80034d4:	7dfa      	ldrb	r2, [r7, #23]
 80034d6:	4916      	ldr	r1, [pc, #88]	@ (8003530 <report_mirror_memory_dtc_ext_data_record+0xbc>)
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	440b      	add	r3, r1
 80034e2:	3348      	adds	r3, #72	@ 0x48
 80034e4:	881a      	ldrh	r2, [r3, #0]
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d10a      	bne.n	8003504 <report_mirror_memory_dtc_ext_data_record+0x90>
            dtc_record = &mirror_dtc_list[i];
 80034ee:	7dfa      	ldrb	r2, [r7, #23]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <report_mirror_memory_dtc_ext_data_record+0xbc>)
 80034fa:	4413      	add	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
            found = 1;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]
            break;
 8003502:	e005      	b.n	8003510 <report_mirror_memory_dtc_ext_data_record+0x9c>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	3301      	adds	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	2bff      	cmp	r3, #255	@ 0xff
 800350e:	d1d6      	bne.n	80034be <report_mirror_memory_dtc_ext_data_record+0x4a>
        }
    }

    // Si aucun DTC n'est trouv�
    if (!found) {
 8003510:	7ffb      	ldrb	r3, [r7, #31]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <report_mirror_memory_dtc_ext_data_record+0xac>
        send_negative_response_read_dtc_information(REPORT_MIRROR_MEMORY_DTC_EXT_DATA_RECORD, NRC_REQUEST_OUT_OF_RANGE);
 8003516:	2131      	movs	r1, #49	@ 0x31
 8003518:	2010      	movs	r0, #16
 800351a:	f7ff f84f 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800351e:	e004      	b.n	800352a <report_mirror_memory_dtc_ext_data_record+0xb6>
    }

    // Envoyer une r�ponse positive avec l'enregistrement DTC et les donn�es �tendues
    send_positive_response_read_dtc_information(REPORT_MIRROR_MEMORY_DTC_EXT_DATA_RECORD, dtc_record, 1);
 8003520:	2201      	movs	r2, #1
 8003522:	69b9      	ldr	r1, [r7, #24]
 8003524:	2010      	movs	r0, #16
 8003526:	f7fe ff87 	bl	8002438 <send_positive_response_read_dtc_information>
}
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	200090f4 	.word	0x200090f4

08003534 <report_number_of_mirror_memory_dtc_by_status_mask>:




void report_number_of_mirror_memory_dtc_by_status_mask(uint8_t* data, uint8_t data_length) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
    if (data_length != 1) {
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d004      	beq.n	8003550 <report_number_of_mirror_memory_dtc_by_status_mask+0x1c>
        send_negative_response_read_dtc_information(REPORT_NUMBER_OF_MIRROR_MEMORY_DTC_BY_STATUS_MASK, NRC_INCORRECT_MESSAGE_LENGTH);
 8003546:	2113      	movs	r1, #19
 8003548:	2011      	movs	r0, #17
 800354a:	f7ff f837 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800354e:	e03c      	b.n	80035ca <report_number_of_mirror_memory_dtc_by_status_mask+0x96>
    }

    uint8_t status_mask = data[0];
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	733b      	strb	r3, [r7, #12]
    uint16_t dtc_count = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	81fb      	strh	r3, [r7, #14]

    // Parcourir les DTCs pour compter ceux correspondant au masque de statut
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 800355a:	2300      	movs	r3, #0
 800355c:	737b      	strb	r3, [r7, #13]
 800355e:	e013      	b.n	8003588 <report_number_of_mirror_memory_dtc_by_status_mask+0x54>
        if ((mirror_dtc_list[i].status & status_mask) != 0) {
 8003560:	7b7a      	ldrb	r2, [r7, #13]
 8003562:	491b      	ldr	r1, [pc, #108]	@ (80035d0 <report_number_of_mirror_memory_dtc_by_status_mask+0x9c>)
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	440b      	add	r3, r1
 800356e:	3304      	adds	r3, #4
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	7b3b      	ldrb	r3, [r7, #12]
 8003574:	4013      	ands	r3, r2
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <report_number_of_mirror_memory_dtc_by_status_mask+0x4e>
            dtc_count++;
 800357c:	89fb      	ldrh	r3, [r7, #14]
 800357e:	3301      	adds	r3, #1
 8003580:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003582:	7b7b      	ldrb	r3, [r7, #13]
 8003584:	3301      	adds	r3, #1
 8003586:	737b      	strb	r3, [r7, #13]
 8003588:	7b7b      	ldrb	r3, [r7, #13]
 800358a:	2bff      	cmp	r3, #255	@ 0xff
 800358c:	d1e8      	bne.n	8003560 <report_number_of_mirror_memory_dtc_by_status_mask+0x2c>
        }
    }

    if (dtc_count == 0) {
 800358e:	89fb      	ldrh	r3, [r7, #14]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <report_number_of_mirror_memory_dtc_by_status_mask+0x6a>
        send_negative_response_read_dtc_information(REPORT_NUMBER_OF_MIRROR_MEMORY_DTC_BY_STATUS_MASK, NRC_CONDITIONS_NOT_CORRECT);
 8003594:	2122      	movs	r1, #34	@ 0x22
 8003596:	2011      	movs	r0, #17
 8003598:	f7ff f810 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800359c:	e015      	b.n	80035ca <report_number_of_mirror_memory_dtc_by_status_mask+0x96>
    }

    // Pr�parer la r�ponse
    uint8_t response[4];
    response[0] = get_dtc_status_availability_mask();
 800359e:	f000 fc21 	bl	8003de4 <get_dtc_status_availability_mask>
 80035a2:	4603      	mov	r3, r0
 80035a4:	723b      	strb	r3, [r7, #8]
    response[1] = get_dtc_format_identifier();
 80035a6:	f000 fc25 	bl	8003df4 <get_dtc_format_identifier>
 80035aa:	4603      	mov	r3, r0
 80035ac:	727b      	strb	r3, [r7, #9]
    response[2] = (dtc_count >> 8) & 0xFF;
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	72bb      	strb	r3, [r7, #10]
    response[3] = dtc_count & 0xFF;
 80035b8:	89fb      	ldrh	r3, [r7, #14]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	72fb      	strb	r3, [r7, #11]

    send_can_message(response, 4);
 80035be:	f107 0308 	add.w	r3, r7, #8
 80035c2:	2104      	movs	r1, #4
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fb93 	bl	8000cf0 <send_can_message>
    // send_uart_message(response, 4);
}
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200090f4 	.word	0x200090f4

080035d4 <report_number_of_emissions_obd_dtc_by_status_mask>:



void report_number_of_emissions_obd_dtc_by_status_mask(uint8_t* data, uint8_t data_length) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b0a8      	sub	sp, #160	@ 0xa0
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
    if (data_length != 1) {  // Le masque de statut doit �tre d'une longueur de 1 octet
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d004      	beq.n	80035f0 <report_number_of_emissions_obd_dtc_by_status_mask+0x1c>
        send_negative_response_read_dtc_information(REPORT_NUMBER_OF_EMISSIONS_OBD_DTC_BY_STATUS_MASK, NRC_INCORRECT_MESSAGE_LENGTH);
 80035e6:	2113      	movs	r1, #19
 80035e8:	2012      	movs	r0, #18
 80035ea:	f7fe ffe7 	bl	80025bc <send_negative_response_read_dtc_information>
 80035ee:	e056      	b.n	800369e <report_number_of_emissions_obd_dtc_by_status_mask+0xca>
        return;
    }

    uint8_t status_mask = data[0];
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
    uint16_t dtc_count = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e

    // Parcours de la liste des DTCs
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8003604:	e025      	b.n	8003652 <report_number_of_emissions_obd_dtc_by_status_mask+0x7e>
        if (stored_dtc_list[i].isEmissionRelated && (stored_dtc_list[i].status & status_mask) != 0) {
 8003606:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 800360a:	4926      	ldr	r1, [pc, #152]	@ (80036a4 <report_number_of_emissions_obd_dtc_by_status_mask+0xd0>)
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	440b      	add	r3, r1
 8003616:	338b      	adds	r3, #139	@ 0x8b
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d014      	beq.n	8003648 <report_number_of_emissions_obd_dtc_by_status_mask+0x74>
 800361e:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8003622:	4920      	ldr	r1, [pc, #128]	@ (80036a4 <report_number_of_emissions_obd_dtc_by_status_mask+0xd0>)
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	440b      	add	r3, r1
 800362e:	3304      	adds	r3, #4
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8003636:	4013      	ands	r3, r2
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <report_number_of_emissions_obd_dtc_by_status_mask+0x74>
            dtc_count++;
 800363e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003642:	3301      	adds	r3, #1
 8003644:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003648:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 800364c:	3301      	adds	r3, #1
 800364e:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8003652:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8003656:	2bff      	cmp	r3, #255	@ 0xff
 8003658:	d1d5      	bne.n	8003606 <report_number_of_emissions_obd_dtc_by_status_mask+0x32>
        }
    }

    // Cr�er un enregistrement de DTC pour envoyer la r�ponse
    DTC_Record dtc_record;
    dtc_record.dtcNumber = 0;  // ou un autre num�ro selon la d�finition de la structure
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
    dtc_record.status = get_dtc_status_availability_mask();
 800365e:	f000 fbc1 	bl	8003de4 <get_dtc_status_availability_mask>
 8003662:	4603      	mov	r3, r0
 8003664:	743b      	strb	r3, [r7, #16]
    dtc_record.snapshotDataLength = 4;
 8003666:	2304      	movs	r3, #4
 8003668:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    dtc_record.snapshotData[0] = get_dtc_status_availability_mask();
 800366c:	f000 fbba 	bl	8003de4 <get_dtc_status_availability_mask>
 8003670:	4603      	mov	r3, r0
 8003672:	74fb      	strb	r3, [r7, #19]
    dtc_record.snapshotData[1] = get_dtc_format_identifier();
 8003674:	f000 fbbe 	bl	8003df4 <get_dtc_format_identifier>
 8003678:	4603      	mov	r3, r0
 800367a:	753b      	strb	r3, [r7, #20]
    dtc_record.snapshotData[2] = (dtc_count >> 8) & 0xFF;  // Octet de poids fort
 800367c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	b29b      	uxth	r3, r3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	757b      	strb	r3, [r7, #21]
    dtc_record.snapshotData[3] = dtc_count & 0xFF;  // Octet de poids faible
 8003688:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800368c:	b2db      	uxtb	r3, r3
 800368e:	75bb      	strb	r3, [r7, #22]

    // Envoyer la r�ponse positive
    send_positive_response_read_dtc_information(REPORT_NUMBER_OF_EMISSIONS_OBD_DTC_BY_STATUS_MASK, &dtc_record, 1);
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	2201      	movs	r2, #1
 8003696:	4619      	mov	r1, r3
 8003698:	2012      	movs	r0, #18
 800369a:	f7fe fecd 	bl	8002438 <send_positive_response_read_dtc_information>
}
 800369e:	37a0      	adds	r7, #160	@ 0xa0
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000184 	.word	0x20000184

080036a8 <report_emissions_obd_dtc_by_status_mask>:




void report_emissions_obd_dtc_by_status_mask(uint8_t* data, uint8_t data_length) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
    if (data_length != 1) {
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d004      	beq.n	80036c4 <report_emissions_obd_dtc_by_status_mask+0x1c>
        send_negative_response_read_dtc_information(REPORT_EMISSIONS_OBD_DTC_BY_STATUS_MASK, NRC_INCORRECT_MESSAGE_LENGTH);
 80036ba:	2113      	movs	r1, #19
 80036bc:	2013      	movs	r0, #19
 80036be:	f7fe ff7d 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 80036c2:	e05a      	b.n	800377a <report_emissions_obd_dtc_by_status_mask+0xd2>
    }

    uint8_t status_mask = data[0];
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	737b      	strb	r3, [r7, #13]
    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 80036ca:	f648 7070 	movw	r0, #36720	@ 0x8f70
 80036ce:	f004 fc21 	bl	8007f14 <malloc>
 80036d2:	4603      	mov	r3, r0
 80036d4:	60bb      	str	r3, [r7, #8]
    if (dtc_records == NULL) {
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <report_emissions_obd_dtc_by_status_mask+0x3a>
        Error_handler();
 80036dc:	f001 f97a 	bl	80049d4 <Error_handler>
        return;
 80036e0:	e04b      	b.n	800377a <report_emissions_obd_dtc_by_status_mask+0xd2>
    }

    uint8_t record_count = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	73bb      	strb	r3, [r7, #14]
 80036ea:	e032      	b.n	8003752 <report_emissions_obd_dtc_by_status_mask+0xaa>
        if (stored_dtc_list[i].isEmissionRelated && (stored_dtc_list[i].status & status_mask) != 0) {
 80036ec:	7bba      	ldrb	r2, [r7, #14]
 80036ee:	4924      	ldr	r1, [pc, #144]	@ (8003780 <report_emissions_obd_dtc_by_status_mask+0xd8>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	440b      	add	r3, r1
 80036fa:	338b      	adds	r3, #139	@ 0x8b
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d024      	beq.n	800374c <report_emissions_obd_dtc_by_status_mask+0xa4>
 8003702:	7bba      	ldrb	r2, [r7, #14]
 8003704:	491e      	ldr	r1, [pc, #120]	@ (8003780 <report_emissions_obd_dtc_by_status_mask+0xd8>)
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	440b      	add	r3, r1
 8003710:	3304      	adds	r3, #4
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	7b7b      	ldrb	r3, [r7, #13]
 8003716:	4013      	ands	r3, r2
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <report_emissions_obd_dtc_by_status_mask+0xa4>
            dtc_records[record_count++] = stored_dtc_list[i];
 800371e:	7bba      	ldrb	r2, [r7, #14]
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	1c59      	adds	r1, r3, #1
 8003724:	73f9      	strb	r1, [r7, #15]
 8003726:	4619      	mov	r1, r3
 8003728:	460b      	mov	r3, r1
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	440b      	add	r3, r1
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	4619      	mov	r1, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1858      	adds	r0, r3, r1
 8003736:	4912      	ldr	r1, [pc, #72]	@ (8003780 <report_emissions_obd_dtc_by_status_mask+0xd8>)
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	440b      	add	r3, r1
 8003742:	4619      	mov	r1, r3
 8003744:	2390      	movs	r3, #144	@ 0x90
 8003746:	461a      	mov	r2, r3
 8003748:	f004 fd08 	bl	800815c <memcpy>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 800374c:	7bbb      	ldrb	r3, [r7, #14]
 800374e:	3301      	adds	r3, #1
 8003750:	73bb      	strb	r3, [r7, #14]
 8003752:	7bbb      	ldrb	r3, [r7, #14]
 8003754:	2bff      	cmp	r3, #255	@ 0xff
 8003756:	d1c9      	bne.n	80036ec <report_emissions_obd_dtc_by_status_mask+0x44>
        }
    }

    if (record_count == 0) {
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <report_emissions_obd_dtc_by_status_mask+0xc0>
        send_negative_response_read_dtc_information(REPORT_EMISSIONS_OBD_DTC_BY_STATUS_MASK, NRC_CONDITIONS_NOT_CORRECT);
 800375e:	2122      	movs	r1, #34	@ 0x22
 8003760:	2013      	movs	r0, #19
 8003762:	f7fe ff2b 	bl	80025bc <send_negative_response_read_dtc_information>
 8003766:	e005      	b.n	8003774 <report_emissions_obd_dtc_by_status_mask+0xcc>
    } else {
        send_positive_response_read_dtc_information(REPORT_EMISSIONS_OBD_DTC_BY_STATUS_MASK, dtc_records, record_count);
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	461a      	mov	r2, r3
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	2013      	movs	r0, #19
 8003770:	f7fe fe62 	bl	8002438 <send_positive_response_read_dtc_information>
    }

    free(dtc_records);
 8003774:	68b8      	ldr	r0, [r7, #8]
 8003776:	f004 fbd5 	bl	8007f24 <free>
}
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000184 	.word	0x20000184

08003784 <report_dtc_fault_detection_counter>:



void report_dtc_fault_detection_counter(uint8_t* data, uint8_t data_length) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	70fb      	strb	r3, [r7, #3]
    if (data_length != 0) {
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <report_dtc_fault_detection_counter+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_FAULT_DETECTION_COUNTER, NRC_INCORRECT_MESSAGE_LENGTH);
 8003796:	2113      	movs	r1, #19
 8003798:	2014      	movs	r0, #20
 800379a:	f7fe ff0f 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800379e:	e049      	b.n	8003834 <report_dtc_fault_detection_counter+0xb0>
    }

    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 80037a0:	f648 7070 	movw	r0, #36720	@ 0x8f70
 80037a4:	f004 fbb6 	bl	8007f14 <malloc>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60bb      	str	r3, [r7, #8]
    if (dtc_records == NULL) {
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <report_dtc_fault_detection_counter+0x34>
        Error_handler();
 80037b2:	f001 f90f 	bl	80049d4 <Error_handler>
        return;
 80037b6:	e03d      	b.n	8003834 <report_dtc_fault_detection_counter+0xb0>
    }

    uint8_t record_count = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80037bc:	2300      	movs	r3, #0
 80037be:	73bb      	strb	r3, [r7, #14]
 80037c0:	e024      	b.n	800380c <report_dtc_fault_detection_counter+0x88>
        if (stored_dtc_list[i].faultDetectionCounter > 0) {
 80037c2:	7bba      	ldrb	r2, [r7, #14]
 80037c4:	491d      	ldr	r1, [pc, #116]	@ (800383c <report_dtc_fault_detection_counter+0xb8>)
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4413      	add	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	440b      	add	r3, r1
 80037d0:	338c      	adds	r3, #140	@ 0x8c
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <report_dtc_fault_detection_counter+0x82>
            dtc_records[record_count++] = stored_dtc_list[i];
 80037d8:	7bba      	ldrb	r2, [r7, #14]
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	1c59      	adds	r1, r3, #1
 80037de:	73f9      	strb	r1, [r7, #15]
 80037e0:	4619      	mov	r1, r3
 80037e2:	460b      	mov	r3, r1
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	1858      	adds	r0, r3, r1
 80037f0:	4912      	ldr	r1, [pc, #72]	@ (800383c <report_dtc_fault_detection_counter+0xb8>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	440b      	add	r3, r1
 80037fc:	4619      	mov	r1, r3
 80037fe:	2390      	movs	r3, #144	@ 0x90
 8003800:	461a      	mov	r2, r3
 8003802:	f004 fcab 	bl	800815c <memcpy>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003806:	7bbb      	ldrb	r3, [r7, #14]
 8003808:	3301      	adds	r3, #1
 800380a:	73bb      	strb	r3, [r7, #14]
 800380c:	7bbb      	ldrb	r3, [r7, #14]
 800380e:	2bff      	cmp	r3, #255	@ 0xff
 8003810:	d1d7      	bne.n	80037c2 <report_dtc_fault_detection_counter+0x3e>
        }
    }

    if (record_count == 0) {
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <report_dtc_fault_detection_counter+0x9e>
        send_negative_response_read_dtc_information(REPORT_DTC_FAULT_DETECTION_COUNTER, NRC_CONDITIONS_NOT_CORRECT);
 8003818:	2122      	movs	r1, #34	@ 0x22
 800381a:	2014      	movs	r0, #20
 800381c:	f7fe fece 	bl	80025bc <send_negative_response_read_dtc_information>
 8003820:	e005      	b.n	800382e <report_dtc_fault_detection_counter+0xaa>
    } else {
        send_positive_response_read_dtc_information(REPORT_DTC_FAULT_DETECTION_COUNTER, dtc_records, record_count);
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	461a      	mov	r2, r3
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	2014      	movs	r0, #20
 800382a:	f7fe fe05 	bl	8002438 <send_positive_response_read_dtc_information>
    }

    free(dtc_records);
 800382e:	68b8      	ldr	r0, [r7, #8]
 8003830:	f004 fb78 	bl	8007f24 <free>
}
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000184 	.word	0x20000184

08003840 <report_dtc_with_permanent_status>:



void report_dtc_with_permanent_status(uint8_t* data, uint8_t data_length) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
    if (data_length != 0) {
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <report_dtc_with_permanent_status+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_WITH_PERMANENT_STATUS, NRC_INCORRECT_MESSAGE_LENGTH);
 8003852:	2113      	movs	r1, #19
 8003854:	2015      	movs	r0, #21
 8003856:	f7fe feb1 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800385a:	e04b      	b.n	80038f4 <report_dtc_with_permanent_status+0xb4>
    }

    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 800385c:	f648 7070 	movw	r0, #36720	@ 0x8f70
 8003860:	f004 fb58 	bl	8007f14 <malloc>
 8003864:	4603      	mov	r3, r0
 8003866:	60bb      	str	r3, [r7, #8]
    if (dtc_records == NULL) {
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <report_dtc_with_permanent_status+0x34>
        Error_handler();
 800386e:	f001 f8b1 	bl	80049d4 <Error_handler>
        return;
 8003872:	e03f      	b.n	80038f4 <report_dtc_with_permanent_status+0xb4>
    }

    uint8_t record_count = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003878:	2300      	movs	r3, #0
 800387a:	73bb      	strb	r3, [r7, #14]
 800387c:	e026      	b.n	80038cc <report_dtc_with_permanent_status+0x8c>
        if (stored_dtc_list[i].status & DTC_STATUS_PERMANENT) {
 800387e:	7bba      	ldrb	r2, [r7, #14]
 8003880:	491e      	ldr	r1, [pc, #120]	@ (80038fc <report_dtc_with_permanent_status+0xbc>)
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	440b      	add	r3, r1
 800388c:	3304      	adds	r3, #4
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d016      	beq.n	80038c6 <report_dtc_with_permanent_status+0x86>
            dtc_records[record_count++] = stored_dtc_list[i];
 8003898:	7bba      	ldrb	r2, [r7, #14]
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	1c59      	adds	r1, r3, #1
 800389e:	73f9      	strb	r1, [r7, #15]
 80038a0:	4619      	mov	r1, r3
 80038a2:	460b      	mov	r3, r1
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1858      	adds	r0, r3, r1
 80038b0:	4912      	ldr	r1, [pc, #72]	@ (80038fc <report_dtc_with_permanent_status+0xbc>)
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	440b      	add	r3, r1
 80038bc:	4619      	mov	r1, r3
 80038be:	2390      	movs	r3, #144	@ 0x90
 80038c0:	461a      	mov	r2, r3
 80038c2:	f004 fc4b 	bl	800815c <memcpy>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80038c6:	7bbb      	ldrb	r3, [r7, #14]
 80038c8:	3301      	adds	r3, #1
 80038ca:	73bb      	strb	r3, [r7, #14]
 80038cc:	7bbb      	ldrb	r3, [r7, #14]
 80038ce:	2bff      	cmp	r3, #255	@ 0xff
 80038d0:	d1d5      	bne.n	800387e <report_dtc_with_permanent_status+0x3e>
        }
    }

    if (record_count == 0) {
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <report_dtc_with_permanent_status+0xa2>
        send_negative_response_read_dtc_information(REPORT_DTC_WITH_PERMANENT_STATUS, NRC_CONDITIONS_NOT_CORRECT);
 80038d8:	2122      	movs	r1, #34	@ 0x22
 80038da:	2015      	movs	r0, #21
 80038dc:	f7fe fe6e 	bl	80025bc <send_negative_response_read_dtc_information>
 80038e0:	e005      	b.n	80038ee <report_dtc_with_permanent_status+0xae>
    } else {
        send_positive_response_read_dtc_information(REPORT_DTC_WITH_PERMANENT_STATUS, dtc_records, record_count);
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	461a      	mov	r2, r3
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	2015      	movs	r0, #21
 80038ea:	f7fe fda5 	bl	8002438 <send_positive_response_read_dtc_information>
    }

    free(dtc_records);
 80038ee:	68b8      	ldr	r0, [r7, #8]
 80038f0:	f004 fb18 	bl	8007f24 <free>
}
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000184 	.word	0x20000184

08003900 <report_dtc_ext_data_record_by_record_number>:


void report_dtc_ext_data_record_by_record_number(uint8_t* data, uint8_t data_length) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
    if (data_length != 2) {  // Le num�ro d'enregistrement des donn�es �tendues doit avoir 2 octets
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d004      	beq.n	800391c <report_dtc_ext_data_record_by_record_number+0x1c>
        send_negative_response_read_dtc_information(REPORT_DTC_EXT_DATA_RECORD_BY_RECORD_NUMBER, NRC_INCORRECT_MESSAGE_LENGTH);
 8003912:	2113      	movs	r1, #19
 8003914:	2016      	movs	r0, #22
 8003916:	f7fe fe51 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 800391a:	e03c      	b.n	8003996 <report_dtc_ext_data_record_by_record_number+0x96>
    }

    uint16_t record_number = (data[0] << 8) | data[1];
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b21b      	sxth	r3, r3
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	b21a      	sxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3301      	adds	r3, #1
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b21b      	sxth	r3, r3
 800392e:	4313      	orrs	r3, r2
 8003930:	b21b      	sxth	r3, r3
 8003932:	81bb      	strh	r3, [r7, #12]
    uint8_t found = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	75fb      	strb	r3, [r7, #23]
    DTC_Record* dtc_record = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]

    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e019      	b.n	8003976 <report_dtc_ext_data_record_by_record_number+0x76>
        if (stored_dtc_list[i].storedDataRecordNumber == record_number) {
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	4915      	ldr	r1, [pc, #84]	@ (800399c <report_dtc_ext_data_record_by_record_number+0x9c>)
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	440b      	add	r3, r1
 8003950:	3348      	adds	r3, #72	@ 0x48
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	89ba      	ldrh	r2, [r7, #12]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10a      	bne.n	8003970 <report_dtc_ext_data_record_by_record_number+0x70>
            dtc_record = &stored_dtc_list[i];
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4a0d      	ldr	r2, [pc, #52]	@ (800399c <report_dtc_ext_data_record_by_record_number+0x9c>)
 8003966:	4413      	add	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
            found = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
            break;
 800396e:	e005      	b.n	800397c <report_dtc_ext_data_record_by_record_number+0x7c>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	3301      	adds	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2bff      	cmp	r3, #255	@ 0xff
 800397a:	d1e2      	bne.n	8003942 <report_dtc_ext_data_record_by_record_number+0x42>
        }
    }

    if (!found) {
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <report_dtc_ext_data_record_by_record_number+0x8c>
        send_negative_response_read_dtc_information(REPORT_DTC_EXT_DATA_RECORD_BY_RECORD_NUMBER, NRC_REQUEST_OUT_OF_RANGE);
 8003982:	2131      	movs	r1, #49	@ 0x31
 8003984:	2016      	movs	r0, #22
 8003986:	f7fe fe19 	bl	80025bc <send_negative_response_read_dtc_information>
 800398a:	e004      	b.n	8003996 <report_dtc_ext_data_record_by_record_number+0x96>
    } else {
        send_positive_response_read_dtc_information(REPORT_DTC_EXT_DATA_RECORD_BY_RECORD_NUMBER, dtc_record, 1);
 800398c:	2201      	movs	r2, #1
 800398e:	6939      	ldr	r1, [r7, #16]
 8003990:	2016      	movs	r0, #22
 8003992:	f7fe fd51 	bl	8002438 <send_positive_response_read_dtc_information>
    }
}
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000184 	.word	0x20000184

080039a0 <report_user_def_memory_dtc_by_status_mask>:


void report_user_def_memory_dtc_by_status_mask(uint8_t* data, uint8_t data_length) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
    if (data_length != 1) {
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d004      	beq.n	80039bc <report_user_def_memory_dtc_by_status_mask+0x1c>
        send_negative_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_BY_STATUS_MASK, NRC_INCORRECT_MESSAGE_LENGTH);
 80039b2:	2113      	movs	r1, #19
 80039b4:	2017      	movs	r0, #23
 80039b6:	f7fe fe01 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 80039ba:	e04f      	b.n	8003a5c <report_user_def_memory_dtc_by_status_mask+0xbc>
    }

    uint8_t status_mask = data[0];
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	737b      	strb	r3, [r7, #13]
    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 80039c2:	f648 7070 	movw	r0, #36720	@ 0x8f70
 80039c6:	f004 faa5 	bl	8007f14 <malloc>
 80039ca:	4603      	mov	r3, r0
 80039cc:	60bb      	str	r3, [r7, #8]
    if (dtc_records == NULL) {
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <report_user_def_memory_dtc_by_status_mask+0x3a>
        Error_handler();
 80039d4:	f000 fffe 	bl	80049d4 <Error_handler>
        return;
 80039d8:	e040      	b.n	8003a5c <report_user_def_memory_dtc_by_status_mask+0xbc>
    }

    uint8_t record_count = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 80039de:	2300      	movs	r3, #0
 80039e0:	73bb      	strb	r3, [r7, #14]
 80039e2:	e027      	b.n	8003a34 <report_user_def_memory_dtc_by_status_mask+0x94>
        if (user_defined_memory_list[i].status & status_mask) {
 80039e4:	7bba      	ldrb	r2, [r7, #14]
 80039e6:	491f      	ldr	r1, [pc, #124]	@ (8003a64 <report_user_def_memory_dtc_by_status_mask+0xc4>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	440b      	add	r3, r1
 80039f2:	3304      	adds	r3, #4
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	7b7b      	ldrb	r3, [r7, #13]
 80039f8:	4013      	ands	r3, r2
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d016      	beq.n	8003a2e <report_user_def_memory_dtc_by_status_mask+0x8e>
            dtc_records[record_count++] = user_defined_memory_list[i];
 8003a00:	7bba      	ldrb	r2, [r7, #14]
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	1c59      	adds	r1, r3, #1
 8003a06:	73f9      	strb	r1, [r7, #15]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	440b      	add	r3, r1
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	1858      	adds	r0, r3, r1
 8003a18:	4912      	ldr	r1, [pc, #72]	@ (8003a64 <report_user_def_memory_dtc_by_status_mask+0xc4>)
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	440b      	add	r3, r1
 8003a24:	4619      	mov	r1, r3
 8003a26:	2390      	movs	r3, #144	@ 0x90
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f004 fb97 	bl	800815c <memcpy>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003a2e:	7bbb      	ldrb	r3, [r7, #14]
 8003a30:	3301      	adds	r3, #1
 8003a32:	73bb      	strb	r3, [r7, #14]
 8003a34:	7bbb      	ldrb	r3, [r7, #14]
 8003a36:	2bff      	cmp	r3, #255	@ 0xff
 8003a38:	d1d4      	bne.n	80039e4 <report_user_def_memory_dtc_by_status_mask+0x44>
        }
    }

    if (record_count == 0) {
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <report_user_def_memory_dtc_by_status_mask+0xaa>
        send_negative_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_BY_STATUS_MASK, NRC_CONDITIONS_NOT_CORRECT);
 8003a40:	2122      	movs	r1, #34	@ 0x22
 8003a42:	2017      	movs	r0, #23
 8003a44:	f7fe fdba 	bl	80025bc <send_negative_response_read_dtc_information>
 8003a48:	e005      	b.n	8003a56 <report_user_def_memory_dtc_by_status_mask+0xb6>
    } else {
        send_positive_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_BY_STATUS_MASK, dtc_records, record_count);
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	2017      	movs	r0, #23
 8003a52:	f7fe fcf1 	bl	8002438 <send_positive_response_read_dtc_information>
    }

    free(dtc_records);
 8003a56:	68b8      	ldr	r0, [r7, #8]
 8003a58:	f004 fa64 	bl	8007f24 <free>
}
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20012064 	.word	0x20012064

08003a68 <report_user_def_memory_dtc_snapshot_record>:




void report_user_def_memory_dtc_snapshot_record(uint8_t* data, uint8_t data_length) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b0aa      	sub	sp, #168	@ 0xa8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]
    // V�rification de la longueur attendue (DTCMaskRecord + SnapshotRecordNumber)
    if (data_length != 4) {
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d004      	beq.n	8003a84 <report_user_def_memory_dtc_snapshot_record+0x1c>
        send_negative_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_SNAPSHOT_RECORD, NRC_INCORRECT_MESSAGE_LENGTH);
 8003a7a:	2113      	movs	r1, #19
 8003a7c:	2018      	movs	r0, #24
 8003a7e:	f7fe fd9d 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003a82:	e05f      	b.n	8003b44 <report_user_def_memory_dtc_snapshot_record+0xdc>
    }

    // Extraction du DTCMaskRecord et du num�ro de snapshot
    uint32_t dtc_mask_record = (data[0] << 16) | (data[1] << 8) | data[2];
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	041a      	lsls	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	4313      	orrs	r3, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	3202      	adds	r2, #2
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    uint8_t snapshot_record_number = data[3];
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	78db      	ldrb	r3, [r3, #3]
 8003aa4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    uint8_t found = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    DTC_Record dtc_record;

    // Parcourir la m�moire utilisateur pour trouver le DTC correspondant
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8003ab4:	e032      	b.n	8003b1c <report_user_def_memory_dtc_snapshot_record+0xb4>
        if (user_defined_memory_list[i].dtcNumber == dtc_mask_record && user_defined_memory_list[i].snapshotRecordNumber == snapshot_record_number) {
 8003ab6:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8003aba:	4924      	ldr	r1, [pc, #144]	@ (8003b4c <report_user_def_memory_dtc_snapshot_record+0xe4>)
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	440b      	add	r3, r1
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d120      	bne.n	8003b12 <report_user_def_memory_dtc_snapshot_record+0xaa>
 8003ad0:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8003ad4:	491d      	ldr	r1, [pc, #116]	@ (8003b4c <report_user_def_memory_dtc_snapshot_record+0xe4>)
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	440b      	add	r3, r1
 8003ae0:	3306      	adds	r3, #6
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d112      	bne.n	8003b12 <report_user_def_memory_dtc_snapshot_record+0xaa>
            dtc_record = user_defined_memory_list[i];
 8003aec:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8003af0:	4916      	ldr	r1, [pc, #88]	@ (8003b4c <report_user_def_memory_dtc_snapshot_record+0xe4>)
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	18ca      	adds	r2, r1, r3
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	4611      	mov	r1, r2
 8003b02:	2290      	movs	r2, #144	@ 0x90
 8003b04:	4618      	mov	r0, r3
 8003b06:	f004 fb29 	bl	800815c <memcpy>
            found = 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
            break;
 8003b10:	e008      	b.n	8003b24 <report_user_def_memory_dtc_snapshot_record+0xbc>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003b12:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003b16:	3301      	adds	r3, #1
 8003b18:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8003b1c:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003b20:	2bff      	cmp	r3, #255	@ 0xff
 8003b22:	d1c8      	bne.n	8003ab6 <report_user_def_memory_dtc_snapshot_record+0x4e>
        }
    }

    // Si aucun enregistrement n'est trouv�
    if (!found) {
 8003b24:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <report_user_def_memory_dtc_snapshot_record+0xce>
        send_negative_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_SNAPSHOT_RECORD, NRC_REQUEST_OUT_OF_RANGE);
 8003b2c:	2131      	movs	r1, #49	@ 0x31
 8003b2e:	2018      	movs	r0, #24
 8003b30:	f7fe fd44 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003b34:	e006      	b.n	8003b44 <report_user_def_memory_dtc_snapshot_record+0xdc>
    }

    // Envoyer la r�ponse positive avec l'enregistrement snapshot
    send_positive_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_SNAPSHOT_RECORD, &dtc_record, 1);
 8003b36:	f107 030c 	add.w	r3, r7, #12
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	2018      	movs	r0, #24
 8003b40:	f7fe fc7a 	bl	8002438 <send_positive_response_read_dtc_information>
}
 8003b44:	37a8      	adds	r7, #168	@ 0xa8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20012064 	.word	0x20012064

08003b50 <report_user_def_memory_dtc_ext_data_record>:




void report_user_def_memory_dtc_ext_data_record(uint8_t* data, uint8_t data_length) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0aa      	sub	sp, #168	@ 0xa8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
    // V�rification de la longueur des donn�es re�ues
    if (data_length != 4) {
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d004      	beq.n	8003b6c <report_user_def_memory_dtc_ext_data_record+0x1c>
        send_negative_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_EXT_DATA_RECORD, NRC_INCORRECT_MESSAGE_LENGTH);
 8003b62:	2113      	movs	r1, #19
 8003b64:	2019      	movs	r0, #25
 8003b66:	f7fe fd29 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003b6a:	e060      	b.n	8003c2e <report_user_def_memory_dtc_ext_data_record+0xde>
    }

    // Extraction du DTCMaskRecord et du num�ro de l'enregistrement de donn�es �tendues
    uint32_t dtc_mask_record = (data[0] << 16) | (data[1] << 8) | data[2];
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	041a      	lsls	r2, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3301      	adds	r3, #1
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	3202      	adds	r2, #2
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    uint8_t ext_data_record_number = data[3];
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	78db      	ldrb	r3, [r3, #3]
 8003b8c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    uint8_t found = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    DTC_Record dtc_record;

    // Parcourir la m�moire utilisateur pour trouver le DTC correspondant
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8003b9c:	e033      	b.n	8003c06 <report_user_def_memory_dtc_ext_data_record+0xb6>
        if (user_defined_memory_list[i].dtcNumber == dtc_mask_record && user_defined_memory_list[i].storedDataRecordNumber == ext_data_record_number) {
 8003b9e:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8003ba2:	4924      	ldr	r1, [pc, #144]	@ (8003c34 <report_user_def_memory_dtc_ext_data_record+0xe4>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	440b      	add	r3, r1
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d121      	bne.n	8003bfc <report_user_def_memory_dtc_ext_data_record+0xac>
 8003bb8:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8003bbc:	491d      	ldr	r1, [pc, #116]	@ (8003c34 <report_user_def_memory_dtc_ext_data_record+0xe4>)
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3348      	adds	r3, #72	@ 0x48
 8003bca:	881a      	ldrh	r2, [r3, #0]
 8003bcc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d112      	bne.n	8003bfc <report_user_def_memory_dtc_ext_data_record+0xac>
            dtc_record = user_defined_memory_list[i];
 8003bd6:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8003bda:	4916      	ldr	r1, [pc, #88]	@ (8003c34 <report_user_def_memory_dtc_ext_data_record+0xe4>)
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	18ca      	adds	r2, r1, r3
 8003be6:	f107 030c 	add.w	r3, r7, #12
 8003bea:	4611      	mov	r1, r2
 8003bec:	2290      	movs	r2, #144	@ 0x90
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 fab4 	bl	800815c <memcpy>
            found = 1;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
            break;
 8003bfa:	e008      	b.n	8003c0e <report_user_def_memory_dtc_ext_data_record+0xbe>
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003bfc:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003c00:	3301      	adds	r3, #1
 8003c02:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8003c06:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003c0a:	2bff      	cmp	r3, #255	@ 0xff
 8003c0c:	d1c7      	bne.n	8003b9e <report_user_def_memory_dtc_ext_data_record+0x4e>
        }
    }

    // Si aucun enregistrement n'est trouv�
    if (!found) {
 8003c0e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <report_user_def_memory_dtc_ext_data_record+0xd0>
        send_negative_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_EXT_DATA_RECORD, NRC_REQUEST_OUT_OF_RANGE);
 8003c16:	2131      	movs	r1, #49	@ 0x31
 8003c18:	2019      	movs	r0, #25
 8003c1a:	f7fe fccf 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003c1e:	e006      	b.n	8003c2e <report_user_def_memory_dtc_ext_data_record+0xde>
    }

    // Envoyer la r�ponse positive avec les donn�es �tendues du DTC
    send_positive_response_read_dtc_information(REPORT_USER_DEF_MEMORY_DTC_EXT_DATA_RECORD, &dtc_record, 1);
 8003c20:	f107 030c 	add.w	r3, r7, #12
 8003c24:	2201      	movs	r2, #1
 8003c26:	4619      	mov	r1, r3
 8003c28:	2019      	movs	r0, #25
 8003c2a:	f7fe fc05 	bl	8002438 <send_positive_response_read_dtc_information>
}
 8003c2e:	37a8      	adds	r7, #168	@ 0xa8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20012064 	.word	0x20012064

08003c38 <report_wwh_obd_dtc_by_mask_record>:




void report_wwh_obd_dtc_by_mask_record(uint8_t* data, uint8_t data_length) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
    if (data_length != 1) {  // Le masque de statut doit �tre d'une longueur de 1 octet
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d004      	beq.n	8003c54 <report_wwh_obd_dtc_by_mask_record+0x1c>
        send_negative_response_read_dtc_information(REPORT_WWH_OBD_DTC_BY_MASK_RECORD, NRC_INCORRECT_MESSAGE_LENGTH);
 8003c4a:	2113      	movs	r1, #19
 8003c4c:	2042      	movs	r0, #66	@ 0x42
 8003c4e:	f7fe fcb5 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003c52:	e05e      	b.n	8003d12 <report_wwh_obd_dtc_by_mask_record+0xda>
    }

    uint8_t status_mask = data[0];
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	733b      	strb	r3, [r7, #12]
    uint8_t found = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 8003c5e:	f648 7070 	movw	r0, #36720	@ 0x8f70
 8003c62:	f004 f957 	bl	8007f14 <malloc>
 8003c66:	4603      	mov	r3, r0
 8003c68:	60bb      	str	r3, [r7, #8]

    if (dtc_records == NULL) {
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <report_wwh_obd_dtc_by_mask_record+0x3e>
        Error_handler();
 8003c70:	f000 feb0 	bl	80049d4 <Error_handler>
        return;
 8003c74:	e04d      	b.n	8003d12 <report_wwh_obd_dtc_by_mask_record+0xda>
    }

    uint8_t record_count = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73bb      	strb	r3, [r7, #14]

    // Parcourir la m�moire pour trouver les DTCs WWH-OBD
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	737b      	strb	r3, [r7, #13]
 8003c7e:	e034      	b.n	8003cea <report_wwh_obd_dtc_by_mask_record+0xb2>
        if (stored_dtc_list[i].isEmissionRelated && (stored_dtc_list[i].status & status_mask) != 0) {
 8003c80:	7b7a      	ldrb	r2, [r7, #13]
 8003c82:	4925      	ldr	r1, [pc, #148]	@ (8003d18 <report_wwh_obd_dtc_by_mask_record+0xe0>)
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	440b      	add	r3, r1
 8003c8e:	338b      	adds	r3, #139	@ 0x8b
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d026      	beq.n	8003ce4 <report_wwh_obd_dtc_by_mask_record+0xac>
 8003c96:	7b7a      	ldrb	r2, [r7, #13]
 8003c98:	491f      	ldr	r1, [pc, #124]	@ (8003d18 <report_wwh_obd_dtc_by_mask_record+0xe0>)
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	7b3b      	ldrb	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d018      	beq.n	8003ce4 <report_wwh_obd_dtc_by_mask_record+0xac>
            dtc_records[record_count++] = stored_dtc_list[i];
 8003cb2:	7b7a      	ldrb	r2, [r7, #13]
 8003cb4:	7bbb      	ldrb	r3, [r7, #14]
 8003cb6:	1c59      	adds	r1, r3, #1
 8003cb8:	73b9      	strb	r1, [r7, #14]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1858      	adds	r0, r3, r1
 8003cca:	4913      	ldr	r1, [pc, #76]	@ (8003d18 <report_wwh_obd_dtc_by_mask_record+0xe0>)
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	440b      	add	r3, r1
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	2390      	movs	r3, #144	@ 0x90
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f004 fa3e 	bl	800815c <memcpy>
            found = 1;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003ce4:	7b7b      	ldrb	r3, [r7, #13]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	737b      	strb	r3, [r7, #13]
 8003cea:	7b7b      	ldrb	r3, [r7, #13]
 8003cec:	2bff      	cmp	r3, #255	@ 0xff
 8003cee:	d1c7      	bne.n	8003c80 <report_wwh_obd_dtc_by_mask_record+0x48>
        }
    }

    // Si aucun DTC n'est trouv�
    if (!found) {
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <report_wwh_obd_dtc_by_mask_record+0xc8>
        send_negative_response_read_dtc_information(REPORT_WWH_OBD_DTC_BY_MASK_RECORD, NRC_CONDITIONS_NOT_CORRECT);
 8003cf6:	2122      	movs	r1, #34	@ 0x22
 8003cf8:	2042      	movs	r0, #66	@ 0x42
 8003cfa:	f7fe fc5f 	bl	80025bc <send_negative_response_read_dtc_information>
 8003cfe:	e005      	b.n	8003d0c <report_wwh_obd_dtc_by_mask_record+0xd4>
    } else {
        send_positive_response_read_dtc_information(REPORT_WWH_OBD_DTC_BY_MASK_RECORD, dtc_records, record_count);
 8003d00:	7bbb      	ldrb	r3, [r7, #14]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	2042      	movs	r0, #66	@ 0x42
 8003d08:	f7fe fb96 	bl	8002438 <send_positive_response_read_dtc_information>
    }

    free(dtc_records);
 8003d0c:	68b8      	ldr	r0, [r7, #8]
 8003d0e:	f004 f909 	bl	8007f24 <free>
}
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000184 	.word	0x20000184

08003d1c <report_wwh_obd_dtc_with_permanent_status>:



void report_wwh_obd_dtc_with_permanent_status(uint8_t* data, uint8_t data_length) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
    if (data_length != 0) {
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <report_wwh_obd_dtc_with_permanent_status+0x1c>
        send_negative_response_read_dtc_information(REPORT_WWH_OBD_DTC_WITH_PERMANENT_STATUS, NRC_INCORRECT_MESSAGE_LENGTH);
 8003d2e:	2113      	movs	r1, #19
 8003d30:	2055      	movs	r0, #85	@ 0x55
 8003d32:	f7fe fc43 	bl	80025bc <send_negative_response_read_dtc_information>
        return;
 8003d36:	e04f      	b.n	8003dd8 <report_wwh_obd_dtc_with_permanent_status+0xbc>
    }

    uint8_t found = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
    DTC_Record* dtc_records = (DTC_Record*)malloc(MAX_DTC_COUNT * sizeof(DTC_Record));
 8003d3c:	f648 7070 	movw	r0, #36720	@ 0x8f70
 8003d40:	f004 f8e8 	bl	8007f14 <malloc>
 8003d44:	4603      	mov	r3, r0
 8003d46:	60bb      	str	r3, [r7, #8]

    if (dtc_records == NULL) {
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <report_wwh_obd_dtc_with_permanent_status+0x38>
        Error_handler();
 8003d4e:	f000 fe41 	bl	80049d4 <Error_handler>
        return;
 8003d52:	e041      	b.n	8003dd8 <report_wwh_obd_dtc_with_permanent_status+0xbc>
    }

    uint8_t record_count = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73bb      	strb	r3, [r7, #14]

    // Parcourir la m�moire pour trouver les DTCs WWH-OBD avec statut permanent
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003d58:	2300      	movs	r3, #0
 8003d5a:	737b      	strb	r3, [r7, #13]
 8003d5c:	e028      	b.n	8003db0 <report_wwh_obd_dtc_with_permanent_status+0x94>
        if (stored_dtc_list[i].status & DTC_STATUS_PERMANENT) {
 8003d5e:	7b7a      	ldrb	r2, [r7, #13]
 8003d60:	491f      	ldr	r1, [pc, #124]	@ (8003de0 <report_wwh_obd_dtc_with_permanent_status+0xc4>)
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	440b      	add	r3, r1
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d018      	beq.n	8003daa <report_wwh_obd_dtc_with_permanent_status+0x8e>
            dtc_records[record_count++] = stored_dtc_list[i];
 8003d78:	7b7a      	ldrb	r2, [r7, #13]
 8003d7a:	7bbb      	ldrb	r3, [r7, #14]
 8003d7c:	1c59      	adds	r1, r3, #1
 8003d7e:	73b9      	strb	r1, [r7, #14]
 8003d80:	4619      	mov	r1, r3
 8003d82:	460b      	mov	r3, r1
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1858      	adds	r0, r3, r1
 8003d90:	4913      	ldr	r1, [pc, #76]	@ (8003de0 <report_wwh_obd_dtc_with_permanent_status+0xc4>)
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	440b      	add	r3, r1
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	2390      	movs	r3, #144	@ 0x90
 8003da0:	461a      	mov	r2, r3
 8003da2:	f004 f9db 	bl	800815c <memcpy>
            found = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_DTC_COUNT; i++) {
 8003daa:	7b7b      	ldrb	r3, [r7, #13]
 8003dac:	3301      	adds	r3, #1
 8003dae:	737b      	strb	r3, [r7, #13]
 8003db0:	7b7b      	ldrb	r3, [r7, #13]
 8003db2:	2bff      	cmp	r3, #255	@ 0xff
 8003db4:	d1d3      	bne.n	8003d5e <report_wwh_obd_dtc_with_permanent_status+0x42>
        }
    }

    // Si aucun DTC n'est trouv�
    if (!found) {
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <report_wwh_obd_dtc_with_permanent_status+0xaa>
        send_negative_response_read_dtc_information(REPORT_WWH_OBD_DTC_WITH_PERMANENT_STATUS, NRC_CONDITIONS_NOT_CORRECT);
 8003dbc:	2122      	movs	r1, #34	@ 0x22
 8003dbe:	2055      	movs	r0, #85	@ 0x55
 8003dc0:	f7fe fbfc 	bl	80025bc <send_negative_response_read_dtc_information>
 8003dc4:	e005      	b.n	8003dd2 <report_wwh_obd_dtc_with_permanent_status+0xb6>
    } else {
        send_positive_response_read_dtc_information(REPORT_WWH_OBD_DTC_WITH_PERMANENT_STATUS, dtc_records, record_count);
 8003dc6:	7bbb      	ldrb	r3, [r7, #14]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	2055      	movs	r0, #85	@ 0x55
 8003dce:	f7fe fb33 	bl	8002438 <send_positive_response_read_dtc_information>
    }

    free(dtc_records);
 8003dd2:	68b8      	ldr	r0, [r7, #8]
 8003dd4:	f004 f8a6 	bl	8007f24 <free>
}
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000184 	.word	0x20000184

08003de4 <get_dtc_status_availability_mask>:



uint8_t get_dtc_status_availability_mask() {
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
    // Retourne un masque de statut DTC selon tes besoins
    return 0xFF; // Exemple : Tous les statuts sont disponibles
 8003de8:	23ff      	movs	r3, #255	@ 0xff
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <get_dtc_format_identifier>:
uint8_t get_dtc_format_identifier() {
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
    // Retourne un identifiant de format DTC (ex : SAE J2012, ISO, etc.)
    return 0x01; // Exemple
 8003df8:	2301      	movs	r3, #1
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <uds_request_download>:
 */
#include "uds_services.c"
#include "Upload_Download_functional_unit.h"
/*******************************************************Request_download******************************************************/
// Fonction pour traiter la demande de t�l�chargement
void uds_request_download(RequestDownload_t *request) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
        send_negative_response_request_download(NRC_INCORRECT_MESSAGE_LENGTH);
        return;
    }

    // 2. V�rification de l'identifiant de format de donn�es
    if (request->dataFormatIdentifier != 0x00) { // Exemple de v�rification
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <uds_request_download+0x18>
        send_negative_response_request_download(NRC_REQUEST_OUT_OF_RANGE);
 8003e14:	2031      	movs	r0, #49	@ 0x31
 8003e16:	f000 f83e 	bl	8003e96 <send_negative_response_request_download>
        return;
 8003e1a:	e02d      	b.n	8003e78 <uds_request_download+0x74>
    }

    // 3. V�rification de l'identifiant de format d'adresse et de longueur
    if (!is_memory_address_valid(request->memoryAddress) || !is_memory_size_valid(request->memorySize)) {
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3302      	adds	r3, #2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 f84b 	bl	8003ebc <is_memory_address_valid>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f083 0301 	eor.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <uds_request_download+0x44>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3306      	adds	r3, #6
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f84b 	bl	8003ed2 <is_memory_size_valid>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f083 0301 	eor.w	r3, r3, #1
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <uds_request_download+0x4c>
        send_negative_response_request_download(NRC_REQUEST_OUT_OF_RANGE);
 8003e48:	2031      	movs	r0, #49	@ 0x31
 8003e4a:	f000 f824 	bl	8003e96 <send_negative_response_request_download>
        return;
 8003e4e:	e013      	b.n	8003e78 <uds_request_download+0x74>
    }

    // 4. V�rification de la s�curit� (si applicable)
    if (is_security_active()) { // Impl�mentez is_security_active()
 8003e50:	f000 f893 	bl	8003f7a <is_security_active>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <uds_request_download+0x5e>
        send_negative_response_request_download(NRC_SECURITY_ACCESS_DENIED);
 8003e5a:	2033      	movs	r0, #51	@ 0x33
 8003e5c:	f000 f81b 	bl	8003e96 <send_negative_response_request_download>
        return;
 8003e60:	e00a      	b.n	8003e78 <uds_request_download+0x74>
    }

    // Pr�parer la r�ponse positive
    ResponseDownload_t response;
    response.lengthFormatIdentifier = 0x74; // Identifiant de r�ponse
 8003e62:	2374      	movs	r3, #116	@ 0x74
 8003e64:	733b      	strb	r3, [r7, #12]
    response.maxNumberOfBlockLength[0] = 0x00; // Remplacez par la logique appropri�e
 8003e66:	2300      	movs	r3, #0
 8003e68:	737b      	strb	r3, [r7, #13]
    response.maxNumberOfBlockLength[1] = 0xFF; // Remplacez par la logique appropri�e
 8003e6a:	23ff      	movs	r3, #255	@ 0xff
 8003e6c:	73bb      	strb	r3, [r7, #14]

    // Envoyer la r�ponse positive
    send_positive_response_request_download(&response);
 8003e6e:	f107 030c 	add.w	r3, r7, #12
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f803 	bl	8003e7e <send_positive_response_request_download>
}
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <send_positive_response_request_download>:

// Fonction pour envoyer une r�ponse positive
void send_positive_response_request_download(ResponseDownload_t *response) {
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
    // Envoi du message via CAN
    send_can_message((uint8_t *)response, sizeof(ResponseDownload_t));
 8003e86:	2103      	movs	r1, #3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fc ff31 	bl	8000cf0 <send_can_message>
    // send_uart_message((uint8_t *)response, sizeof(ResponseDownload_t));
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <send_negative_response_request_download>:

// Fonction pour envoyer une r�ponse n�gative
void send_negative_response_request_download(uint8_t nrc) {
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	71fb      	strb	r3, [r7, #7]
    uint8_t response[2];
    response[0] = UDS_RESPONSE_REQUEST_DOWNLOAD; // SID de r�ponse
 8003ea0:	2374      	movs	r3, #116	@ 0x74
 8003ea2:	733b      	strb	r3, [r7, #12]
    response[1] = nrc; // NRC
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	737b      	strb	r3, [r7, #13]
    send_can_message(response, sizeof(response));
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc ff1e 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, sizeof(response));
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <is_memory_address_valid>:

// Fonction pour v�rifier la validit� de l'adresse m�moire
bool is_memory_address_valid(uint8_t *address) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    // Impl�mentez votre logique pour v�rifier la validit� de l'adresse
    return true; // Remplacez par la logique appropri�e
 8003ec4:	2301      	movs	r3, #1
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <is_memory_size_valid>:

// Fonction pour v�rifier la validit� de la taille m�moire
bool is_memory_size_valid(uint8_t *size) {
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
    // Impl�mentez votre logique pour v�rifier la validit� de la taille
    return true; // Remplacez par la logique appropri�e
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <uds_request_upload>:
/*******************************************************RequestUpload******************************************************/

// Fonction pour g�rer la requ�te RequestUpload
void uds_request_upload(RequestUpload_t *request) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
        send_negative_response_upload(NRC_INCORRECT_MESSAGE_LENGTH);
        return;
    }

    // 2. V�rification de l'identifiant et du format de donn�es
    if (request->dataFormatIdentifier != 0x35) { // Exemple de validation
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b35      	cmp	r3, #53	@ 0x35
 8003ef6:	d003      	beq.n	8003f00 <uds_request_upload+0x18>
        send_negative_response_upload(NRC_REQUEST_OUT_OF_RANGE);
 8003ef8:	2031      	movs	r0, #49	@ 0x31
 8003efa:	f000 f82b 	bl	8003f54 <send_negative_response_upload>
        return;
 8003efe:	e010      	b.n	8003f22 <uds_request_upload+0x3a>
    }

    // 3. V�rification de la s�curit�
    if (is_security_active()) {
 8003f00:	f000 f83b 	bl	8003f7a <is_security_active>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <uds_request_upload+0x2a>
        send_negative_response_upload(NRC_SECURITY_ACCESS_DENIED);
 8003f0a:	2033      	movs	r0, #51	@ 0x33
 8003f0c:	f000 f822 	bl	8003f54 <send_negative_response_upload>
        return;
 8003f10:	e007      	b.n	8003f22 <uds_request_upload+0x3a>

    // 4. Validation des donn�es dans memoryAddress et memorySize
    // Impl�mentez votre logique pour v�rifier si l'adresse et la taille sont valides

    // 5. Envoyer une r�ponse positive
    uint8_t maxNumberOfBlockLength[2] = {0x00, 0xFF}; // Exemple
 8003f12:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8003f16:	81bb      	strh	r3, [r7, #12]
    send_positive_response_upload(maxNumberOfBlockLength);
 8003f18:	f107 030c 	add.w	r3, r7, #12
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f803 	bl	8003f28 <send_positive_response_upload>
}
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <send_positive_response_upload>:

// Fonction pour envoyer une r�ponse positive
void send_positive_response_upload(uint8_t *maxNumberOfBlockLength) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
    ResponseUpload_t response;
    response.lengthFormatIdentifier = 0x75; // LFID
 8003f30:	2375      	movs	r3, #117	@ 0x75
 8003f32:	733b      	strb	r3, [r7, #12]
    response.maxNumberOfBlockLength[0] = maxNumberOfBlockLength[0];
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	737b      	strb	r3, [r7, #13]
    response.maxNumberOfBlockLength[1] = maxNumberOfBlockLength[1];
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	73bb      	strb	r3, [r7, #14]

    // Envoyer le message via le protocole CAN ou autre m�thode appropri�e
    send_can_message((uint8_t*)&response, sizeof(response));
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	2103      	movs	r1, #3
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fc fed2 	bl	8000cf0 <send_can_message>
    //send_uart_message((uint8_t*)&response, sizeof(response));
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <send_negative_response_upload>:

// Fonction pour envoyer une r�ponse n�gative
void send_negative_response_upload(uint8_t nrc) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
    uint8_t response[2];
    response[0] = 0x35; // SID de r�ponse
 8003f5e:	2335      	movs	r3, #53	@ 0x35
 8003f60:	733b      	strb	r3, [r7, #12]
    response[1] = nrc;
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	737b      	strb	r3, [r7, #13]

    // Envoyer le message d'erreur
    send_can_message(response, sizeof(response));
 8003f66:	f107 030c 	add.w	r3, r7, #12
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc febf 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, sizeof(response));
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <is_security_active>:

// Exemple de fonction pour v�rifier si le niveau de s�curit� est actif
bool is_security_active(void) {
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
    // Logique pour v�rifier si la s�curit� est active
    return false; // Remplacez par votre logique
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <uds_transfer_data>:

/*******************************************************TransferData******************************************************/
#include "uds_services.h"

// Fonction pour g�rer la requ�te TransferData
void uds_transfer_data(RequestTransferData_t *request) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
        send_negative_response_transfer_data(NRC_INCORRECT_MESSAGE_LENGTH);
        return;
    }

    // 2. V�rification si une requ�te de t�l�chargement ou d'upload est active
    if (!is_request_download_active() && !is_request_upload_active()) {
 8003f94:	f000 f86a 	bl	800406c <is_request_download_active>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f083 0301 	eor.w	r3, r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <uds_transfer_data+0x30>
 8003fa4:	f000 f86a 	bl	800407c <is_request_upload_active>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f083 0301 	eor.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <uds_transfer_data+0x30>
        send_negative_response_transfer_data(NRC_REQUEST_SEQUENCE_ERROR);
 8003fb4:	2024      	movs	r0, #36	@ 0x24
 8003fb6:	f000 f846 	bl	8004046 <send_negative_response_transfer_data>
        return;
 8003fba:	e019      	b.n	8003ff0 <uds_transfer_data+0x64>
    }

    // 3. V�rification de la validit� du blockSequenceCounter
    static uint8_t lastBlockSequenceCounter = 0;
    if (request->blockSequenceCounter != (lastBlockSequenceCounter + 1) % 256) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <uds_transfer_data+0x6c>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	425a      	negs	r2, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	bf58      	it	pl
 8003fd0:	4253      	negpl	r3, r2
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	d003      	beq.n	8003fde <uds_transfer_data+0x52>
        send_negative_response_transfer_data(NRC_WRONG_BLOCK_SEQUENCE_COUNTER);
 8003fd6:	2073      	movs	r0, #115	@ 0x73
 8003fd8:	f000 f835 	bl	8004046 <send_negative_response_transfer_data>
        return;
 8003fdc:	e008      	b.n	8003ff0 <uds_transfer_data+0x64>
    // Si c'est un upload, lisez les donn�es � partir de la m�moire
    // Exemple (� adapter selon vos besoins) :
    // write_data_to_memory(request->transferRequestParameterRecord);

    // 5. Mettez � jour le dernier blockSequenceCounter utilis�
    lastBlockSequenceCounter = request->blockSequenceCounter;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <uds_transfer_data+0x6c>)
 8003fe4:	701a      	strb	r2, [r3, #0]

    // 6. Envoyer une r�ponse positive
    send_positive_response_transfer_data(request->blockSequenceCounter);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f806 	bl	8003ffc <send_positive_response_transfer_data>
}
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2001afd4 	.word	0x2001afd4

08003ffc <send_positive_response_transfer_data>:

// Fonction pour envoyer une r�ponse positive
#include <string.h> // Inclure pour memcpy

void send_positive_response_transfer_data(uint8_t blockSequenceCounter) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b0c4      	sub	sp, #272	@ 0x110
 8004000:	af00      	add	r7, sp, #0
 8004002:	4602      	mov	r2, r0
 8004004:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004008:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800400c:	701a      	strb	r2, [r3, #0]
    ResponseTransferData_t response;
    response.blockSequenceCounter = blockSequenceCounter;
 800400e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004016:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800401a:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	701a      	strb	r2, [r3, #0]
    // Remplir response.transferResponseParameterRecord si n�cessaire
    // Exemple :
    // response.transferResponseParameterRecord[0] = ...;

    // Calculez la taille totale du message � envoyer
    size_t responseSize = sizeof(response.blockSequenceCounter) +
 8004022:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004026:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                          sizeof(response.transferResponseParameterRecord); // Ajoutez la taille de tous les membres

    // Envoyer le message via le protocole CAN ou autre m�thode appropri�e
    send_can_message((uint8_t*)&response, responseSize);
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402e:	b2da      	uxtb	r2, r3
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc fe5a 	bl	8000cf0 <send_can_message>
    // send_uart_message((uint8_t*)&response, responseSize);
}
 800403c:	bf00      	nop
 800403e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <send_negative_response_transfer_data>:

// Fonction pour envoyer une r�ponse n�gative
void send_negative_response_transfer_data(uint8_t nrc) {
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	71fb      	strb	r3, [r7, #7]
    uint8_t response[2];
    response[0] = 0x36; // SID de r�ponse
 8004050:	2336      	movs	r3, #54	@ 0x36
 8004052:	733b      	strb	r3, [r7, #12]
    response[1] = nrc;
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	737b      	strb	r3, [r7, #13]

    // Envoyer le message d'erreur
    send_can_message(response, sizeof(response));
 8004058:	f107 030c 	add.w	r3, r7, #12
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc fe46 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, sizeof(response));
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <is_request_download_active>:

// Exemple de v�rification d'activit� des requ�tes
bool is_request_download_active(void) {
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
    // Logique pour v�rifier si une requ�te de t�l�chargement est active
    return false; // Remplacez par votre logique
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <is_request_upload_active>:

bool is_request_upload_active(void) {
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
    // Logique pour v�rifier si une requ�te d'upload est active
    return false; // Remplacez par votre logique
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <uds_request_transfer_exit>:
    return true; // Remplacez par votre logique
}

/*******************************************************RequestTransferExit*************************************************/
// Fonction pour g�rer la requ�te RequestTransferExit
void uds_request_transfer_exit(RequestTransferExit_t *request, ResponseTransferExit_t *response) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
        send_negative_response_transfer_exit(NRC_INCORRECT_MESSAGE_LENGTH);
        return;
    }

    // 2. V�rification de l'�tat de la s�quence de demande
    if (!is_transfer_in_progress()) {
 8004096:	f000 f847 	bl	8004128 <is_transfer_in_progress>
 800409a:	4603      	mov	r3, r0
 800409c:	f083 0301 	eor.w	r3, r3, #1
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <uds_request_transfer_exit+0x22>
        send_negative_response_transfer_exit(NRC_REQUEST_SEQUENCE_ERROR);
 80040a6:	2024      	movs	r0, #36	@ 0x24
 80040a8:	f000 f82b 	bl	8004102 <send_negative_response_transfer_exit>
        return;
 80040ac:	e015      	b.n	80040da <uds_request_transfer_exit+0x4e>
    }

    // 3. Validation des donn�es dans transferRequestParameterRecord
    if (!validate_transfer_request_parameters(request)) {
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f842 	bl	8004138 <validate_transfer_request_parameters>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f083 0301 	eor.w	r3, r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <uds_request_transfer_exit+0x3c>
        send_negative_response_transfer_exit(NRC_REQUEST_OUT_OF_RANGE);
 80040c0:	2031      	movs	r0, #49	@ 0x31
 80040c2:	f000 f81e 	bl	8004102 <send_negative_response_transfer_exit>
        return;
 80040c6:	e008      	b.n	80040da <uds_request_transfer_exit+0x4e>

    // 4. Logique pour finaliser la requ�te de transfert
    // (Ajoutez ici la logique n�cessaire pour finaliser le transfert de donn�es)

    // 5. Pr�paration de la r�ponse positive
    memset(response, 0, sizeof(ResponseTransferExit_t)); // R�initialiser la r�ponse
 80040c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040cc:	2100      	movs	r1, #0
 80040ce:	6838      	ldr	r0, [r7, #0]
 80040d0:	f004 f800 	bl	80080d4 <memset>
    // Remplir response.transferResponseParameterRecord si n�cessaire
    // Exemple : response.transferResponseParameterRecord[0] = ...;

    // Envoyer la r�ponse positive
    send_positive_response_transfer_exit(response);
 80040d4:	6838      	ldr	r0, [r7, #0]
 80040d6:	f000 f803 	bl	80040e0 <send_positive_response_transfer_exit>
}
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <send_positive_response_transfer_exit>:

// Fonction pour envoyer une r�ponse positive
void send_positive_response_transfer_exit(ResponseTransferExit_t *response) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    // Envoi du message via le protocole CAN ou autre m�thode appropri�e
    size_t response_size = sizeof(ResponseTransferExit_t); // Taille de la r�ponse
 80040e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040ec:	60fb      	str	r3, [r7, #12]
    send_can_message((uint8_t*)response, response_size);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fc fdfb 	bl	8000cf0 <send_can_message>
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <send_negative_response_transfer_exit>:

// Fonction pour envoyer une r�ponse n�gative
void send_negative_response_transfer_exit(uint8_t nrc) {
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	71fb      	strb	r3, [r7, #7]
    // Envoi d'un message d'erreur par CAN
    uint8_t response[2];
    response[0] = UDS_RESPONSE_TRANSFER_EXIT; // SID de r�ponse
 800410c:	2377      	movs	r3, #119	@ 0x77
 800410e:	733b      	strb	r3, [r7, #12]
    response[1] = nrc; // NRC
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	737b      	strb	r3, [r7, #13]

    send_can_message(response, sizeof(response));
 8004114:	f107 030c 	add.w	r3, r7, #12
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fde8 	bl	8000cf0 <send_can_message>
    //send_uart_message(response, sizeof(response));
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <is_transfer_in_progress>:

// Fonction pour v�rifier si un transfert est en cours
bool is_transfer_in_progress(void) {
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
    // Impl�mentez votre logique pour v�rifier si un transfert est actif
    return true; // Remplacez ceci par la logique appropri�e
 800412c:	2301      	movs	r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <validate_transfer_request_parameters>:

// Fonction pour valider les param�tres de la requ�te de transfert
bool validate_transfer_request_parameters(RequestTransferExit_t *request) {
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
    // Impl�mentez votre logique pour valider les param�tres
    return true; // Remplacez ceci par la logique appropri�e
 8004140:	2301      	movs	r3, #1
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <uds_request_file_transfer>:

/*******************************************************RequestFileTransfer*************************************************/
// Fonction pour traiter la requ�te RequestFileTransfer
void uds_request_file_transfer(RequestFileTransfer_t *request) {
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
    // 1. V�rification de la longueur du message
    if (request->filePathAndNameLength > sizeof(request->filePathAndName)) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	885b      	ldrh	r3, [r3, #2]
 800415a:	2bff      	cmp	r3, #255	@ 0xff
 800415c:	d903      	bls.n	8004166 <uds_request_file_transfer+0x18>
        send_negative_response_file_transfer(0x13); // Longueur incorrecte
 800415e:	2013      	movs	r0, #19
 8004160:	f000 f830 	bl	80041c4 <send_negative_response_file_transfer>
        return;
 8004164:	e01f      	b.n	80041a6 <uds_request_file_transfer+0x58>
    }

    // 2. V�rification du mode d'op�ration
    if (request->modeOfOperation < 0x01 || request->modeOfOperation > 0x05) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <uds_request_file_transfer+0x28>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b05      	cmp	r3, #5
 8004174:	d903      	bls.n	800417e <uds_request_file_transfer+0x30>
        send_negative_response_file_transfer(0x31); // Mode hors plage
 8004176:	2031      	movs	r0, #49	@ 0x31
 8004178:	f000 f824 	bl	80041c4 <send_negative_response_file_transfer>
        return;
 800417c:	e013      	b.n	80041a6 <uds_request_file_transfer+0x58>
    // 3. V�rifications suppl�mentaires selon le mode d'op�ration
    // (Ajoutez ici des v�rifications sp�cifiques si n�cessaire)

    // 4. Envoi de la r�ponse positive
    ResponseFileTransfer_t response;
    response.SID = 0x78; // Identifiant de r�ponse
 800417e:	2378      	movs	r3, #120	@ 0x78
 8004180:	723b      	strb	r3, [r7, #8]
    response.modeOfOperation = request->modeOfOperation;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	727b      	strb	r3, [r7, #9]
    response.lengthFormatIdentifier = 0x00; // � d�finir selon le contexte
 8004188:	2300      	movs	r3, #0
 800418a:	72bb      	strb	r3, [r7, #10]
    response.maxNumberOfBlockLength[0] = 0xFF; // Exemple de longueur maximale
 800418c:	23ff      	movs	r3, #255	@ 0xff
 800418e:	72fb      	strb	r3, [r7, #11]
    response.maxNumberOfBlockLength[1] = 0xFF; // Exemple de longueur maximale
 8004190:	23ff      	movs	r3, #255	@ 0xff
 8004192:	733b      	strb	r3, [r7, #12]
    response.dataFormatIdentifier = request->dataFormatIdentifier;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 800419a:	737b      	strb	r3, [r7, #13]

    // Remplir les longueurs de fichier si n�cessaire
    // Exemple : response.fileSizeOrDirInfoParameterLength = ...;

    // Appeler la fonction pour envoyer la r�ponse positive
    send_positive_response_file_transfer(&response);
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f803 	bl	80041ac <send_positive_response_file_transfer>
}
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <send_positive_response_file_transfer>:

// Fonction pour envoyer une r�ponse positive
void send_positive_response_file_transfer(ResponseFileTransfer_t *response) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    // Envoi du message via le protocole CAN ou autre m�thode appropri�e
    send_can_message((uint8_t*)response, sizeof(ResponseFileTransfer_t));
 80041b4:	2110      	movs	r1, #16
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fc fd9a 	bl	8000cf0 <send_can_message>
    //send_uart_message((uint8_t*)response, sizeof(ResponseFileTransfer_t));
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <send_negative_response_file_transfer>:


// Fonction pour envoyer une r�ponse n�gative
void send_negative_response_file_transfer(uint8_t nrc) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
    uint8_t response[2];
    response[0] = 0x78; // Identifiant de r�ponse
 80041ce:	2378      	movs	r3, #120	@ 0x78
 80041d0:	733b      	strb	r3, [r7, #12]
    response[1] = nrc; // NRC
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	737b      	strb	r3, [r7, #13]

    // Envoi d'un message d'erreur par CAN
    send_can_message(response, sizeof(response));
 80041d6:	f107 030c 	add.w	r3, r7, #12
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc fd87 	bl	8000cf0 <send_can_message>
    // send_uart_message(response, sizeof(response));
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <can_tp_send_flow_control>:

void can_tp_handle_fc(uint8_t* data);

/* Flow Control Response (Server sends this when receiving FF from tester) */
static void can_tp_send_flow_control(uint32_t tx_id)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
    uint8_t fc_frame[8] = { 0x30, 0x00, 0x00 }; // FC | CTS | BS=0 | STmin=0
 80041f2:	2330      	movs	r3, #48	@ 0x30
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
    //can_send(tx_id, fc_frame, 8);
    send_can_message(fc_frame, 8);
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	2108      	movs	r1, #8
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc fd75 	bl	8000cf0 <send_can_message>
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <can_tp_receive_isr>:

/* This function must be called from your CAN RX ISR with received CAN frame */
void can_tp_receive_isr(uint32_t can_id, uint8_t* data, uint8_t len)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]
    uint8_t pci = data[0];
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	75bb      	strb	r3, [r7, #22]
    uint8_t pci_type = pci >> 4;
 8004224:	7dbb      	ldrb	r3, [r7, #22]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	757b      	strb	r3, [r7, #21]

    switch (pci_type)
 800422a:	7d7b      	ldrb	r3, [r7, #21]
 800422c:	2b03      	cmp	r3, #3
 800422e:	f000 8089 	beq.w	8004344 <can_tp_receive_isr+0x134>
 8004232:	2b03      	cmp	r3, #3
 8004234:	f300 808a 	bgt.w	800434c <can_tp_receive_isr+0x13c>
 8004238:	2b01      	cmp	r3, #1
 800423a:	d002      	beq.n	8004242 <can_tp_receive_isr+0x32>
 800423c:	2b02      	cmp	r3, #2
 800423e:	d02d      	beq.n	800429c <can_tp_receive_isr+0x8c>
            break;
        }

        default:
            // Unknown or unsupported frame
            break;
 8004240:	e084      	b.n	800434c <can_tp_receive_isr+0x13c>
            rx_expected_len = ((pci & 0x0F) << 8) | data[1];
 8004242:	7dbb      	ldrb	r3, [r7, #22]
 8004244:	b21b      	sxth	r3, r3
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	b21b      	sxth	r3, r3
 800424a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800424e:	b21a      	sxth	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	3301      	adds	r3, #1
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b21b      	sxth	r3, r3
 8004258:	4313      	orrs	r3, r2
 800425a:	b21b      	sxth	r3, r3
 800425c:	b29a      	uxth	r2, r3
 800425e:	4b40      	ldr	r3, [pc, #256]	@ (8004360 <can_tp_receive_isr+0x150>)
 8004260:	801a      	strh	r2, [r3, #0]
            if (rx_expected_len > CAN_TP_RX_BUF_SIZE) return;
 8004262:	4b3f      	ldr	r3, [pc, #252]	@ (8004360 <can_tp_receive_isr+0x150>)
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426a:	d871      	bhi.n	8004350 <can_tp_receive_isr+0x140>
            uint8_t first_data_len = len - 2;
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	3b02      	subs	r3, #2
 8004270:	74fb      	strb	r3, [r7, #19]
            memcpy(rx_buffer, &data[2], first_data_len);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	3302      	adds	r3, #2
 8004276:	7cfa      	ldrb	r2, [r7, #19]
 8004278:	4619      	mov	r1, r3
 800427a:	483a      	ldr	r0, [pc, #232]	@ (8004364 <can_tp_receive_isr+0x154>)
 800427c:	f003 ff6e 	bl	800815c <memcpy>
            rx_current_len = first_data_len;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	b29a      	uxth	r2, r3
 8004284:	4b38      	ldr	r3, [pc, #224]	@ (8004368 <can_tp_receive_isr+0x158>)
 8004286:	801a      	strh	r2, [r3, #0]
            rx_next_sn = 1;
 8004288:	4b38      	ldr	r3, [pc, #224]	@ (800436c <can_tp_receive_isr+0x15c>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
            rx_in_progress = true;
 800428e:	4b38      	ldr	r3, [pc, #224]	@ (8004370 <can_tp_receive_isr+0x160>)
 8004290:	2201      	movs	r2, #1
 8004292:	701a      	strb	r2, [r3, #0]
            can_tp_send_flow_control(can_id);  // Response to FF
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff ffa8 	bl	80041ea <can_tp_send_flow_control>
            break;
 800429a:	e05e      	b.n	800435a <can_tp_receive_isr+0x14a>
            if (!rx_in_progress) return;
 800429c:	4b34      	ldr	r3, [pc, #208]	@ (8004370 <can_tp_receive_isr+0x160>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	f083 0301 	eor.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d154      	bne.n	8004354 <can_tp_receive_isr+0x144>
            uint8_t seq_num = pci & 0x0F;
 80042aa:	7dbb      	ldrb	r3, [r7, #22]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	753b      	strb	r3, [r7, #20]
            if (seq_num != rx_next_sn) {
 80042b2:	4b2e      	ldr	r3, [pc, #184]	@ (800436c <can_tp_receive_isr+0x15c>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	7d3a      	ldrb	r2, [r7, #20]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d003      	beq.n	80042c4 <can_tp_receive_isr+0xb4>
                rx_in_progress = false; // Sequence error
 80042bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004370 <can_tp_receive_isr+0x160>)
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
                return;
 80042c2:	e04a      	b.n	800435a <can_tp_receive_isr+0x14a>
            uint8_t copy_len = len - 1;
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
            if ((rx_current_len + copy_len) > rx_expected_len)
 80042ca:	4b27      	ldr	r3, [pc, #156]	@ (8004368 <can_tp_receive_isr+0x158>)
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	4413      	add	r3, r2
 80042d4:	4a22      	ldr	r2, [pc, #136]	@ (8004360 <can_tp_receive_isr+0x150>)
 80042d6:	8812      	ldrh	r2, [r2, #0]
 80042d8:	4293      	cmp	r3, r2
 80042da:	dd07      	ble.n	80042ec <can_tp_receive_isr+0xdc>
                copy_len = rx_expected_len - rx_current_len;
 80042dc:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <can_tp_receive_isr+0x150>)
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4b21      	ldr	r3, [pc, #132]	@ (8004368 <can_tp_receive_isr+0x158>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	75fb      	strb	r3, [r7, #23]
            memcpy(&rx_buffer[rx_current_len], &data[1], copy_len);
 80042ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004368 <can_tp_receive_isr+0x158>)
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004364 <can_tp_receive_isr+0x154>)
 80042f4:	18d0      	adds	r0, r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3301      	adds	r3, #1
 80042fa:	7dfa      	ldrb	r2, [r7, #23]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f003 ff2d 	bl	800815c <memcpy>
            rx_current_len += copy_len;
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	b29a      	uxth	r2, r3
 8004306:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <can_tp_receive_isr+0x158>)
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	4413      	add	r3, r2
 800430c:	b29a      	uxth	r2, r3
 800430e:	4b16      	ldr	r3, [pc, #88]	@ (8004368 <can_tp_receive_isr+0x158>)
 8004310:	801a      	strh	r2, [r3, #0]
            rx_next_sn = (rx_next_sn + 1) & CAN_TP_MAX_CF_SEQ;
 8004312:	4b16      	ldr	r3, [pc, #88]	@ (800436c <can_tp_receive_isr+0x15c>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	b2da      	uxtb	r2, r3
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <can_tp_receive_isr+0x15c>)
 8004322:	701a      	strb	r2, [r3, #0]
            if (rx_current_len >= rx_expected_len) {
 8004324:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <can_tp_receive_isr+0x158>)
 8004326:	881a      	ldrh	r2, [r3, #0]
 8004328:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <can_tp_receive_isr+0x150>)
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d313      	bcc.n	8004358 <can_tp_receive_isr+0x148>
            	uds_services_handler_disptcher(rx_buffer, rx_expected_len);
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <can_tp_receive_isr+0x150>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	480b      	ldr	r0, [pc, #44]	@ (8004364 <can_tp_receive_isr+0x154>)
 8004338:	f000 fca8 	bl	8004c8c <uds_services_handler_disptcher>
                rx_in_progress = false;
 800433c:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <can_tp_receive_isr+0x160>)
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
            break;
 8004342:	e009      	b.n	8004358 <can_tp_receive_isr+0x148>
        	can_tp_handle_fc(data);
 8004344:	68b8      	ldr	r0, [r7, #8]
 8004346:	f000 f815 	bl	8004374 <can_tp_handle_fc>
            break;
 800434a:	e006      	b.n	800435a <can_tp_receive_isr+0x14a>
            break;
 800434c:	bf00      	nop
 800434e:	e004      	b.n	800435a <can_tp_receive_isr+0x14a>
            if (rx_expected_len > CAN_TP_RX_BUF_SIZE) return;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <can_tp_receive_isr+0x14a>
            if (!rx_in_progress) return;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <can_tp_receive_isr+0x14a>
            break;
 8004358:	bf00      	nop
    }
}
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	2001b0d8 	.word	0x2001b0d8
 8004364:	2001afd8 	.word	0x2001afd8
 8004368:	2001b0da 	.word	0x2001b0da
 800436c:	20000042 	.word	0x20000042
 8004370:	2001b0dc 	.word	0x2001b0dc

08004374 <can_tp_handle_fc>:

void can_tp_handle_fc(uint8_t* data)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    if (data[0] != 0x30) return;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b30      	cmp	r3, #48	@ 0x30
 8004382:	d103      	bne.n	800438c <can_tp_handle_fc+0x18>

    // FC received: allow CF transmission
    tx_wait_fc = false;
 8004384:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <can_tp_handle_fc+0x24>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e000      	b.n	800438e <can_tp_handle_fc+0x1a>
    if (data[0] != 0x30) return;
 800438c:	bf00      	nop
}
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	2001b1ec 	.word	0x2001b1ec

0800439c <can_tp_send>:

void can_tp_send(uint32_t can_id, uint8_t* data, uint16_t len)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
    if (tx_in_progress) return;  // prevent overlapping
 80043aa:	4b32      	ldr	r3, [pc, #200]	@ (8004474 <can_tp_send+0xd8>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d15c      	bne.n	800446c <can_tp_send+0xd0>

    tx_can_id = can_id;
 80043b2:	4a31      	ldr	r2, [pc, #196]	@ (8004478 <can_tp_send+0xdc>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6013      	str	r3, [r2, #0]
    tx_total_len = len;
 80043b8:	4a30      	ldr	r2, [pc, #192]	@ (800447c <can_tp_send+0xe0>)
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	8013      	strh	r3, [r2, #0]
    tx_sent_len = 0;
 80043be:	4b30      	ldr	r3, [pc, #192]	@ (8004480 <can_tp_send+0xe4>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	801a      	strh	r2, [r3, #0]
    tx_next_sn = 1;
 80043c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004484 <can_tp_send+0xe8>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
    tx_wait_fc = false;
 80043ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004488 <can_tp_send+0xec>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
    tx_in_progress = true;
 80043d0:	4b28      	ldr	r3, [pc, #160]	@ (8004474 <can_tp_send+0xd8>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]

    if (len <= 7) {
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	2b07      	cmp	r3, #7
 80043da:	d816      	bhi.n	800440a <can_tp_send+0x6e>
        // Send as Single Frame (SF)
        uint8_t sf_frame[8] = { 0 };
 80043dc:	f107 0318 	add.w	r3, r7, #24
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
        sf_frame[0] = 0x00 | (len & 0x0F);  // SF | length
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	763b      	strb	r3, [r7, #24]
        memcpy(&sf_frame[1], data, len);
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	f107 0318 	add.w	r3, r7, #24
 80043f8:	3301      	adds	r3, #1
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f003 fead 	bl	800815c <memcpy>
        //can_send(can_id, sf_frame, len + 1);
        tx_in_progress = false;
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <can_tp_send+0xd8>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e031      	b.n	800446e <can_tp_send+0xd2>
    } else {
        // Store to internal buffer
        memcpy(tx_buffer, data, len);
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	461a      	mov	r2, r3
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	481e      	ldr	r0, [pc, #120]	@ (800448c <can_tp_send+0xf0>)
 8004412:	f003 fea3 	bl	800815c <memcpy>

        // Send First Frame (FF)
        uint8_t ff_frame[8] = { 0 };
 8004416:	f107 0310 	add.w	r3, r7, #16
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	605a      	str	r2, [r3, #4]
        ff_frame[0] = 0x10 | ((len >> 8) & 0x0F);  // FF | MSB len
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	b29b      	uxth	r3, r3
 8004426:	b25b      	sxtb	r3, r3
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	b25b      	sxtb	r3, r3
 800442e:	f043 0310 	orr.w	r3, r3, #16
 8004432:	b25b      	sxtb	r3, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	743b      	strb	r3, [r7, #16]
        ff_frame[1] = len & 0xFF;                 // LSB len
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	747b      	strb	r3, [r7, #17]
        memcpy(&ff_frame[2], &tx_buffer[0], 6);
 800443e:	f107 0310 	add.w	r3, r7, #16
 8004442:	3302      	adds	r3, #2
 8004444:	2206      	movs	r2, #6
 8004446:	4911      	ldr	r1, [pc, #68]	@ (800448c <can_tp_send+0xf0>)
 8004448:	4618      	mov	r0, r3
 800444a:	f003 fe87 	bl	800815c <memcpy>
       // can_send(can_id, ff_frame, 8);
        send_can_message(ff_frame, 8);
 800444e:	f107 0310 	add.w	r3, r7, #16
 8004452:	2108      	movs	r1, #8
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc fc4b 	bl	8000cf0 <send_can_message>

        tx_sent_len = 6;  // First 6 bytes sent
 800445a:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <can_tp_send+0xe4>)
 800445c:	2206      	movs	r2, #6
 800445e:	801a      	strh	r2, [r3, #0]
        tx_wait_fc = true;  // wait for FC from tester
 8004460:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <can_tp_send+0xec>)
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
        	can_tp_tx_task();
 8004466:	f000 f813 	bl	8004490 <can_tp_tx_task>
 800446a:	e000      	b.n	800446e <can_tp_send+0xd2>
    if (tx_in_progress) return;  // prevent overlapping
 800446c:	bf00      	nop

    }
}
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	2001b1e4 	.word	0x2001b1e4
 8004478:	2001b1e8 	.word	0x2001b1e8
 800447c:	2001b1e0 	.word	0x2001b1e0
 8004480:	2001b1e2 	.word	0x2001b1e2
 8004484:	20000043 	.word	0x20000043
 8004488:	2001b1ec 	.word	0x2001b1ec
 800448c:	2001b0e0 	.word	0x2001b0e0

08004490 <can_tp_tx_task>:


void can_tp_tx_task(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0

    if (!tx_in_progress || tx_wait_fc)
 8004496:	4b2d      	ldr	r3, [pc, #180]	@ (800454c <can_tp_tx_task+0xbc>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	f083 0301 	eor.w	r3, r3, #1
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d14e      	bne.n	8004542 <can_tp_tx_task+0xb2>
 80044a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004550 <can_tp_tx_task+0xc0>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d14a      	bne.n	8004542 <can_tp_tx_task+0xb2>
    	return;
    if (tx_sent_len >= tx_total_len) {
 80044ac:	4b29      	ldr	r3, [pc, #164]	@ (8004554 <can_tp_tx_task+0xc4>)
 80044ae:	881a      	ldrh	r2, [r3, #0]
 80044b0:	4b29      	ldr	r3, [pc, #164]	@ (8004558 <can_tp_tx_task+0xc8>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d303      	bcc.n	80044c0 <can_tp_tx_task+0x30>
        tx_in_progress = false;
 80044b8:	4b24      	ldr	r3, [pc, #144]	@ (800454c <can_tp_tx_task+0xbc>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]
     return ;
 80044be:	e041      	b.n	8004544 <can_tp_tx_task+0xb4>
    }

    uint8_t cf_frame[8] = { 0 };
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]
    cf_frame[0] = 0x20 | (tx_next_sn & 0x0F);
 80044c8:	4b24      	ldr	r3, [pc, #144]	@ (800455c <can_tp_tx_task+0xcc>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	b25b      	sxtb	r3, r3
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	f043 0320 	orr.w	r3, r3, #32
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	713b      	strb	r3, [r7, #4]
    uint8_t remaining = tx_total_len - tx_sent_len;
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <can_tp_tx_task+0xc8>)
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004554 <can_tp_tx_task+0xc4>)
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	73fb      	strb	r3, [r7, #15]
    uint8_t copy_len = (remaining > CAN_TP_CF_FRAME_DATA) ? CAN_TP_CF_FRAME_DATA : remaining;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	2b07      	cmp	r3, #7
 80044f2:	bf28      	it	cs
 80044f4:	2307      	movcs	r3, #7
 80044f6:	73bb      	strb	r3, [r7, #14]

    memcpy(&cf_frame[1], &tx_buffer[tx_sent_len], copy_len);
 80044f8:	4b16      	ldr	r3, [pc, #88]	@ (8004554 <can_tp_tx_task+0xc4>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	4b18      	ldr	r3, [pc, #96]	@ (8004560 <can_tp_tx_task+0xd0>)
 8004500:	18d1      	adds	r1, r2, r3
 8004502:	7bba      	ldrb	r2, [r7, #14]
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	3301      	adds	r3, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f003 fe27 	bl	800815c <memcpy>
    //can_send(tx_can_id, cf_frame, copy_len + 1);
    send_can_message(cf_frame, copy_len + 1);
 800450e:	7bbb      	ldrb	r3, [r7, #14]
 8004510:	3301      	adds	r3, #1
 8004512:	b2da      	uxtb	r2, r3
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f7fc fbe9 	bl	8000cf0 <send_can_message>

    tx_sent_len += copy_len;
 800451e:	7bbb      	ldrb	r3, [r7, #14]
 8004520:	b29a      	uxth	r2, r3
 8004522:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <can_tp_tx_task+0xc4>)
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	4413      	add	r3, r2
 8004528:	b29a      	uxth	r2, r3
 800452a:	4b0a      	ldr	r3, [pc, #40]	@ (8004554 <can_tp_tx_task+0xc4>)
 800452c:	801a      	strh	r2, [r3, #0]
    tx_next_sn = (tx_next_sn + 1) & 0x0F;
 800452e:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <can_tp_tx_task+0xcc>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	b2da      	uxtb	r2, r3
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <can_tp_tx_task+0xcc>)
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e000      	b.n	8004544 <can_tp_tx_task+0xb4>
    	return;
 8004542:	bf00      	nop

}
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2001b1e4 	.word	0x2001b1e4
 8004550:	2001b1ec 	.word	0x2001b1ec
 8004554:	2001b1e2 	.word	0x2001b1e2
 8004558:	2001b1e0 	.word	0x2001b1e0
 800455c:	20000043 	.word	0x20000043
 8004560:	2001b0e0 	.word	0x2001b0e0

08004564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800456a:	f000 fdbf 	bl	80050ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800456e:	f000 f831 	bl	80045d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004572:	f000 f8f9 	bl	8004768 <MX_GPIO_Init>
  MX_CAN1_Init();
 8004576:	f000 f897 	bl	80046a8 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800457a:	f000 f8cb 	bl	8004714 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Config();
 800457e:	f000 f929 	bl	80047d4 <CAN_Filter_Config>
  // Send a test message via UART
    const char *test_msg = "UART Initialized Successfully!\r\n";
 8004582:	4b11      	ldr	r3, [pc, #68]	@ (80045c8 <main+0x64>)
 8004584:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fb fe22 	bl	80001d0 <strlen>
 800458c:	4603      	mov	r3, r0
 800458e:	b29a      	uxth	r2, r3
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	480d      	ldr	r0, [pc, #52]	@ (80045cc <main+0x68>)
 8004598:	f002 fcf4 	bl	8006f84 <HAL_UART_Transmit>

    // Enable notifications for CAN interrupts
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800459c:	2103      	movs	r1, #3
 800459e:	480c      	ldr	r0, [pc, #48]	@ (80045d0 <main+0x6c>)
 80045a0:	f001 fa26 	bl	80059f0 <HAL_CAN_ActivateNotification>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <main+0x4a>
    {
        Error_handler();
 80045aa:	f000 fa13 	bl	80049d4 <Error_handler>
    }

    // Start the CAN module
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80045ae:	4808      	ldr	r0, [pc, #32]	@ (80045d0 <main+0x6c>)
 80045b0:	f000 ffe8 	bl	8005584 <HAL_CAN_Start>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <main+0x5a>
    {
        Error_handler();
 80045ba:	f000 fa0b 	bl	80049d4 <Error_handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 can_tp_tx_task();
 80045be:	f7ff ff67 	bl	8004490 <can_tp_tx_task>
  {
 80045c2:	bf00      	nop
 80045c4:	e7fb      	b.n	80045be <main+0x5a>
 80045c6:	bf00      	nop
 80045c8:	0800888c 	.word	0x0800888c
 80045cc:	2001b218 	.word	0x2001b218
 80045d0:	2001b1f0 	.word	0x2001b1f0

080045d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b094      	sub	sp, #80	@ 0x50
 80045d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045da:	f107 0320 	add.w	r3, r7, #32
 80045de:	2230      	movs	r2, #48	@ 0x30
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f003 fd76 	bl	80080d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045e8:	f107 030c 	add.w	r3, r7, #12
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	4b28      	ldr	r3, [pc, #160]	@ (80046a0 <SystemClock_Config+0xcc>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	4a27      	ldr	r2, [pc, #156]	@ (80046a0 <SystemClock_Config+0xcc>)
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004606:	6413      	str	r3, [r2, #64]	@ 0x40
 8004608:	4b25      	ldr	r3, [pc, #148]	@ (80046a0 <SystemClock_Config+0xcc>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004614:	2300      	movs	r3, #0
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	4b22      	ldr	r3, [pc, #136]	@ (80046a4 <SystemClock_Config+0xd0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a21      	ldr	r2, [pc, #132]	@ (80046a4 <SystemClock_Config+0xd0>)
 800461e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <SystemClock_Config+0xd0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004630:	2301      	movs	r3, #1
 8004632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800463a:	2302      	movs	r3, #2
 800463c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800463e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004644:	2308      	movs	r3, #8
 8004646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004648:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800464c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800464e:	2302      	movs	r3, #2
 8004650:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004652:	2307      	movs	r3, #7
 8004654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004656:	f107 0320 	add.w	r3, r7, #32
 800465a:	4618      	mov	r0, r3
 800465c:	f001 ffaa 	bl	80065b4 <HAL_RCC_OscConfig>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <SystemClock_Config+0x96>
  {
    Error_handler();
 8004666:	f000 f9b5 	bl	80049d4 <Error_handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800466a:	230f      	movs	r3, #15
 800466c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800466e:	2302      	movs	r3, #2
 8004670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004676:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800467a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800467c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004682:	f107 030c 	add.w	r3, r7, #12
 8004686:	2105      	movs	r1, #5
 8004688:	4618      	mov	r0, r3
 800468a:	f002 fa0b 	bl	8006aa4 <HAL_RCC_ClockConfig>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <SystemClock_Config+0xc4>
  {
    Error_handler();
 8004694:	f000 f99e 	bl	80049d4 <Error_handler>
  }
}
 8004698:	bf00      	nop
 800469a:	3750      	adds	r7, #80	@ 0x50
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000

080046a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80046ac:	4b17      	ldr	r3, [pc, #92]	@ (800470c <MX_CAN1_Init+0x64>)
 80046ae:	4a18      	ldr	r2, [pc, #96]	@ (8004710 <MX_CAN1_Init+0x68>)
 80046b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80046b2:	4b16      	ldr	r3, [pc, #88]	@ (800470c <MX_CAN1_Init+0x64>)
 80046b4:	2206      	movs	r2, #6
 80046b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80046b8:	4b14      	ldr	r3, [pc, #80]	@ (800470c <MX_CAN1_Init+0x64>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80046be:	4b13      	ldr	r3, [pc, #76]	@ (800470c <MX_CAN1_Init+0x64>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <MX_CAN1_Init+0x64>)
 80046c6:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80046ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <MX_CAN1_Init+0x64>)
 80046ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80046d4:	4b0d      	ldr	r3, [pc, #52]	@ (800470c <MX_CAN1_Init+0x64>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80046da:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <MX_CAN1_Init+0x64>)
 80046dc:	2200      	movs	r2, #0
 80046de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <MX_CAN1_Init+0x64>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80046e6:	4b09      	ldr	r3, [pc, #36]	@ (800470c <MX_CAN1_Init+0x64>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80046ec:	4b07      	ldr	r3, [pc, #28]	@ (800470c <MX_CAN1_Init+0x64>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <MX_CAN1_Init+0x64>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80046f8:	4804      	ldr	r0, [pc, #16]	@ (800470c <MX_CAN1_Init+0x64>)
 80046fa:	f000 fd69 	bl	80051d0 <HAL_CAN_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_CAN1_Init+0x60>
  {
    Error_handler();
 8004704:	f000 f966 	bl	80049d4 <Error_handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004708:	bf00      	nop
 800470a:	bd80      	pop	{r7, pc}
 800470c:	2001b1f0 	.word	0x2001b1f0
 8004710:	40006400 	.word	0x40006400

08004714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004718:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 800471a:	4a12      	ldr	r2, [pc, #72]	@ (8004764 <MX_USART2_UART_Init+0x50>)
 800471c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800471e:	4b10      	ldr	r3, [pc, #64]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 8004720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004726:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 8004728:	2200      	movs	r2, #0
 800472a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800472c:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 800472e:	2200      	movs	r2, #0
 8004730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004732:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 8004734:	2200      	movs	r2, #0
 8004736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004738:	4b09      	ldr	r3, [pc, #36]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 800473a:	220c      	movs	r2, #12
 800473c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800473e:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 8004740:	2200      	movs	r2, #0
 8004742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004744:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 8004746:	2200      	movs	r2, #0
 8004748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800474a:	4805      	ldr	r0, [pc, #20]	@ (8004760 <MX_USART2_UART_Init+0x4c>)
 800474c:	f002 fbca 	bl	8006ee4 <HAL_UART_Init>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_USART2_UART_Init+0x46>
  {
    Error_handler();
 8004756:	f000 f93d 	bl	80049d4 <Error_handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	2001b218 	.word	0x2001b218
 8004764:	40004400 	.word	0x40004400

08004768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4b17      	ldr	r3, [pc, #92]	@ (80047d0 <MX_GPIO_Init+0x68>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	4a16      	ldr	r2, [pc, #88]	@ (80047d0 <MX_GPIO_Init+0x68>)
 8004778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800477c:	6313      	str	r3, [r2, #48]	@ 0x30
 800477e:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <MX_GPIO_Init+0x68>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <MX_GPIO_Init+0x68>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	4a0f      	ldr	r2, [pc, #60]	@ (80047d0 <MX_GPIO_Init+0x68>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	6313      	str	r3, [r2, #48]	@ 0x30
 800479a:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <MX_GPIO_Init+0x68>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <MX_GPIO_Init+0x68>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	4a08      	ldr	r2, [pc, #32]	@ (80047d0 <MX_GPIO_Init+0x68>)
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <MX_GPIO_Init+0x68>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800

080047d4 <CAN_Filter_Config>:

/* USER CODE BEGIN 4 */
void CAN_Filter_Config(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	@ 0x28
 80047d8:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can1_filter_init;

    can1_filter_init.FilterActivation = ENABLE;
 80047da:	2301      	movs	r3, #1
 80047dc:	623b      	str	r3, [r7, #32]
    can1_filter_init.FilterBank = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
    can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
    can1_filter_init.FilterIdHigh = 0x0000;
 80047e6:	2300      	movs	r3, #0
 80047e8:	603b      	str	r3, [r7, #0]
    can1_filter_init.FilterIdLow = 0x0000;
 80047ea:	2300      	movs	r3, #0
 80047ec:	607b      	str	r3, [r7, #4]
    can1_filter_init.FilterMaskIdHigh = 0X01C0;
 80047ee:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80047f2:	60bb      	str	r3, [r7, #8]
    can1_filter_init.FilterMaskIdLow = 0x0000;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
    can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
    can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80047fc:	2301      	movs	r3, #1
 80047fe:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 8004800:	463b      	mov	r3, r7
 8004802:	4619      	mov	r1, r3
 8004804:	4805      	ldr	r0, [pc, #20]	@ (800481c <CAN_Filter_Config+0x48>)
 8004806:	f000 fddf 	bl	80053c8 <HAL_CAN_ConfigFilter>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <CAN_Filter_Config+0x40>
    {
        Error_handler();
 8004810:	f000 f8e0 	bl	80049d4 <Error_handler>
    }
}
 8004814:	bf00      	nop
 8004816:	3728      	adds	r7, #40	@ 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	2001b1f0 	.word	0x2001b1f0

08004820 <UART2_Send>:

/* Function to send messages via UART */
void UART2_Send(const char* message)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fb fcd1 	bl	80001d0 <strlen>
 800482e:	4603      	mov	r3, r0
 8004830:	b29a      	uxth	r2, r3
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4803      	ldr	r0, [pc, #12]	@ (8004848 <UART2_Send+0x28>)
 800483a:	f002 fba3 	bl	8006f84 <HAL_UART_Transmit>
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	2001b218 	.word	0x2001b218

0800484c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800484c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484e:	b0b3      	sub	sp, #204	@ 0xcc
 8004850:	af08      	add	r7, sp, #32
 8004852:	60f8      	str	r0, [r7, #12]
    uint8_t rcvd_msg[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcvd_msg) == HAL_OK)
 8004854:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004858:	4a4a      	ldr	r2, [pc, #296]	@ (8004984 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800485a:	2100      	movs	r1, #0
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 ffa5 	bl	80057ac <HAL_CAN_GetRxMessage>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 8088 	bne.w	800497a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
    {
    	// Construction of the message to send via UART
        char msg[100];
        sprintf(msg, "Message CAN re�u: ID=0x%lX, Data=[%d, %d, %d, %d, %d, %d, %d, %d]\n",
                (unsigned long)RxHeader.StdId, rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3], rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 800486a:	4b46      	ldr	r3, [pc, #280]	@ (8004984 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
        sprintf(msg, "Message CAN re�u: ID=0x%lX, Data=[%d, %d, %d, %d, %d, %d, %d, %d]\n",
 8004872:	469c      	mov	ip, r3
                (unsigned long)RxHeader.StdId, rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3], rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8004874:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
        sprintf(msg, "Message CAN re�u: ID=0x%lX, Data=[%d, %d, %d, %d, %d, %d, %d, %d]\n",
 8004878:	60bb      	str	r3, [r7, #8]
                (unsigned long)RxHeader.StdId, rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3], rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 800487a:	f897 109e 	ldrb.w	r1, [r7, #158]	@ 0x9e
 800487e:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
        sprintf(msg, "Message CAN re�u: ID=0x%lX, Data=[%d, %d, %d, %d, %d, %d, %d, %d]\n",
 8004882:	4604      	mov	r4, r0
                (unsigned long)RxHeader.StdId, rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3], rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8004884:	f897 00a0 	ldrb.w	r0, [r7, #160]	@ 0xa0
        sprintf(msg, "Message CAN re�u: ID=0x%lX, Data=[%d, %d, %d, %d, %d, %d, %d, %d]\n",
 8004888:	4605      	mov	r5, r0
                (unsigned long)RxHeader.StdId, rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3], rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 800488a:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
        sprintf(msg, "Message CAN re�u: ID=0x%lX, Data=[%d, %d, %d, %d, %d, %d, %d, %d]\n",
 800488e:	4606      	mov	r6, r0
                (unsigned long)RxHeader.StdId, rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3], rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8004890:	f897 00a2 	ldrb.w	r0, [r7, #162]	@ 0xa2
        sprintf(msg, "Message CAN re�u: ID=0x%lX, Data=[%d, %d, %d, %d, %d, %d, %d, %d]\n",
 8004894:	6078      	str	r0, [r7, #4]
                (unsigned long)RxHeader.StdId, rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3], rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8004896:	f897 00a3 	ldrb.w	r0, [r7, #163]	@ 0xa3
        sprintf(msg, "Message CAN re�u: ID=0x%lX, Data=[%d, %d, %d, %d, %d, %d, %d, %d]\n",
 800489a:	4603      	mov	r3, r0
 800489c:	f107 0014 	add.w	r0, r7, #20
 80048a0:	9306      	str	r3, [sp, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	9305      	str	r3, [sp, #20]
 80048a6:	9604      	str	r6, [sp, #16]
 80048a8:	9503      	str	r5, [sp, #12]
 80048aa:	9402      	str	r4, [sp, #8]
 80048ac:	9101      	str	r1, [sp, #4]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	4663      	mov	r3, ip
 80048b4:	4934      	ldr	r1, [pc, #208]	@ (8004988 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80048b6:	f003 fbeb 	bl	8008090 <siprintf>

        // Send the UART message
        UART2_Send(msg);
 80048ba:	f107 0314 	add.w	r3, r7, #20
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ffae 	bl	8004820 <UART2_Send>
        if(RxHeader.StdId == 0x600)
 80048c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004984 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048cc:	d127      	bne.n	800491e <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
        {
        	if(rcvd_msg[1] == 0x04)
 80048ce:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d151      	bne.n	800497a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
        	{
        		uint8_t message[8] = {0};
 80048d6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
        		message[0]=uds_session.current_session;
 80048e0:	4b2a      	ldr	r3, [pc, #168]	@ (800498c <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
        		CAN_TxHeaderTypeDef TxHeader;
        		uint32_t TxMailbox;

        		TxHeader.DLC = 8;
 80048e8:	2308      	movs	r3, #8
 80048ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        		TxHeader.StdId = 0x608; // Standard UDS identifier for the ECU
 80048ee:	f44f 63c1 	mov.w	r3, #1544	@ 0x608
 80048f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
        		TxHeader.IDE = CAN_ID_STD;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        		TxHeader.RTR = CAN_RTR_DATA;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

        		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 8004900:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004904:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8004908:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800490c:	4820      	ldr	r0, [pc, #128]	@ (8004990 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800490e:	f000 fe7d 	bl	800560c <HAL_CAN_AddTxMessage>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d030      	beq.n	800497a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
        			// Handle the sending error
        			Error_handler();
 8004918:	f000 f85c 	bl	80049d4 <Error_handler>
        		can_tp_receive_isr(RxHeader.StdId, rcvd_msg, len);

        	}
        }
    }
}
 800491c:	e02d      	b.n	800497a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
        else if(RxHeader.StdId == 0x7E0 || RxHeader.StdId == 0x7DF)
 800491e:	4b19      	ldr	r3, [pc, #100]	@ (8004984 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 8004926:	d005      	beq.n	8004934 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
 8004928:	4b16      	ldr	r3, [pc, #88]	@ (8004984 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f240 72df 	movw	r2, #2015	@ 0x7df
 8004930:	4293      	cmp	r3, r2
 8004932:	d122      	bne.n	800497a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
        	uint8_t frametype=((rcvd_msg[0] & 0xf0)>>4);
 8004934:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        	uint8_t len = rcvd_msg[0] & 0x0F;
 800493e:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
        	if(frametype == 0x0)
 800494a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
        		uds_services_handler_disptcher(&rcvd_msg[1], len);
 8004952:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8004956:	b29a      	uxth	r2, r3
 8004958:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800495c:	3301      	adds	r3, #1
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f000 f993 	bl	8004c8c <uds_services_handler_disptcher>
}
 8004966:	e008      	b.n	800497a <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
        		can_tp_receive_isr(RxHeader.StdId, rcvd_msg, len);
 8004968:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8004970:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fc4b 	bl	8004210 <can_tp_receive_isr>
}
 800497a:	bf00      	nop
 800497c:	37ac      	adds	r7, #172	@ 0xac
 800497e:	46bd      	mov	sp, r7
 8004980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004982:	bf00      	nop
 8004984:	2001b260 	.word	0x2001b260
 8004988:	080088b0 	.word	0x080088b0
 800498c:	20000014 	.word	0x20000014
 8004990:	2001b1f0 	.word	0x2001b1f0

08004994 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b090      	sub	sp, #64	@ 0x40
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    char msg[50];
    sprintf(msg, "Message Transmitted:M0\r\n");
 800499c:	f107 030c 	add.w	r3, r7, #12
 80049a0:	490a      	ldr	r1, [pc, #40]	@ (80049cc <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80049a2:	4618      	mov	r0, r3
 80049a4:	f003 fb74 	bl	8008090 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fb fc0f 	bl	80001d0 <strlen>
 80049b2:	4603      	mov	r3, r0
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	f107 010c 	add.w	r1, r7, #12
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
 80049be:	4804      	ldr	r0, [pc, #16]	@ (80049d0 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80049c0:	f002 fae0 	bl	8006f84 <HAL_UART_Transmit>
}
 80049c4:	bf00      	nop
 80049c6:	3740      	adds	r7, #64	@ 0x40
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	080088f8 	.word	0x080088f8
 80049d0:	2001b218 	.word	0x2001b218

080049d4 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
extern void Error_handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049d8:	b672      	cpsid	i
}
 80049da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <Error_handler+0x8>

080049e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <HAL_MspInit+0x4c>)
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	4a0f      	ldr	r2, [pc, #60]	@ (8004a2c <HAL_MspInit+0x4c>)
 80049f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80049f6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <HAL_MspInit+0x4c>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <HAL_MspInit+0x4c>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	4a08      	ldr	r2, [pc, #32]	@ (8004a2c <HAL_MspInit+0x4c>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_MspInit+0x4c>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004a1e:	2007      	movs	r0, #7
 8004a20:	f001 fb28 	bl	8006074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40023800 	.word	0x40023800

08004a30 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	@ 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	f107 0314 	add.w	r3, r7, #20
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac4 <HAL_CAN_MspInit+0x94>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d133      	bne.n	8004aba <HAL_CAN_MspInit+0x8a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac8 <HAL_CAN_MspInit+0x98>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_CAN_MspInit+0x98>)
 8004a5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a62:	4b19      	ldr	r3, [pc, #100]	@ (8004ac8 <HAL_CAN_MspInit+0x98>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	4b15      	ldr	r3, [pc, #84]	@ (8004ac8 <HAL_CAN_MspInit+0x98>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <HAL_CAN_MspInit+0x98>)
 8004a78:	f043 0308 	orr.w	r3, r3, #8
 8004a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ac8 <HAL_CAN_MspInit+0x98>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004a9a:	2309      	movs	r3, #9
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a9e:	f107 0314 	add.w	r3, r7, #20
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4809      	ldr	r0, [pc, #36]	@ (8004acc <HAL_CAN_MspInit+0x9c>)
 8004aa6:	f001 fbb9 	bl	800621c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2100      	movs	r1, #0
 8004aae:	2014      	movs	r0, #20
 8004ab0:	f001 faeb 	bl	800608a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004ab4:	2014      	movs	r0, #20
 8004ab6:	f001 fb04 	bl	80060c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004aba:	bf00      	nop
 8004abc:	3728      	adds	r7, #40	@ 0x28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40006400 	.word	0x40006400
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40020c00 	.word	0x40020c00

08004ad0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	@ 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad8:	f107 0314 	add.w	r3, r7, #20
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1d      	ldr	r2, [pc, #116]	@ (8004b64 <HAL_UART_MspInit+0x94>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d133      	bne.n	8004b5a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b68 <HAL_UART_MspInit+0x98>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	4a1b      	ldr	r2, [pc, #108]	@ (8004b68 <HAL_UART_MspInit+0x98>)
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b02:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_UART_MspInit+0x98>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <HAL_UART_MspInit+0x98>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	4a14      	ldr	r2, [pc, #80]	@ (8004b68 <HAL_UART_MspInit+0x98>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b1e:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <HAL_UART_MspInit+0x98>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b36:	2303      	movs	r3, #3
 8004b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b3a:	2307      	movs	r3, #7
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	4619      	mov	r1, r3
 8004b44:	4809      	ldr	r0, [pc, #36]	@ (8004b6c <HAL_UART_MspInit+0x9c>)
 8004b46:	f001 fb69 	bl	800621c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	2026      	movs	r0, #38	@ 0x26
 8004b50:	f001 fa9b 	bl	800608a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b54:	2026      	movs	r0, #38	@ 0x26
 8004b56:	f001 fab4 	bl	80060c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004b5a:	bf00      	nop
 8004b5c:	3728      	adds	r7, #40	@ 0x28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40004400 	.word	0x40004400
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40020000 	.word	0x40020000

08004b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b74:	bf00      	nop
 8004b76:	e7fd      	b.n	8004b74 <NMI_Handler+0x4>

08004b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <HardFault_Handler+0x4>

08004b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <MemManage_Handler+0x4>

08004b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <BusFault_Handler+0x4>

08004b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <UsageFault_Handler+0x4>

08004b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004baa:	bf00      	nop
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bc6:	f000 fae3 	bl	8005190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  UDS_Timer_1ms_Tick();
 8004bca:	f7fc f973 	bl	8000eb4 <UDS_Timer_1ms_Tick>

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004bd8:	4802      	ldr	r0, [pc, #8]	@ (8004be4 <CAN1_RX0_IRQHandler+0x10>)
 8004bda:	f000 ff56 	bl	8005a8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004bde:	bf00      	nop
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	2001b1f0 	.word	0x2001b1f0

08004be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004bec:	4802      	ldr	r0, [pc, #8]	@ (8004bf8 <USART2_IRQHandler+0x10>)
 8004bee:	f002 fa55 	bl	800709c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	2001b218 	.word	0x2001b218

08004bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c04:	4a14      	ldr	r2, [pc, #80]	@ (8004c58 <_sbrk+0x5c>)
 8004c06:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <_sbrk+0x60>)
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c10:	4b13      	ldr	r3, [pc, #76]	@ (8004c60 <_sbrk+0x64>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c18:	4b11      	ldr	r3, [pc, #68]	@ (8004c60 <_sbrk+0x64>)
 8004c1a:	4a12      	ldr	r2, [pc, #72]	@ (8004c64 <_sbrk+0x68>)
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c1e:	4b10      	ldr	r3, [pc, #64]	@ (8004c60 <_sbrk+0x64>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4413      	add	r3, r2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d207      	bcs.n	8004c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c2c:	f003 fa6a 	bl	8008104 <__errno>
 8004c30:	4603      	mov	r3, r0
 8004c32:	220c      	movs	r2, #12
 8004c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	e009      	b.n	8004c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c3c:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <_sbrk+0x64>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c42:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <_sbrk+0x64>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4413      	add	r3, r2
 8004c4a:	4a05      	ldr	r2, [pc, #20]	@ (8004c60 <_sbrk+0x64>)
 8004c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20020000 	.word	0x20020000
 8004c5c:	00000400 	.word	0x00000400
 8004c60:	2001b280 	.word	0x2001b280
 8004c64:	2001b3d0 	.word	0x2001b3d0

08004c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c6c:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <SystemInit+0x20>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c72:	4a05      	ldr	r2, [pc, #20]	@ (8004c88 <SystemInit+0x20>)
 8004c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <uds_services_handler_disptcher>:
#include "uds_services.h"
#include "uds_services_handler_disptcher.h"


void uds_services_handler_disptcher(uint8_t * data, uint16_t len)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
	uint8_t response[3];
	// Identify the UDS service based on the first byte of the message
	switch (data[0]) {
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	3b10      	subs	r3, #16
 8004c9e:	2b77      	cmp	r3, #119	@ 0x77
 8004ca0:	f200 81e5 	bhi.w	800506e <uds_services_handler_disptcher+0x3e2>
 8004ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <uds_services_handler_disptcher+0x20>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004e8d 	.word	0x08004e8d
 8004cb0:	08004ec3 	.word	0x08004ec3
 8004cb4:	0800506f 	.word	0x0800506f
 8004cb8:	0800506f 	.word	0x0800506f
 8004cbc:	08004fe5 	.word	0x08004fe5
 8004cc0:	0800506f 	.word	0x0800506f
 8004cc4:	0800506f 	.word	0x0800506f
 8004cc8:	0800506f 	.word	0x0800506f
 8004ccc:	0800506f 	.word	0x0800506f
 8004cd0:	08004ffb 	.word	0x08004ffb
 8004cd4:	0800506f 	.word	0x0800506f
 8004cd8:	0800506f 	.word	0x0800506f
 8004cdc:	0800506f 	.word	0x0800506f
 8004ce0:	0800506f 	.word	0x0800506f
 8004ce4:	0800506f 	.word	0x0800506f
 8004ce8:	0800506f 	.word	0x0800506f
 8004cec:	0800506f 	.word	0x0800506f
 8004cf0:	0800506f 	.word	0x0800506f
 8004cf4:	08004fa3 	.word	0x08004fa3
 8004cf8:	0800506f 	.word	0x0800506f
 8004cfc:	0800506f 	.word	0x0800506f
 8004d00:	0800506f 	.word	0x0800506f
 8004d04:	0800506f 	.word	0x0800506f
 8004d08:	08004ef9 	.word	0x08004ef9
 8004d0c:	08004f0f 	.word	0x08004f0f
 8004d10:	0800506f 	.word	0x0800506f
 8004d14:	08004fb9 	.word	0x08004fb9
 8004d18:	0800506f 	.word	0x0800506f
 8004d1c:	0800506f 	.word	0x0800506f
 8004d20:	0800506f 	.word	0x0800506f
 8004d24:	08004fcf 	.word	0x08004fcf
 8004d28:	08005015 	.word	0x08005015
 8004d2c:	0800506f 	.word	0x0800506f
 8004d30:	08005023 	.word	0x08005023
 8004d34:	0800506f 	.word	0x0800506f
 8004d38:	0800506f 	.word	0x0800506f
 8004d3c:	08005031 	.word	0x08005031
 8004d40:	0800503d 	.word	0x0800503d
 8004d44:	08005049 	.word	0x08005049
 8004d48:	08005055 	.word	0x08005055
 8004d4c:	08005063 	.word	0x08005063
 8004d50:	0800506f 	.word	0x0800506f
 8004d54:	0800506f 	.word	0x0800506f
 8004d58:	0800506f 	.word	0x0800506f
 8004d5c:	0800506f 	.word	0x0800506f
 8004d60:	0800506f 	.word	0x0800506f
 8004d64:	08004f1d 	.word	0x08004f1d
 8004d68:	0800506f 	.word	0x0800506f
 8004d6c:	0800506f 	.word	0x0800506f
 8004d70:	0800506f 	.word	0x0800506f
 8004d74:	0800506f 	.word	0x0800506f
 8004d78:	0800506f 	.word	0x0800506f
 8004d7c:	0800506f 	.word	0x0800506f
 8004d80:	0800506f 	.word	0x0800506f
 8004d84:	0800506f 	.word	0x0800506f
 8004d88:	0800506f 	.word	0x0800506f
 8004d8c:	0800506f 	.word	0x0800506f
 8004d90:	0800506f 	.word	0x0800506f
 8004d94:	0800506f 	.word	0x0800506f
 8004d98:	0800506f 	.word	0x0800506f
 8004d9c:	0800506f 	.word	0x0800506f
 8004da0:	0800506f 	.word	0x0800506f
 8004da4:	0800506f 	.word	0x0800506f
 8004da8:	0800506f 	.word	0x0800506f
 8004dac:	0800506f 	.word	0x0800506f
 8004db0:	0800506f 	.word	0x0800506f
 8004db4:	0800506f 	.word	0x0800506f
 8004db8:	0800506f 	.word	0x0800506f
 8004dbc:	0800506f 	.word	0x0800506f
 8004dc0:	0800506f 	.word	0x0800506f
 8004dc4:	0800506f 	.word	0x0800506f
 8004dc8:	0800506f 	.word	0x0800506f
 8004dcc:	0800506f 	.word	0x0800506f
 8004dd0:	0800506f 	.word	0x0800506f
 8004dd4:	0800506f 	.word	0x0800506f
 8004dd8:	0800506f 	.word	0x0800506f
 8004ddc:	0800506f 	.word	0x0800506f
 8004de0:	0800506f 	.word	0x0800506f
 8004de4:	0800506f 	.word	0x0800506f
 8004de8:	0800506f 	.word	0x0800506f
 8004dec:	0800506f 	.word	0x0800506f
 8004df0:	0800506f 	.word	0x0800506f
 8004df4:	0800506f 	.word	0x0800506f
 8004df8:	0800506f 	.word	0x0800506f
 8004dfc:	0800506f 	.word	0x0800506f
 8004e00:	0800506f 	.word	0x0800506f
 8004e04:	0800506f 	.word	0x0800506f
 8004e08:	0800506f 	.word	0x0800506f
 8004e0c:	0800506f 	.word	0x0800506f
 8004e10:	0800506f 	.word	0x0800506f
 8004e14:	0800506f 	.word	0x0800506f
 8004e18:	0800506f 	.word	0x0800506f
 8004e1c:	0800506f 	.word	0x0800506f
 8004e20:	0800506f 	.word	0x0800506f
 8004e24:	0800506f 	.word	0x0800506f
 8004e28:	0800506f 	.word	0x0800506f
 8004e2c:	0800506f 	.word	0x0800506f
 8004e30:	0800506f 	.word	0x0800506f
 8004e34:	0800506f 	.word	0x0800506f
 8004e38:	0800506f 	.word	0x0800506f
 8004e3c:	0800506f 	.word	0x0800506f
 8004e40:	0800506f 	.word	0x0800506f
 8004e44:	0800506f 	.word	0x0800506f
 8004e48:	0800506f 	.word	0x0800506f
 8004e4c:	0800506f 	.word	0x0800506f
 8004e50:	0800506f 	.word	0x0800506f
 8004e54:	0800506f 	.word	0x0800506f
 8004e58:	0800506f 	.word	0x0800506f
 8004e5c:	0800506f 	.word	0x0800506f
 8004e60:	0800506f 	.word	0x0800506f
 8004e64:	0800506f 	.word	0x0800506f
 8004e68:	0800506f 	.word	0x0800506f
 8004e6c:	0800506f 	.word	0x0800506f
 8004e70:	0800506f 	.word	0x0800506f
 8004e74:	0800506f 	.word	0x0800506f
 8004e78:	08004f31 	.word	0x08004f31
 8004e7c:	08004f4b 	.word	0x08004f4b
 8004e80:	08004f61 	.word	0x08004f61
 8004e84:	08004f6f 	.word	0x08004f6f
 8004e88:	08004f89 	.word	0x08004f89
	case UDS_DIAGNOSTIC_SESSION_CONTROL:
		//checking suppressPosRspMsgIndicationBit true or false
		suppress = data[2] & 0x80;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3302      	adds	r3, #2
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	4b7e      	ldr	r3, [pc, #504]	@ (8005094 <uds_services_handler_disptcher+0x408>)
 8004e9a:	701a      	strb	r2, [r3, #0]
		data[2] = data[2] & 0x0F;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	781a      	ldrb	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	f002 020f 	and.w	r2, r2, #15
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
		// Call the function for the Diagnostic Session Control service
		uds_diagnostic_session_control(data[1], len);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	887a      	ldrh	r2, [r7, #2]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb ff50 	bl	8000d60 <uds_diagnostic_session_control>
		break;
 8004ec0:	e0e3      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_ECU_RESET:
		//checking suppressPosRspMsgIndicationBit true or false
		suppress = data[2] & 0x80;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	4b71      	ldr	r3, [pc, #452]	@ (8005094 <uds_services_handler_disptcher+0x408>)
 8004ed0:	701a      	strb	r2, [r3, #0]
		data[2] = data[2] & 0x0F;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	781a      	ldrb	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3302      	adds	r3, #2
 8004edc:	f002 020f 	and.w	r2, r2, #15
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
		// Call the function for the ECU Reset service with the resetType
		uds_ecu_reset(data[2], len);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fc f8f5 	bl	80010e0 <uds_ecu_reset>
		break;
 8004ef6:	e0c8      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_SECURITY_ACCESS:
		// Call the function directly for the Security Access service
		uds_security_access(data[1], &data[2], len);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3301      	adds	r3, #1
 8004efc:	7818      	ldrb	r0, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3302      	adds	r3, #2
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	4619      	mov	r1, r3
 8004f08:	f7fc f988 	bl	800121c <uds_security_access>
		break;
 8004f0c:	e0bd      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_COMMUNICATION_CONTROL:
		uds_communication_control(data[1]);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3301      	adds	r3, #1
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fc fa8d 	bl	8001434 <uds_communication_control>
		break;
 8004f1a:	e0b6      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_TESTER_PRESENT:
		// Call the function for the TesterPresent service
		uds_tester_present(data[1], len);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fc fb43 	bl	80015b4 <uds_tester_present>
		break;
 8004f2e:	e0ac      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_ACCESS_TIMING_PARAMETER:
		// Call the function for the Access Timing Parameter service
		uds_access_timing_parameter(data[1], &data[2], len - 2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3301      	adds	r3, #1
 8004f34:	7818      	ldrb	r0, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	1c99      	adds	r1, r3, #2
 8004f3a:	887b      	ldrh	r3, [r7, #2]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	3b02      	subs	r3, #2
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fc fb86 	bl	8001654 <uds_access_timing_parameter>
		break;
 8004f48:	e09f      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_SECURED_DATA_TRANSMISSION:
		// Call the function for the Secured Data Transmission service
		uds_secured_data_transmission(&data[1], len - 1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	887b      	ldrh	r3, [r7, #2]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7fc fc31 	bl	80017c0 <uds_secured_data_transmission>
		break;
 8004f5e:	e094      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_CONTROL_DTC_SETTING:
		// Call the function for the ControlDTCSetting service
		uds_control_dtc_setting(data[1]);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3301      	adds	r3, #1
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fc fcda 	bl	8001920 <uds_control_dtc_setting>
		break;
 8004f6c:	e08d      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_RESPONSE_ON_EVENT:
		// Call the function for the ResponseOnEvent service
		uds_response_on_event(data[1], &data[2], len - 2);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3301      	adds	r3, #1
 8004f72:	7818      	ldrb	r0, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	1c99      	adds	r1, r3, #2
 8004f78:	887b      	ldrh	r3, [r7, #2]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	3b02      	subs	r3, #2
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	f7fc fd41 	bl	8001a08 <uds_response_on_event>
		break;
 8004f86:	e080      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_LINK_CONTROL:
		// Call the function for the LinkControl service
		uds_link_control(data[1], &data[2], len - 2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	7818      	ldrb	r0, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	1c99      	adds	r1, r3, #2
 8004f92:	887b      	ldrh	r3, [r7, #2]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	3b02      	subs	r3, #2
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fc fe90 	bl	8001cc0 <uds_link_control>
		break;
 8004fa0:	e073      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_READ_DATA_BY_IDENTIFIER:
		// Call the function for the ReadDataByIdentifier service
		uds_read_data_by_identifier(&data[1], len - 1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	887b      	ldrh	r3, [r7, #2]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f7fb fafb 	bl	80005ac <uds_read_data_by_identifier>
		break;
 8004fb6:	e068      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_READ_DATA_BY_PERIODIC_IDENTIFIER:
		// Call the function for the ReadDataByIdentifier service
		uds_read_data_by_periodic_identifier(&data[1], len - 1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f7fb fc66 	bl	8000898 <uds_read_data_by_periodic_identifier>
		break;
 8004fcc:	e05d      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
		// Call the function for the Dynamically Define Data Identifier service
		uds_dynamically_define_data_identifier(data[1], &data[2], len - 2);
		break;
	case UDS_WRITE_DATA_BY_IDENTIFIER:
		// Call the function for the WriteDataByIdentifier service
		uds_write_data_by_identifier(&data[1],len - 1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7fb fd8d 	bl	8000afc <uds_write_data_by_identifier>
		break;
 8004fe2:	e052      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_CLEAR_DIAGNOSTIC_INFORMATION:
		// Call the function for the ClearDiagnosticInformation service
		uds_clear_diagnostic_information(&data[1], len - 1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	887b      	ldrh	r3, [r7, #2]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fd f811 	bl	800201a <uds_clear_diagnostic_information>
		break;
 8004ff8:	e047      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_READ_DTC_INFORMATION:
		// Call the function to manage the ReadDTCInformation service
		uds_read_dtc_information(data[1], &data[2], len - 2);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	7818      	ldrb	r0, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1c99      	adds	r1, r3, #2
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	3b02      	subs	r3, #2
 800500a:	b2db      	uxtb	r3, r3
 800500c:	461a      	mov	r2, r3
 800500e:	f7fd f8ad 	bl	800216c <uds_read_dtc_information>
		break;
 8005012:	e03a      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_INPUT_OUTPUT_CONTROL_BY_IDENTIFIER:
		uds_input_output_control_by_identifier((IOControlRequest_t *)&data[1], NULL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3301      	adds	r3, #1
 8005018:	2100      	movs	r1, #0
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc fed8 	bl	8001dd0 <uds_input_output_control_by_identifier>
		break;
 8005020:	e033      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_ROUTINE_CONTROL:
		uds_routine_control((RoutineControlRequest_t *)&data[1], NULL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3301      	adds	r3, #1
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f7fc ff42 	bl	8001eb2 <uds_routine_control>
		break;
 800502e:	e02c      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_REQUEST_DOWNLOAD:
		uds_request_download((RequestDownload_t *)&data[1]);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3301      	adds	r3, #1
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fee5 	bl	8003e04 <uds_request_download>
		break;
 800503a:	e026      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_REQUEST_UPLOAD:
		uds_request_upload((RequestUpload_t *)&data[1]);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3301      	adds	r3, #1
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe ff51 	bl	8003ee8 <uds_request_upload>
		break;
 8005046:	e020      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_TRANSFER_DATA:
		uds_transfer_data((RequestTransferData_t *)&data[1]);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3301      	adds	r3, #1
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe ff9d 	bl	8003f8c <uds_transfer_data>
		break;
 8005052:	e01a      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_REQUEST_TRANSFER_EXIT:
		uds_request_transfer_exit((RequestTransferExit_t *)&data[1], NULL);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3301      	adds	r3, #1
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff f816 	bl	800408c <uds_request_transfer_exit>
		break;
 8005060:	e013      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	case UDS_REQUEST_FILE_TRANSFER:
		uds_request_file_transfer((RequestFileTransfer_t *)&data[1]);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3301      	adds	r3, #1
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff f871 	bl	800414e <uds_request_file_transfer>
		break;
 800506c:	e00d      	b.n	800508a <uds_services_handler_disptcher+0x3fe>
	default:
		// Complete the negative response message for an unsupported service.
		response[0] = UDS_NEGATIVE_RESPONSE;         // Response negative require
 800506e:	237f      	movs	r3, #127	@ 0x7f
 8005070:	733b      	strb	r3, [r7, #12]
		response[1] = data[0];  // Service non support
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	737b      	strb	r3, [r7, #13]
		response[2] = NRC_SERVICE_NOT_SUPPORTED;         // Code NRC (ServiceNotSupported)
 8005078:	2311      	movs	r3, #17
 800507a:	73bb      	strb	r3, [r7, #14]
		// Send the negative response message with CAN
		send_can_message(response, 3);
 800507c:	f107 030c 	add.w	r3, r7, #12
 8005080:	2103      	movs	r1, #3
 8005082:	4618      	mov	r0, r3
 8005084:	f7fb fe34 	bl	8000cf0 <send_can_message>
		break;
 8005088:	bf00      	nop
	}
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	2001b27c 	.word	0x2001b27c

08005098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80050d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800509c:	f7ff fde4 	bl	8004c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050a0:	480c      	ldr	r0, [pc, #48]	@ (80050d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050a2:	490d      	ldr	r1, [pc, #52]	@ (80050d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050a4:	4a0d      	ldr	r2, [pc, #52]	@ (80050dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050a8:	e002      	b.n	80050b0 <LoopCopyDataInit>

080050aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ae:	3304      	adds	r3, #4

080050b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050b4:	d3f9      	bcc.n	80050aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050b6:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050b8:	4c0a      	ldr	r4, [pc, #40]	@ (80050e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80050ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050bc:	e001      	b.n	80050c2 <LoopFillZerobss>

080050be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050c0:	3204      	adds	r2, #4

080050c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050c4:	d3fb      	bcc.n	80050be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050c6:	f003 f823 	bl	8008110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ca:	f7ff fa4b 	bl	8004564 <main>
  bx  lr    
 80050ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050d8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80050dc:	08008970 	.word	0x08008970
  ldr r2, =_sbss
 80050e0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80050e4:	2001b3d0 	.word	0x2001b3d0

080050e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050e8:	e7fe      	b.n	80050e8 <ADC_IRQHandler>
	...

080050ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050f0:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <HAL_Init+0x40>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a0d      	ldr	r2, [pc, #52]	@ (800512c <HAL_Init+0x40>)
 80050f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050fc:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <HAL_Init+0x40>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0a      	ldr	r2, [pc, #40]	@ (800512c <HAL_Init+0x40>)
 8005102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005108:	4b08      	ldr	r3, [pc, #32]	@ (800512c <HAL_Init+0x40>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a07      	ldr	r2, [pc, #28]	@ (800512c <HAL_Init+0x40>)
 800510e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005114:	2003      	movs	r0, #3
 8005116:	f000 ffad 	bl	8006074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800511a:	2000      	movs	r0, #0
 800511c:	f000 f808 	bl	8005130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005120:	f7ff fc5e 	bl	80049e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40023c00 	.word	0x40023c00

08005130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005138:	4b12      	ldr	r3, [pc, #72]	@ (8005184 <HAL_InitTick+0x54>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b12      	ldr	r3, [pc, #72]	@ (8005188 <HAL_InitTick+0x58>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	4619      	mov	r1, r3
 8005142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005146:	fbb3 f3f1 	udiv	r3, r3, r1
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	4618      	mov	r0, r3
 8005150:	f000 ffc5 	bl	80060de <HAL_SYSTICK_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e00e      	b.n	800517c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b0f      	cmp	r3, #15
 8005162:	d80a      	bhi.n	800517a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005164:	2200      	movs	r2, #0
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	f000 ff8d 	bl	800608a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005170:	4a06      	ldr	r2, [pc, #24]	@ (800518c <HAL_InitTick+0x5c>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000044 	.word	0x20000044
 8005188:	2000004c 	.word	0x2000004c
 800518c:	20000048 	.word	0x20000048

08005190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005194:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_IncTick+0x20>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	4b06      	ldr	r3, [pc, #24]	@ (80051b4 <HAL_IncTick+0x24>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4413      	add	r3, r2
 80051a0:	4a04      	ldr	r2, [pc, #16]	@ (80051b4 <HAL_IncTick+0x24>)
 80051a2:	6013      	str	r3, [r2, #0]
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	2000004c 	.word	0x2000004c
 80051b4:	2001b284 	.word	0x2001b284

080051b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return uwTick;
 80051bc:	4b03      	ldr	r3, [pc, #12]	@ (80051cc <HAL_GetTick+0x14>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	2001b284 	.word	0x2001b284

080051d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0ed      	b.n	80053be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fc1e 	bl	8004a30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005204:	f7ff ffd8 	bl	80051b8 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800520a:	e012      	b.n	8005232 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800520c:	f7ff ffd4 	bl	80051b8 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b0a      	cmp	r3, #10
 8005218:	d90b      	bls.n	8005232 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2205      	movs	r2, #5
 800522a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0c5      	b.n	80053be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0e5      	beq.n	800520c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0202 	bic.w	r2, r2, #2
 800524e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005250:	f7ff ffb2 	bl	80051b8 <HAL_GetTick>
 8005254:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005256:	e012      	b.n	800527e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005258:	f7ff ffae 	bl	80051b8 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b0a      	cmp	r3, #10
 8005264:	d90b      	bls.n	800527e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2205      	movs	r2, #5
 8005276:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e09f      	b.n	80053be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	7e1b      	ldrb	r3, [r3, #24]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d108      	bne.n	80052a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e007      	b.n	80052b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7e5b      	ldrb	r3, [r3, #25]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d108      	bne.n	80052d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e007      	b.n	80052e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7e9b      	ldrb	r3, [r3, #26]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d108      	bne.n	80052fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0220 	orr.w	r2, r2, #32
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e007      	b.n	800530a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0220 	bic.w	r2, r2, #32
 8005308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	7edb      	ldrb	r3, [r3, #27]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d108      	bne.n	8005324 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0210 	bic.w	r2, r2, #16
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e007      	b.n	8005334 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0210 	orr.w	r2, r2, #16
 8005332:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7f1b      	ldrb	r3, [r3, #28]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d108      	bne.n	800534e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0208 	orr.w	r2, r2, #8
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e007      	b.n	800535e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0208 	bic.w	r2, r2, #8
 800535c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	7f5b      	ldrb	r3, [r3, #29]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d108      	bne.n	8005378 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0204 	orr.w	r2, r2, #4
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e007      	b.n	8005388 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0204 	bic.w	r2, r2, #4
 8005386:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	ea42 0103 	orr.w	r1, r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	1e5a      	subs	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80053da:	7dfb      	ldrb	r3, [r7, #23]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d003      	beq.n	80053e8 <HAL_CAN_ConfigFilter+0x20>
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	f040 80be 	bne.w	8005564 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80053e8:	4b65      	ldr	r3, [pc, #404]	@ (8005580 <HAL_CAN_ConfigFilter+0x1b8>)
 80053ea:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053f2:	f043 0201 	orr.w	r2, r3, #1
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005402:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	431a      	orrs	r2, r3
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2201      	movs	r2, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d123      	bne.n	8005492 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	43db      	mvns	r3, r3
 8005454:	401a      	ands	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800546c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	3248      	adds	r2, #72	@ 0x48
 8005472:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005486:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005488:	6939      	ldr	r1, [r7, #16]
 800548a:	3348      	adds	r3, #72	@ 0x48
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	440b      	add	r3, r1
 8005490:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d122      	bne.n	80054e0 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80054ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	3248      	adds	r2, #72	@ 0x48
 80054c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	3348      	adds	r3, #72	@ 0x48
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	440b      	add	r3, r1
 80054de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	43db      	mvns	r3, r3
 80054f2:	401a      	ands	r2, r3
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80054fa:	e007      	b.n	800550c <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	431a      	orrs	r2, r3
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d109      	bne.n	8005528 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	43db      	mvns	r3, r3
 800551e:	401a      	ands	r2, r3
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005526:	e007      	b.n	8005538 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	431a      	orrs	r2, r3
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	431a      	orrs	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005556:	f023 0201 	bic.w	r2, r3, #1
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	e006      	b.n	8005572 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40006400 	.word	0x40006400

08005584 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d12e      	bne.n	80055f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055b0:	f7ff fe02 	bl	80051b8 <HAL_GetTick>
 80055b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055b6:	e012      	b.n	80055de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80055b8:	f7ff fdfe 	bl	80051b8 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b0a      	cmp	r3, #10
 80055c4:	d90b      	bls.n	80055de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2205      	movs	r2, #5
 80055d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e012      	b.n	8005604 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e5      	bne.n	80055b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e006      	b.n	8005604 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
  }
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	@ 0x24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005620:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d003      	beq.n	8005638 <HAL_CAN_AddTxMessage+0x2c>
 8005630:	7ffb      	ldrb	r3, [r7, #31]
 8005632:	2b02      	cmp	r3, #2
 8005634:	f040 80ad 	bne.w	8005792 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8095 	beq.w	8005782 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	0e1b      	lsrs	r3, r3, #24
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005662:	2201      	movs	r2, #1
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	409a      	lsls	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10d      	bne.n	8005690 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6809      	ldr	r1, [r1, #0]
 8005682:	431a      	orrs	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3318      	adds	r3, #24
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	440b      	add	r3, r1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e00f      	b.n	80056b0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800569a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80056a4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	3318      	adds	r3, #24
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	440b      	add	r3, r1
 80056ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	3318      	adds	r3, #24
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	440b      	add	r3, r1
 80056c0:	3304      	adds	r3, #4
 80056c2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	7d1b      	ldrb	r3, [r3, #20]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d111      	bne.n	80056f0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	3318      	adds	r3, #24
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	4413      	add	r3, r2
 80056d8:	3304      	adds	r3, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	6811      	ldr	r1, [r2, #0]
 80056e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	3318      	adds	r3, #24
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	440b      	add	r3, r1
 80056ec:	3304      	adds	r3, #4
 80056ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3307      	adds	r3, #7
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	061a      	lsls	r2, r3, #24
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3306      	adds	r3, #6
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3305      	adds	r3, #5
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	4313      	orrs	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	3204      	adds	r2, #4
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	4610      	mov	r0, r2
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	6811      	ldr	r1, [r2, #0]
 8005718:	ea43 0200 	orr.w	r2, r3, r0
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	440b      	add	r3, r1
 8005722:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005726:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3303      	adds	r3, #3
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	061a      	lsls	r2, r3, #24
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3302      	adds	r3, #2
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3301      	adds	r3, #1
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	4313      	orrs	r3, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	4610      	mov	r0, r2
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	6811      	ldr	r1, [r2, #0]
 800574e:	ea43 0200 	orr.w	r2, r3, r0
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	440b      	add	r3, r1
 8005758:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800575c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	3318      	adds	r3, #24
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	4413      	add	r3, r2
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	6811      	ldr	r1, [r2, #0]
 8005770:	f043 0201 	orr.w	r2, r3, #1
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3318      	adds	r3, #24
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	440b      	add	r3, r1
 800577c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e00e      	b.n	80057a0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e006      	b.n	80057a0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005796:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3724      	adds	r7, #36	@ 0x24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057c0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d003      	beq.n	80057d0 <HAL_CAN_GetRxMessage+0x24>
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	f040 8103 	bne.w	80059d6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10e      	bne.n	80057f4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d116      	bne.n	8005812 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0f7      	b.n	80059e4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d107      	bne.n	8005812 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e0e8      	b.n	80059e4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	331b      	adds	r3, #27
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	4413      	add	r3, r2
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0204 	and.w	r2, r3, #4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10c      	bne.n	800584a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	331b      	adds	r3, #27
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	4413      	add	r3, r2
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	0d5b      	lsrs	r3, r3, #21
 8005840:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e00b      	b.n	8005862 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	331b      	adds	r3, #27
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	4413      	add	r3, r2
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	08db      	lsrs	r3, r3, #3
 800585a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	331b      	adds	r3, #27
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	4413      	add	r3, r2
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0202 	and.w	r2, r3, #2
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	331b      	adds	r3, #27
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	4413      	add	r3, r2
 8005884:	3304      	adds	r3, #4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2208      	movs	r2, #8
 8005894:	611a      	str	r2, [r3, #16]
 8005896:	e00b      	b.n	80058b0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	331b      	adds	r3, #27
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	4413      	add	r3, r2
 80058a4:	3304      	adds	r3, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 020f 	and.w	r2, r3, #15
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	331b      	adds	r3, #27
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	4413      	add	r3, r2
 80058bc:	3304      	adds	r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	0a1b      	lsrs	r3, r3, #8
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	331b      	adds	r3, #27
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	4413      	add	r3, r2
 80058d4:	3304      	adds	r3, #4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	4413      	add	r3, r2
 8005900:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	0a1a      	lsrs	r2, r3, #8
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	4413      	add	r3, r2
 800591a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	0c1a      	lsrs	r2, r3, #16
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	3302      	adds	r3, #2
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	4413      	add	r3, r2
 8005934:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	0e1a      	lsrs	r2, r3, #24
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	3303      	adds	r3, #3
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	4413      	add	r3, r2
 800594e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	3304      	adds	r3, #4
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	4413      	add	r3, r2
 8005966:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	0a1a      	lsrs	r2, r3, #8
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	3305      	adds	r3, #5
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	4413      	add	r3, r2
 8005980:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	0c1a      	lsrs	r2, r3, #16
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	3306      	adds	r3, #6
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	4413      	add	r3, r2
 800599a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	0e1a      	lsrs	r2, r3, #24
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	3307      	adds	r3, #7
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d108      	bne.n	80059c2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0220 	orr.w	r2, r2, #32
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e007      	b.n	80059d2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0220 	orr.w	r2, r2, #32
 80059d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e006      	b.n	80059e4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
  }
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a00:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d002      	beq.n	8005a0e <HAL_CAN_ActivateNotification+0x1e>
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d109      	bne.n	8005a22 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6959      	ldr	r1, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e006      	b.n	8005a30 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
  }
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a4c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d002      	beq.n	8005a5a <HAL_CAN_DeactivateNotification+0x1e>
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d10a      	bne.n	8005a70 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6959      	ldr	r1, [r3, #20]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	43da      	mvns	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	400a      	ands	r2, r1
 8005a6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e006      	b.n	8005a7e <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b08a      	sub	sp, #40	@ 0x28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d07c      	beq.n	8005bca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d023      	beq.n	8005b22 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fe ff51 	bl	8004994 <HAL_CAN_TxMailbox0CompleteCallback>
 8005af2:	e016      	b.n	8005b22 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b06:	e00c      	b.n	8005b22 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d004      	beq.n	8005b1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1a:	e002      	b.n	8005b22 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f97f 	bl	8005e20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d024      	beq.n	8005b76 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f959 	bl	8005df8 <HAL_CAN_TxMailbox1CompleteCallback>
 8005b46:	e016      	b.n	8005b76 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d004      	beq.n	8005b5c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b5a:	e00c      	b.n	8005b76 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6e:	e002      	b.n	8005b76 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f95f 	bl	8005e34 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d024      	beq.n	8005bca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f939 	bl	8005e0c <HAL_CAN_TxMailbox2CompleteCallback>
 8005b9a:	e016      	b.n	8005bca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bae:	e00c      	b.n	8005bca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc2:	e002      	b.n	8005bca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f93f 	bl	8005e48 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00c      	beq.n	8005bee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2210      	movs	r2, #16
 8005bec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2208      	movs	r2, #8
 8005c08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f926 	bl	8005e5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fe fe0f 	bl	800484c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00c      	beq.n	8005c52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2210      	movs	r2, #16
 8005c50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d006      	beq.n	8005c74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2208      	movs	r2, #8
 8005c6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f908 	bl	8005e84 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8ef 	bl	8005e70 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d006      	beq.n	8005cb4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2210      	movs	r2, #16
 8005cac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f8f2 	bl	8005e98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f8eb 	bl	8005eac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d07b      	beq.n	8005dd8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d072      	beq.n	8005dd0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	f043 0302 	orr.w	r3, r3, #2
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	f043 0304 	orr.w	r3, r3, #4
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d043      	beq.n	8005dd0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03e      	beq.n	8005dd0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d58:	2b60      	cmp	r3, #96	@ 0x60
 8005d5a:	d02b      	beq.n	8005db4 <HAL_CAN_IRQHandler+0x32a>
 8005d5c:	2b60      	cmp	r3, #96	@ 0x60
 8005d5e:	d82e      	bhi.n	8005dbe <HAL_CAN_IRQHandler+0x334>
 8005d60:	2b50      	cmp	r3, #80	@ 0x50
 8005d62:	d022      	beq.n	8005daa <HAL_CAN_IRQHandler+0x320>
 8005d64:	2b50      	cmp	r3, #80	@ 0x50
 8005d66:	d82a      	bhi.n	8005dbe <HAL_CAN_IRQHandler+0x334>
 8005d68:	2b40      	cmp	r3, #64	@ 0x40
 8005d6a:	d019      	beq.n	8005da0 <HAL_CAN_IRQHandler+0x316>
 8005d6c:	2b40      	cmp	r3, #64	@ 0x40
 8005d6e:	d826      	bhi.n	8005dbe <HAL_CAN_IRQHandler+0x334>
 8005d70:	2b30      	cmp	r3, #48	@ 0x30
 8005d72:	d010      	beq.n	8005d96 <HAL_CAN_IRQHandler+0x30c>
 8005d74:	2b30      	cmp	r3, #48	@ 0x30
 8005d76:	d822      	bhi.n	8005dbe <HAL_CAN_IRQHandler+0x334>
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d002      	beq.n	8005d82 <HAL_CAN_IRQHandler+0x2f8>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d005      	beq.n	8005d8c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005d80:	e01d      	b.n	8005dbe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	f043 0308 	orr.w	r3, r3, #8
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d8a:	e019      	b.n	8005dc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	f043 0310 	orr.w	r3, r3, #16
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d94:	e014      	b.n	8005dc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	f043 0320 	orr.w	r3, r3, #32
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d9e:	e00f      	b.n	8005dc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005da8:	e00a      	b.n	8005dc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005db2:	e005      	b.n	8005dc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005dbc:	e000      	b.n	8005dc0 <HAL_CAN_IRQHandler+0x336>
            break;
 8005dbe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005dce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f868 	bl	8005ec0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005df0:	bf00      	nop
 8005df2:	3728      	adds	r7, #40	@ 0x28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <__NVIC_SetPriorityGrouping>:
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f18 <__NVIC_SetPriorityGrouping+0x44>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f06:	4a04      	ldr	r2, [pc, #16]	@ (8005f18 <__NVIC_SetPriorityGrouping+0x44>)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	60d3      	str	r3, [r2, #12]
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	e000ed00 	.word	0xe000ed00

08005f1c <__NVIC_GetPriorityGrouping>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f20:	4b04      	ldr	r3, [pc, #16]	@ (8005f34 <__NVIC_GetPriorityGrouping+0x18>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	0a1b      	lsrs	r3, r3, #8
 8005f26:	f003 0307 	and.w	r3, r3, #7
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	e000ed00 	.word	0xe000ed00

08005f38 <__NVIC_EnableIRQ>:
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	db0b      	blt.n	8005f62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	f003 021f 	and.w	r2, r3, #31
 8005f50:	4907      	ldr	r1, [pc, #28]	@ (8005f70 <__NVIC_EnableIRQ+0x38>)
 8005f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	2001      	movs	r0, #1
 8005f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	e000e100 	.word	0xe000e100

08005f74 <__NVIC_SetPriority>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	6039      	str	r1, [r7, #0]
 8005f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	db0a      	blt.n	8005f9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	490c      	ldr	r1, [pc, #48]	@ (8005fc0 <__NVIC_SetPriority+0x4c>)
 8005f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f92:	0112      	lsls	r2, r2, #4
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	440b      	add	r3, r1
 8005f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f9c:	e00a      	b.n	8005fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	4908      	ldr	r1, [pc, #32]	@ (8005fc4 <__NVIC_SetPriority+0x50>)
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	3b04      	subs	r3, #4
 8005fac:	0112      	lsls	r2, r2, #4
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	761a      	strb	r2, [r3, #24]
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	e000e100 	.word	0xe000e100
 8005fc4:	e000ed00 	.word	0xe000ed00

08005fc8 <NVIC_EncodePriority>:
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b089      	sub	sp, #36	@ 0x24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f1c3 0307 	rsb	r3, r3, #7
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	bf28      	it	cs
 8005fe6:	2304      	movcs	r3, #4
 8005fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3304      	adds	r3, #4
 8005fee:	2b06      	cmp	r3, #6
 8005ff0:	d902      	bls.n	8005ff8 <NVIC_EncodePriority+0x30>
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3b03      	subs	r3, #3
 8005ff6:	e000      	b.n	8005ffa <NVIC_EncodePriority+0x32>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43da      	mvns	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	401a      	ands	r2, r3
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006010:	f04f 31ff 	mov.w	r1, #4294967295
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	fa01 f303 	lsl.w	r3, r1, r3
 800601a:	43d9      	mvns	r1, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006020:	4313      	orrs	r3, r2
}
 8006022:	4618      	mov	r0, r3
 8006024:	3724      	adds	r7, #36	@ 0x24
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3b01      	subs	r3, #1
 800603c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006040:	d301      	bcc.n	8006046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006042:	2301      	movs	r3, #1
 8006044:	e00f      	b.n	8006066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006046:	4a0a      	ldr	r2, [pc, #40]	@ (8006070 <SysTick_Config+0x40>)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3b01      	subs	r3, #1
 800604c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800604e:	210f      	movs	r1, #15
 8006050:	f04f 30ff 	mov.w	r0, #4294967295
 8006054:	f7ff ff8e 	bl	8005f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <SysTick_Config+0x40>)
 800605a:	2200      	movs	r2, #0
 800605c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800605e:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <SysTick_Config+0x40>)
 8006060:	2207      	movs	r2, #7
 8006062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	e000e010 	.word	0xe000e010

08006074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff29 	bl	8005ed4 <__NVIC_SetPriorityGrouping>
}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	4603      	mov	r3, r0
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800609c:	f7ff ff3e 	bl	8005f1c <__NVIC_GetPriorityGrouping>
 80060a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	6978      	ldr	r0, [r7, #20]
 80060a8:	f7ff ff8e 	bl	8005fc8 <NVIC_EncodePriority>
 80060ac:	4602      	mov	r2, r0
 80060ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff ff5d 	bl	8005f74 <__NVIC_SetPriority>
}
 80060ba:	bf00      	nop
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	4603      	mov	r3, r0
 80060ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff ff31 	bl	8005f38 <__NVIC_EnableIRQ>
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff ffa2 	bl	8006030 <SysTick_Config>
 80060ec:	4603      	mov	r3, r0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006104:	f7ff f858 	bl	80051b8 <HAL_GetTick>
 8006108:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d008      	beq.n	8006128 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2280      	movs	r2, #128	@ 0x80
 800611a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e052      	b.n	80061ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0216 	bic.w	r2, r2, #22
 8006136:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006146:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <HAL_DMA_Abort+0x62>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0208 	bic.w	r2, r2, #8
 8006166:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006178:	e013      	b.n	80061a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800617a:	f7ff f81d 	bl	80051b8 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b05      	cmp	r3, #5
 8006186:	d90c      	bls.n	80061a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2203      	movs	r2, #3
 8006192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e015      	b.n	80061ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e4      	bne.n	800617a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b4:	223f      	movs	r2, #63	@ 0x3f
 80061b6:	409a      	lsls	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d004      	beq.n	80061f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2280      	movs	r2, #128	@ 0x80
 80061ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e00c      	b.n	800620e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2205      	movs	r2, #5
 80061f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	@ 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e16b      	b.n	8006510 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006238:	2201      	movs	r2, #1
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4013      	ands	r3, r2
 800624a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	429a      	cmp	r2, r3
 8006252:	f040 815a 	bne.w	800650a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d005      	beq.n	800626e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800626a:	2b02      	cmp	r3, #2
 800626c:	d130      	bne.n	80062d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	2203      	movs	r2, #3
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	43db      	mvns	r3, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4013      	ands	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	4313      	orrs	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062a4:	2201      	movs	r2, #1
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4013      	ands	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 0201 	and.w	r2, r3, #1
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d017      	beq.n	800630c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	2203      	movs	r2, #3
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4313      	orrs	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d123      	bne.n	8006360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	08da      	lsrs	r2, r3, #3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3208      	adds	r2, #8
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	220f      	movs	r2, #15
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4013      	ands	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	4313      	orrs	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	08da      	lsrs	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3208      	adds	r2, #8
 800635a:	69b9      	ldr	r1, [r7, #24]
 800635c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	2203      	movs	r2, #3
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 0203 	and.w	r2, r3, #3
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80b4 	beq.w	800650a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	4b60      	ldr	r3, [pc, #384]	@ (8006528 <HAL_GPIO_Init+0x30c>)
 80063a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063aa:	4a5f      	ldr	r2, [pc, #380]	@ (8006528 <HAL_GPIO_Init+0x30c>)
 80063ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80063b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006528 <HAL_GPIO_Init+0x30c>)
 80063b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063be:	4a5b      	ldr	r2, [pc, #364]	@ (800652c <HAL_GPIO_Init+0x310>)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	3302      	adds	r3, #2
 80063c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	220f      	movs	r2, #15
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a52      	ldr	r2, [pc, #328]	@ (8006530 <HAL_GPIO_Init+0x314>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d02b      	beq.n	8006442 <HAL_GPIO_Init+0x226>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a51      	ldr	r2, [pc, #324]	@ (8006534 <HAL_GPIO_Init+0x318>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d025      	beq.n	800643e <HAL_GPIO_Init+0x222>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a50      	ldr	r2, [pc, #320]	@ (8006538 <HAL_GPIO_Init+0x31c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01f      	beq.n	800643a <HAL_GPIO_Init+0x21e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a4f      	ldr	r2, [pc, #316]	@ (800653c <HAL_GPIO_Init+0x320>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d019      	beq.n	8006436 <HAL_GPIO_Init+0x21a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a4e      	ldr	r2, [pc, #312]	@ (8006540 <HAL_GPIO_Init+0x324>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_GPIO_Init+0x216>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a4d      	ldr	r2, [pc, #308]	@ (8006544 <HAL_GPIO_Init+0x328>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00d      	beq.n	800642e <HAL_GPIO_Init+0x212>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a4c      	ldr	r2, [pc, #304]	@ (8006548 <HAL_GPIO_Init+0x32c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <HAL_GPIO_Init+0x20e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a4b      	ldr	r2, [pc, #300]	@ (800654c <HAL_GPIO_Init+0x330>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d101      	bne.n	8006426 <HAL_GPIO_Init+0x20a>
 8006422:	2307      	movs	r3, #7
 8006424:	e00e      	b.n	8006444 <HAL_GPIO_Init+0x228>
 8006426:	2308      	movs	r3, #8
 8006428:	e00c      	b.n	8006444 <HAL_GPIO_Init+0x228>
 800642a:	2306      	movs	r3, #6
 800642c:	e00a      	b.n	8006444 <HAL_GPIO_Init+0x228>
 800642e:	2305      	movs	r3, #5
 8006430:	e008      	b.n	8006444 <HAL_GPIO_Init+0x228>
 8006432:	2304      	movs	r3, #4
 8006434:	e006      	b.n	8006444 <HAL_GPIO_Init+0x228>
 8006436:	2303      	movs	r3, #3
 8006438:	e004      	b.n	8006444 <HAL_GPIO_Init+0x228>
 800643a:	2302      	movs	r3, #2
 800643c:	e002      	b.n	8006444 <HAL_GPIO_Init+0x228>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <HAL_GPIO_Init+0x228>
 8006442:	2300      	movs	r3, #0
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	f002 0203 	and.w	r2, r2, #3
 800644a:	0092      	lsls	r2, r2, #2
 800644c:	4093      	lsls	r3, r2
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006454:	4935      	ldr	r1, [pc, #212]	@ (800652c <HAL_GPIO_Init+0x310>)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	3302      	adds	r3, #2
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006462:	4b3b      	ldr	r3, [pc, #236]	@ (8006550 <HAL_GPIO_Init+0x334>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	43db      	mvns	r3, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4013      	ands	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006486:	4a32      	ldr	r2, [pc, #200]	@ (8006550 <HAL_GPIO_Init+0x334>)
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800648c:	4b30      	ldr	r3, [pc, #192]	@ (8006550 <HAL_GPIO_Init+0x334>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064b0:	4a27      	ldr	r2, [pc, #156]	@ (8006550 <HAL_GPIO_Init+0x334>)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064b6:	4b26      	ldr	r3, [pc, #152]	@ (8006550 <HAL_GPIO_Init+0x334>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064da:	4a1d      	ldr	r2, [pc, #116]	@ (8006550 <HAL_GPIO_Init+0x334>)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <HAL_GPIO_Init+0x334>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006504:	4a12      	ldr	r2, [pc, #72]	@ (8006550 <HAL_GPIO_Init+0x334>)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b0f      	cmp	r3, #15
 8006514:	f67f ae90 	bls.w	8006238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	3724      	adds	r7, #36	@ 0x24
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40023800 	.word	0x40023800
 800652c:	40013800 	.word	0x40013800
 8006530:	40020000 	.word	0x40020000
 8006534:	40020400 	.word	0x40020400
 8006538:	40020800 	.word	0x40020800
 800653c:	40020c00 	.word	0x40020c00
 8006540:	40021000 	.word	0x40021000
 8006544:	40021400 	.word	0x40021400
 8006548:	40021800 	.word	0x40021800
 800654c:	40021c00 	.word	0x40021c00
 8006550:	40013c00 	.word	0x40013c00

08006554 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8006560:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <HAL_PWR_EnterSTOPMode+0x58>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f023 0203 	bic.w	r2, r3, #3
 8006568:	4910      	ldr	r1, [pc, #64]	@ (80065ac <HAL_PWR_EnterSTOPMode+0x58>)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4313      	orrs	r3, r2
 800656e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006570:	4b0f      	ldr	r3, [pc, #60]	@ (80065b0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	4a0e      	ldr	r2, [pc, #56]	@ (80065b0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8006576:	f043 0304 	orr.w	r3, r3, #4
 800657a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8006582:	bf30      	wfi
 8006584:	e005      	b.n	8006592 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	2b03      	cmp	r3, #3
 800658a:	d001      	beq.n	8006590 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 800658c:	bf40      	sev
      __WFE();
 800658e:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8006590:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8006592:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	4a06      	ldr	r2, [pc, #24]	@ (80065b0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8006598:	f023 0304 	bic.w	r3, r3, #4
 800659c:	6113      	str	r3, [r2, #16]
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40007000 	.word	0x40007000
 80065b0:	e000ed00 	.word	0xe000ed00

080065b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e267      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d075      	beq.n	80066be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065d2:	4b88      	ldr	r3, [pc, #544]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d00c      	beq.n	80065f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065de:	4b85      	ldr	r3, [pc, #532]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d112      	bne.n	8006610 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ea:	4b82      	ldr	r3, [pc, #520]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065f6:	d10b      	bne.n	8006610 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f8:	4b7e      	ldr	r3, [pc, #504]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05b      	beq.n	80066bc <HAL_RCC_OscConfig+0x108>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d157      	bne.n	80066bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e242      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006618:	d106      	bne.n	8006628 <HAL_RCC_OscConfig+0x74>
 800661a:	4b76      	ldr	r3, [pc, #472]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a75      	ldr	r2, [pc, #468]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e01d      	b.n	8006664 <HAL_RCC_OscConfig+0xb0>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006630:	d10c      	bne.n	800664c <HAL_RCC_OscConfig+0x98>
 8006632:	4b70      	ldr	r3, [pc, #448]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a6f      	ldr	r2, [pc, #444]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4b6d      	ldr	r3, [pc, #436]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6c      	ldr	r2, [pc, #432]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e00b      	b.n	8006664 <HAL_RCC_OscConfig+0xb0>
 800664c:	4b69      	ldr	r3, [pc, #420]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a68      	ldr	r2, [pc, #416]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	4b66      	ldr	r3, [pc, #408]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a65      	ldr	r2, [pc, #404]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 800665e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d013      	beq.n	8006694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fe fda4 	bl	80051b8 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006674:	f7fe fda0 	bl	80051b8 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	@ 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e207      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006686:	4b5b      	ldr	r3, [pc, #364]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0xc0>
 8006692:	e014      	b.n	80066be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fe fd90 	bl	80051b8 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800669c:	f7fe fd8c 	bl	80051b8 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	@ 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e1f3      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ae:	4b51      	ldr	r3, [pc, #324]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0xe8>
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d063      	beq.n	8006792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066ca:	4b4a      	ldr	r3, [pc, #296]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d6:	4b47      	ldr	r3, [pc, #284]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d11c      	bne.n	800671c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066e2:	4b44      	ldr	r3, [pc, #272]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ee:	4b41      	ldr	r3, [pc, #260]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x152>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e1c7      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	4b3b      	ldr	r3, [pc, #236]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4937      	ldr	r1, [pc, #220]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671a:	e03a      	b.n	8006792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006724:	4b34      	ldr	r3, [pc, #208]	@ (80067f8 <HAL_RCC_OscConfig+0x244>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fe fd45 	bl	80051b8 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006732:	f7fe fd41 	bl	80051b8 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e1a8      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006744:	4b2b      	ldr	r3, [pc, #172]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006750:	4b28      	ldr	r3, [pc, #160]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	4925      	ldr	r1, [pc, #148]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006760:	4313      	orrs	r3, r2
 8006762:	600b      	str	r3, [r1, #0]
 8006764:	e015      	b.n	8006792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006766:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <HAL_RCC_OscConfig+0x244>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fe fd24 	bl	80051b8 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006774:	f7fe fd20 	bl	80051b8 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e187      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006786:	4b1b      	ldr	r3, [pc, #108]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d036      	beq.n	800680c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d016      	beq.n	80067d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a6:	4b15      	ldr	r3, [pc, #84]	@ (80067fc <HAL_RCC_OscConfig+0x248>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ac:	f7fe fd04 	bl	80051b8 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b4:	f7fe fd00 	bl	80051b8 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e167      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c6:	4b0b      	ldr	r3, [pc, #44]	@ (80067f4 <HAL_RCC_OscConfig+0x240>)
 80067c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x200>
 80067d2:	e01b      	b.n	800680c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d4:	4b09      	ldr	r3, [pc, #36]	@ (80067fc <HAL_RCC_OscConfig+0x248>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067da:	f7fe fced 	bl	80051b8 <HAL_GetTick>
 80067de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e0:	e00e      	b.n	8006800 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e2:	f7fe fce9 	bl	80051b8 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d907      	bls.n	8006800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e150      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
 80067f4:	40023800 	.word	0x40023800
 80067f8:	42470000 	.word	0x42470000
 80067fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006800:	4b88      	ldr	r3, [pc, #544]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1ea      	bne.n	80067e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8097 	beq.w	8006948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681e:	4b81      	ldr	r3, [pc, #516]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10f      	bne.n	800684a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	4a7c      	ldr	r2, [pc, #496]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006838:	6413      	str	r3, [r2, #64]	@ 0x40
 800683a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684a:	4b77      	ldr	r3, [pc, #476]	@ (8006a28 <HAL_RCC_OscConfig+0x474>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006852:	2b00      	cmp	r3, #0
 8006854:	d118      	bne.n	8006888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006856:	4b74      	ldr	r3, [pc, #464]	@ (8006a28 <HAL_RCC_OscConfig+0x474>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a73      	ldr	r2, [pc, #460]	@ (8006a28 <HAL_RCC_OscConfig+0x474>)
 800685c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006862:	f7fe fca9 	bl	80051b8 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686a:	f7fe fca5 	bl	80051b8 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e10c      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687c:	4b6a      	ldr	r3, [pc, #424]	@ (8006a28 <HAL_RCC_OscConfig+0x474>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d106      	bne.n	800689e <HAL_RCC_OscConfig+0x2ea>
 8006890:	4b64      	ldr	r3, [pc, #400]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006894:	4a63      	ldr	r2, [pc, #396]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	@ 0x70
 800689c:	e01c      	b.n	80068d8 <HAL_RCC_OscConfig+0x324>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCC_OscConfig+0x30c>
 80068a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068aa:	4a5e      	ldr	r2, [pc, #376]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068ac:	f043 0304 	orr.w	r3, r3, #4
 80068b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b6:	4a5b      	ldr	r2, [pc, #364]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80068be:	e00b      	b.n	80068d8 <HAL_RCC_OscConfig+0x324>
 80068c0:	4b58      	ldr	r3, [pc, #352]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c4:	4a57      	ldr	r2, [pc, #348]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80068cc:	4b55      	ldr	r3, [pc, #340]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d0:	4a54      	ldr	r2, [pc, #336]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068d2:	f023 0304 	bic.w	r3, r3, #4
 80068d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e0:	f7fe fc6a 	bl	80051b8 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e6:	e00a      	b.n	80068fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e8:	f7fe fc66 	bl	80051b8 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e0cb      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fe:	4b49      	ldr	r3, [pc, #292]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0ee      	beq.n	80068e8 <HAL_RCC_OscConfig+0x334>
 800690a:	e014      	b.n	8006936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800690c:	f7fe fc54 	bl	80051b8 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006912:	e00a      	b.n	800692a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006914:	f7fe fc50 	bl	80051b8 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006922:	4293      	cmp	r3, r2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e0b5      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800692a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1ee      	bne.n	8006914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d105      	bne.n	8006948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693c:	4b39      	ldr	r3, [pc, #228]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 800693e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006940:	4a38      	ldr	r2, [pc, #224]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006946:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80a1 	beq.w	8006a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006952:	4b34      	ldr	r3, [pc, #208]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	2b08      	cmp	r3, #8
 800695c:	d05c      	beq.n	8006a18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d141      	bne.n	80069ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006966:	4b31      	ldr	r3, [pc, #196]	@ (8006a2c <HAL_RCC_OscConfig+0x478>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696c:	f7fe fc24 	bl	80051b8 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006974:	f7fe fc20 	bl	80051b8 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e087      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006986:	4b27      	ldr	r3, [pc, #156]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69da      	ldr	r2, [r3, #28]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a0:	019b      	lsls	r3, r3, #6
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	3b01      	subs	r3, #1
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	061b      	lsls	r3, r3, #24
 80069b6:	491b      	ldr	r1, [pc, #108]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069bc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a2c <HAL_RCC_OscConfig+0x478>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fe fbf9 	bl	80051b8 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ca:	f7fe fbf5 	bl	80051b8 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e05c      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069dc:	4b11      	ldr	r3, [pc, #68]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x416>
 80069e8:	e054      	b.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ea:	4b10      	ldr	r3, [pc, #64]	@ (8006a2c <HAL_RCC_OscConfig+0x478>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fe fbe2 	bl	80051b8 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fe fbde 	bl	80051b8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e045      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a0a:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <HAL_RCC_OscConfig+0x444>
 8006a16:	e03d      	b.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d107      	bne.n	8006a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e038      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
 8006a24:	40023800 	.word	0x40023800
 8006a28:	40007000 	.word	0x40007000
 8006a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a30:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa0 <HAL_RCC_OscConfig+0x4ec>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d028      	beq.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d121      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d11a      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a60:	4013      	ands	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d111      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d001      	beq.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40023800 	.word	0x40023800

08006aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0cc      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab8:	4b68      	ldr	r3, [pc, #416]	@ (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d90c      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac6:	4b65      	ldr	r3, [pc, #404]	@ (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b63      	ldr	r3, [pc, #396]	@ (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0b8      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d020      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af8:	4b59      	ldr	r3, [pc, #356]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4a58      	ldr	r2, [pc, #352]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b10:	4b53      	ldr	r3, [pc, #332]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4a52      	ldr	r2, [pc, #328]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b1c:	4b50      	ldr	r3, [pc, #320]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	494d      	ldr	r1, [pc, #308]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d044      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d107      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	4b47      	ldr	r3, [pc, #284]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d119      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e07f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d003      	beq.n	8006b62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d107      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b62:	4b3f      	ldr	r3, [pc, #252]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e06f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b72:	4b3b      	ldr	r3, [pc, #236]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e067      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b82:	4b37      	ldr	r3, [pc, #220]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f023 0203 	bic.w	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4934      	ldr	r1, [pc, #208]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b94:	f7fe fb10 	bl	80051b8 <HAL_GetTick>
 8006b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9c:	f7fe fb0c 	bl	80051b8 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e04f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 020c 	and.w	r2, r3, #12
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d1eb      	bne.n	8006b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b25      	ldr	r3, [pc, #148]	@ (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d20c      	bcs.n	8006bec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b22      	ldr	r3, [pc, #136]	@ (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bda:	4b20      	ldr	r3, [pc, #128]	@ (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e032      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf8:	4b19      	ldr	r3, [pc, #100]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4916      	ldr	r1, [pc, #88]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c16:	4b12      	ldr	r3, [pc, #72]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	490e      	ldr	r1, [pc, #56]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c2a:	f000 f821 	bl	8006c70 <HAL_RCC_GetSysClockFreq>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b0b      	ldr	r3, [pc, #44]	@ (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	091b      	lsrs	r3, r3, #4
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	490a      	ldr	r1, [pc, #40]	@ (8006c64 <HAL_RCC_ClockConfig+0x1c0>)
 8006c3c:	5ccb      	ldrb	r3, [r1, r3]
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	4a09      	ldr	r2, [pc, #36]	@ (8006c68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c46:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fa70 	bl	8005130 <HAL_InitTick>

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40023c00 	.word	0x40023c00
 8006c60:	40023800 	.word	0x40023800
 8006c64:	08008914 	.word	0x08008914
 8006c68:	20000044 	.word	0x20000044
 8006c6c:	20000048 	.word	0x20000048

08006c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c74:	b094      	sub	sp, #80	@ 0x50
 8006c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c88:	4b79      	ldr	r3, [pc, #484]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 030c 	and.w	r3, r3, #12
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d00d      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	f200 80e1 	bhi.w	8006e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d003      	beq.n	8006caa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ca2:	e0db      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ca4:	4b73      	ldr	r3, [pc, #460]	@ (8006e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ca8:	e0db      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006caa:	4b73      	ldr	r3, [pc, #460]	@ (8006e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8006cac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cae:	e0d8      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cba:	4b6d      	ldr	r3, [pc, #436]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d063      	beq.n	8006d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	2200      	movs	r2, #0
 8006cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cda:	2300      	movs	r3, #0
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	462b      	mov	r3, r5
 8006ce6:	f04f 0000 	mov.w	r0, #0
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	0159      	lsls	r1, r3, #5
 8006cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf4:	0150      	lsls	r0, r2, #5
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	1a51      	subs	r1, r2, r1
 8006cfe:	6139      	str	r1, [r7, #16]
 8006d00:	4629      	mov	r1, r5
 8006d02:	eb63 0301 	sbc.w	r3, r3, r1
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d14:	4659      	mov	r1, fp
 8006d16:	018b      	lsls	r3, r1, #6
 8006d18:	4651      	mov	r1, sl
 8006d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d1e:	4651      	mov	r1, sl
 8006d20:	018a      	lsls	r2, r1, #6
 8006d22:	4651      	mov	r1, sl
 8006d24:	ebb2 0801 	subs.w	r8, r2, r1
 8006d28:	4659      	mov	r1, fp
 8006d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d42:	4690      	mov	r8, r2
 8006d44:	4699      	mov	r9, r3
 8006d46:	4623      	mov	r3, r4
 8006d48:	eb18 0303 	adds.w	r3, r8, r3
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	462b      	mov	r3, r5
 8006d50:	eb49 0303 	adc.w	r3, r9, r3
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d62:	4629      	mov	r1, r5
 8006d64:	024b      	lsls	r3, r1, #9
 8006d66:	4621      	mov	r1, r4
 8006d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	024a      	lsls	r2, r1, #9
 8006d70:	4610      	mov	r0, r2
 8006d72:	4619      	mov	r1, r3
 8006d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d76:	2200      	movs	r2, #0
 8006d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d80:	f7f9 fa7e 	bl	8000280 <__aeabi_uldivmod>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4613      	mov	r3, r2
 8006d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d8c:	e058      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d8e:	4b38      	ldr	r3, [pc, #224]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	099b      	lsrs	r3, r3, #6
 8006d94:	2200      	movs	r2, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	4611      	mov	r1, r2
 8006d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d9e:	623b      	str	r3, [r7, #32]
 8006da0:	2300      	movs	r3, #0
 8006da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	f04f 0000 	mov.w	r0, #0
 8006db0:	f04f 0100 	mov.w	r1, #0
 8006db4:	0159      	lsls	r1, r3, #5
 8006db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dba:	0150      	lsls	r0, r2, #5
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006de0:	ebb2 040a 	subs.w	r4, r2, sl
 8006de4:	eb63 050b 	sbc.w	r5, r3, fp
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	00eb      	lsls	r3, r5, #3
 8006df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006df6:	00e2      	lsls	r2, r4, #3
 8006df8:	4614      	mov	r4, r2
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	4643      	mov	r3, r8
 8006dfe:	18e3      	adds	r3, r4, r3
 8006e00:	603b      	str	r3, [r7, #0]
 8006e02:	464b      	mov	r3, r9
 8006e04:	eb45 0303 	adc.w	r3, r5, r3
 8006e08:	607b      	str	r3, [r7, #4]
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e16:	4629      	mov	r1, r5
 8006e18:	028b      	lsls	r3, r1, #10
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e20:	4621      	mov	r1, r4
 8006e22:	028a      	lsls	r2, r1, #10
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	61fa      	str	r2, [r7, #28]
 8006e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e34:	f7f9 fa24 	bl	8000280 <__aeabi_uldivmod>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	0c1b      	lsrs	r3, r3, #16
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e5a:	e002      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e5c:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3750      	adds	r7, #80	@ 0x50
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e6e:	bf00      	nop
 8006e70:	40023800 	.word	0x40023800
 8006e74:	00f42400 	.word	0x00f42400
 8006e78:	007a1200 	.word	0x007a1200

08006e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e80:	4b03      	ldr	r3, [pc, #12]	@ (8006e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e82:	681b      	ldr	r3, [r3, #0]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	20000044 	.word	0x20000044

08006e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e98:	f7ff fff0 	bl	8006e7c <HAL_RCC_GetHCLKFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b05      	ldr	r3, [pc, #20]	@ (8006eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	0a9b      	lsrs	r3, r3, #10
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	4903      	ldr	r1, [pc, #12]	@ (8006eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eaa:	5ccb      	ldrb	r3, [r1, r3]
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	08008924 	.word	0x08008924

08006ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ec0:	f7ff ffdc 	bl	8006e7c <HAL_RCC_GetHCLKFreq>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	0b5b      	lsrs	r3, r3, #13
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	4903      	ldr	r1, [pc, #12]	@ (8006ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ed2:	5ccb      	ldrb	r3, [r1, r3]
 8006ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	08008924 	.word	0x08008924

08006ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e042      	b.n	8006f7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fd fde0 	bl	8004ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2224      	movs	r2, #36	@ 0x24
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fd7f 	bl	8007a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	@ 0x28
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	4613      	mov	r3, r2
 8006f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d175      	bne.n	8007090 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <HAL_UART_Transmit+0x2c>
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e06e      	b.n	8007092 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2221      	movs	r2, #33	@ 0x21
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fc2:	f7fe f8f9 	bl	80051b8 <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fdc:	d108      	bne.n	8006ff0 <HAL_UART_Transmit+0x6c>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	e003      	b.n	8006ff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ff8:	e02e      	b.n	8007058 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2200      	movs	r2, #0
 8007002:	2180      	movs	r1, #128	@ 0x80
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fb1d 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e03a      	b.n	8007092 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10b      	bne.n	800703a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007030:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	3302      	adds	r3, #2
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e007      	b.n	800704a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	781a      	ldrb	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	3301      	adds	r3, #1
 8007048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1cb      	bne.n	8006ffa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2200      	movs	r2, #0
 800706a:	2140      	movs	r1, #64	@ 0x40
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 fae9 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e006      	b.n	8007092 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	e000      	b.n	8007092 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007090:	2302      	movs	r3, #2
  }
}
 8007092:	4618      	mov	r0, r3
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b0ba      	sub	sp, #232	@ 0xe8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80070da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10f      	bne.n	8007102 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_UART_IRQHandler+0x66>
 80070ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fbd7 	bl	80078ae <UART_Receive_IT>
      return;
 8007100:	e273      	b.n	80075ea <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80de 	beq.w	80072c8 <HAL_UART_IRQHandler+0x22c>
 800710c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80d1 	beq.w	80072c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <HAL_UART_IRQHandler+0xae>
 8007132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	f043 0201 	orr.w	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00b      	beq.n	800716e <HAL_UART_IRQHandler+0xd2>
 8007156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	f043 0202 	orr.w	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <HAL_UART_IRQHandler+0xf6>
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	f043 0204 	orr.w	r2, r3, #4
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d011      	beq.n	80071c2 <HAL_UART_IRQHandler+0x126>
 800719e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ba:	f043 0208 	orr.w	r2, r3, #8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 820a 	beq.w	80075e0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <HAL_UART_IRQHandler+0x14e>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fb62 	bl	80078ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f4:	2b40      	cmp	r3, #64	@ 0x40
 80071f6:	bf0c      	ite	eq
 80071f8:	2301      	moveq	r3, #1
 80071fa:	2300      	movne	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	2b00      	cmp	r3, #0
 800720c:	d103      	bne.n	8007216 <HAL_UART_IRQHandler+0x17a>
 800720e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007212:	2b00      	cmp	r3, #0
 8007214:	d04f      	beq.n	80072b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa6d 	bl	80076f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007226:	2b40      	cmp	r3, #64	@ 0x40
 8007228:	d141      	bne.n	80072ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3314      	adds	r3, #20
 8007230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3314      	adds	r3, #20
 8007252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007256:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800725a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800726e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1d9      	bne.n	800722a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d013      	beq.n	80072a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007282:	4a8a      	ldr	r2, [pc, #552]	@ (80074ac <HAL_UART_IRQHandler+0x410>)
 8007284:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe ffa3 	bl	80061d6 <HAL_DMA_Abort_IT>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a4:	e00e      	b.n	80072c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f9b6 	bl	8007618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ac:	e00a      	b.n	80072c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f9b2 	bl	8007618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b4:	e006      	b.n	80072c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9ae 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80072c2:	e18d      	b.n	80075e0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	bf00      	nop
    return;
 80072c6:	e18b      	b.n	80075e0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	f040 8167 	bne.w	80075a0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8160 	beq.w	80075a0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8159 	beq.w	80075a0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730e:	2b40      	cmp	r3, #64	@ 0x40
 8007310:	f040 80ce 	bne.w	80074b0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007320:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80a9 	beq.w	800747c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800732e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007332:	429a      	cmp	r2, r3
 8007334:	f080 80a2 	bcs.w	800747c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800733e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800734a:	f000 8088 	beq.w	800745e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007364:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800736c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800737a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800737e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007386:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1d9      	bne.n	800734e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3314      	adds	r3, #20
 80073ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80073c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80073c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80073d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e1      	bne.n	800739a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3314      	adds	r3, #20
 80073f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007400:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e3      	bne.n	80073d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800742c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800742e:	f023 0310 	bic.w	r3, r3, #16
 8007432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	330c      	adds	r3, #12
 800743c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007440:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007442:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007446:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800744e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e3      	bne.n	800741c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe fe4c 	bl	80060f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800746c:	b29b      	uxth	r3, r3
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	b29b      	uxth	r3, r3
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f8d9 	bl	800762c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800747a:	e0b3      	b.n	80075e4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007484:	429a      	cmp	r2, r3
 8007486:	f040 80ad 	bne.w	80075e4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007494:	f040 80a6 	bne.w	80075e4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f8c1 	bl	800762c <HAL_UARTEx_RxEventCallback>
      return;
 80074aa:	e09b      	b.n	80075e4 <HAL_UART_IRQHandler+0x548>
 80074ac:	080077bd 	.word	0x080077bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 808e 	beq.w	80075e8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80074cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 8089 	beq.w	80075e8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	330c      	adds	r3, #12
 80074f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80074fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80074fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e3      	bne.n	80074d6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3314      	adds	r3, #20
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	623b      	str	r3, [r7, #32]
   return(result);
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3314      	adds	r3, #20
 800752e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007532:	633a      	str	r2, [r7, #48]	@ 0x30
 8007534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e3      	bne.n	800750e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	60fb      	str	r3, [r7, #12]
   return(result);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0310 	bic.w	r3, r3, #16
 800756a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007578:	61fa      	str	r2, [r7, #28]
 800757a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	69b9      	ldr	r1, [r7, #24]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	617b      	str	r3, [r7, #20]
   return(result);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e3      	bne.n	8007554 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f847 	bl	800762c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800759e:	e023      	b.n	80075e8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d009      	beq.n	80075c0 <HAL_UART_IRQHandler+0x524>
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f910 	bl	80077de <UART_Transmit_IT>
    return;
 80075be:	e014      	b.n	80075ea <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00e      	beq.n	80075ea <HAL_UART_IRQHandler+0x54e>
 80075cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f950 	bl	800787e <UART_EndTransmit_IT>
    return;
 80075de:	e004      	b.n	80075ea <HAL_UART_IRQHandler+0x54e>
    return;
 80075e0:	bf00      	nop
 80075e2:	e002      	b.n	80075ea <HAL_UART_IRQHandler+0x54e>
      return;
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <HAL_UART_IRQHandler+0x54e>
      return;
 80075e8:	bf00      	nop
  }
}
 80075ea:	37e8      	adds	r7, #232	@ 0xe8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	4613      	mov	r3, r2
 8007652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007654:	e03b      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d037      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765e:	f7fd fdab 	bl	80051b8 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	6a3a      	ldr	r2, [r7, #32]
 800766a:	429a      	cmp	r2, r3
 800766c:	d302      	bcc.n	8007674 <UART_WaitOnFlagUntilTimeout+0x30>
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e03a      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d023      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b80      	cmp	r3, #128	@ 0x80
 800768a:	d020      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b40      	cmp	r3, #64	@ 0x40
 8007690:	d01d      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0308 	and.w	r3, r3, #8
 800769c:	2b08      	cmp	r3, #8
 800769e:	d116      	bne.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f81d 	bl	80076f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2208      	movs	r2, #8
 80076c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e00f      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	79fb      	ldrb	r3, [r7, #7]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d0b4      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b095      	sub	sp, #84	@ 0x54
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330c      	adds	r3, #12
 8007704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800771e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800772c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e5      	bne.n	80076fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3314      	adds	r3, #20
 8007738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	61fb      	str	r3, [r7, #28]
   return(result);
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	f023 0301 	bic.w	r3, r3, #1
 8007748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3314      	adds	r3, #20
 8007750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e5      	bne.n	8007732 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776a:	2b01      	cmp	r3, #1
 800776c:	d119      	bne.n	80077a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	330c      	adds	r3, #12
 8007774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	60bb      	str	r3, [r7, #8]
   return(result);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f023 0310 	bic.w	r3, r3, #16
 8007784:	647b      	str	r3, [r7, #68]	@ 0x44
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800778e:	61ba      	str	r2, [r7, #24]
 8007790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6979      	ldr	r1, [r7, #20]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	613b      	str	r3, [r7, #16]
   return(result);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80077b0:	bf00      	nop
 80077b2:	3754      	adds	r7, #84	@ 0x54
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff ff21 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b21      	cmp	r3, #33	@ 0x21
 80077f0:	d13e      	bne.n	8007870 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077fa:	d114      	bne.n	8007826 <UART_Transmit_IT+0x48>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d110      	bne.n	8007826 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007818:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	1c9a      	adds	r2, r3, #2
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	621a      	str	r2, [r3, #32]
 8007824:	e008      	b.n	8007838 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	1c59      	adds	r1, r3, #1
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6211      	str	r1, [r2, #32]
 8007830:	781a      	ldrb	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29b      	uxth	r3, r3
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	4619      	mov	r1, r3
 8007846:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10f      	bne.n	800786c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800785a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800786a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	e000      	b.n	8007872 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007870:	2302      	movs	r3, #2
  }
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007894:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff fea6 	bl	80075f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b08c      	sub	sp, #48	@ 0x30
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b22      	cmp	r3, #34	@ 0x22
 80078c8:	f040 80aa 	bne.w	8007a20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d4:	d115      	bne.n	8007902 <UART_Receive_IT+0x54>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d111      	bne.n	8007902 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fa:	1c9a      	adds	r2, r3, #2
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8007900:	e024      	b.n	800794c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007906:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007910:	d007      	beq.n	8007922 <UART_Receive_IT+0x74>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <UART_Receive_IT+0x82>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	b2da      	uxtb	r2, r3
 800792a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e008      	b.n	8007942 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800793c:	b2da      	uxtb	r2, r3
 800793e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007940:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29b      	uxth	r3, r3
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	4619      	mov	r1, r3
 800795a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800795c:	2b00      	cmp	r3, #0
 800795e:	d15d      	bne.n	8007a1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0220 	bic.w	r2, r2, #32
 800796e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800797e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d135      	bne.n	8007a12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	330c      	adds	r3, #12
 80079b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	613b      	str	r3, [r7, #16]
   return(result);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f023 0310 	bic.w	r3, r3, #16
 80079c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330c      	adds	r3, #12
 80079ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079cc:	623a      	str	r2, [r7, #32]
 80079ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	69f9      	ldr	r1, [r7, #28]
 80079d2:	6a3a      	ldr	r2, [r7, #32]
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2b10      	cmp	r3, #16
 80079ec:	d10a      	bne.n	8007a04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff fe0e 	bl	800762c <HAL_UARTEx_RxEventCallback>
 8007a10:	e002      	b.n	8007a18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fdf6 	bl	8007604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e002      	b.n	8007a22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e000      	b.n	8007a22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a20:	2302      	movs	r3, #2
  }
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3730      	adds	r7, #48	@ 0x30
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a30:	b0c0      	sub	sp, #256	@ 0x100
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a48:	68d9      	ldr	r1, [r3, #12]
 8007a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	ea40 0301 	orr.w	r3, r0, r1
 8007a54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a84:	f021 010c 	bic.w	r1, r1, #12
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a92:	430b      	orrs	r3, r1
 8007a94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa6:	6999      	ldr	r1, [r3, #24]
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	ea40 0301 	orr.w	r3, r0, r1
 8007ab2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4b8f      	ldr	r3, [pc, #572]	@ (8007cf8 <UART_SetConfig+0x2cc>)
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d005      	beq.n	8007acc <UART_SetConfig+0xa0>
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8007cfc <UART_SetConfig+0x2d0>)
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d104      	bne.n	8007ad6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007acc:	f7ff f9f6 	bl	8006ebc <HAL_RCC_GetPCLK2Freq>
 8007ad0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ad4:	e003      	b.n	8007ade <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ad6:	f7ff f9dd 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 8007ada:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ae8:	f040 810c 	bne.w	8007d04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007af6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007afa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007afe:	4622      	mov	r2, r4
 8007b00:	462b      	mov	r3, r5
 8007b02:	1891      	adds	r1, r2, r2
 8007b04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b06:	415b      	adcs	r3, r3
 8007b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b0e:	4621      	mov	r1, r4
 8007b10:	eb12 0801 	adds.w	r8, r2, r1
 8007b14:	4629      	mov	r1, r5
 8007b16:	eb43 0901 	adc.w	r9, r3, r1
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b2e:	4690      	mov	r8, r2
 8007b30:	4699      	mov	r9, r3
 8007b32:	4623      	mov	r3, r4
 8007b34:	eb18 0303 	adds.w	r3, r8, r3
 8007b38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	eb49 0303 	adc.w	r3, r9, r3
 8007b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	18db      	adds	r3, r3, r3
 8007b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b60:	4613      	mov	r3, r2
 8007b62:	eb42 0303 	adc.w	r3, r2, r3
 8007b66:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b70:	f7f8 fb86 	bl	8000280 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4b61      	ldr	r3, [pc, #388]	@ (8007d00 <UART_SetConfig+0x2d4>)
 8007b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	011c      	lsls	r4, r3, #4
 8007b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b94:	4642      	mov	r2, r8
 8007b96:	464b      	mov	r3, r9
 8007b98:	1891      	adds	r1, r2, r2
 8007b9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b9c:	415b      	adcs	r3, r3
 8007b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ba0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ba4:	4641      	mov	r1, r8
 8007ba6:	eb12 0a01 	adds.w	sl, r2, r1
 8007baa:	4649      	mov	r1, r9
 8007bac:	eb43 0b01 	adc.w	fp, r3, r1
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bc4:	4692      	mov	sl, r2
 8007bc6:	469b      	mov	fp, r3
 8007bc8:	4643      	mov	r3, r8
 8007bca:	eb1a 0303 	adds.w	r3, sl, r3
 8007bce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8007bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007be8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	18db      	adds	r3, r3, r3
 8007bf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	eb42 0303 	adc.w	r3, r2, r3
 8007bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c06:	f7f8 fb3b 	bl	8000280 <__aeabi_uldivmod>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	4b3b      	ldr	r3, [pc, #236]	@ (8007d00 <UART_SetConfig+0x2d4>)
 8007c12:	fba3 2301 	umull	r2, r3, r3, r1
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	2264      	movs	r2, #100	@ 0x64
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	1acb      	subs	r3, r1, r3
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c26:	4b36      	ldr	r3, [pc, #216]	@ (8007d00 <UART_SetConfig+0x2d4>)
 8007c28:	fba3 2302 	umull	r2, r3, r3, r2
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c34:	441c      	add	r4, r3
 8007c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c48:	4642      	mov	r2, r8
 8007c4a:	464b      	mov	r3, r9
 8007c4c:	1891      	adds	r1, r2, r2
 8007c4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c50:	415b      	adcs	r3, r3
 8007c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c58:	4641      	mov	r1, r8
 8007c5a:	1851      	adds	r1, r2, r1
 8007c5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c5e:	4649      	mov	r1, r9
 8007c60:	414b      	adcs	r3, r1
 8007c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	f04f 0300 	mov.w	r3, #0
 8007c6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c70:	4659      	mov	r1, fp
 8007c72:	00cb      	lsls	r3, r1, #3
 8007c74:	4651      	mov	r1, sl
 8007c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c7a:	4651      	mov	r1, sl
 8007c7c:	00ca      	lsls	r2, r1, #3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4619      	mov	r1, r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	4642      	mov	r2, r8
 8007c86:	189b      	adds	r3, r3, r2
 8007c88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c8c:	464b      	mov	r3, r9
 8007c8e:	460a      	mov	r2, r1
 8007c90:	eb42 0303 	adc.w	r3, r2, r3
 8007c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ca4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ca8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cac:	460b      	mov	r3, r1
 8007cae:	18db      	adds	r3, r3, r3
 8007cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	eb42 0303 	adc.w	r3, r2, r3
 8007cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007cbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007cc2:	f7f8 fadd 	bl	8000280 <__aeabi_uldivmod>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <UART_SetConfig+0x2d4>)
 8007ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	2164      	movs	r1, #100	@ 0x64
 8007cd4:	fb01 f303 	mul.w	r3, r1, r3
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	3332      	adds	r3, #50	@ 0x32
 8007cde:	4a08      	ldr	r2, [pc, #32]	@ (8007d00 <UART_SetConfig+0x2d4>)
 8007ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	f003 0207 	and.w	r2, r3, #7
 8007cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4422      	add	r2, r4
 8007cf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cf4:	e106      	b.n	8007f04 <UART_SetConfig+0x4d8>
 8007cf6:	bf00      	nop
 8007cf8:	40011000 	.word	0x40011000
 8007cfc:	40011400 	.word	0x40011400
 8007d00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d16:	4642      	mov	r2, r8
 8007d18:	464b      	mov	r3, r9
 8007d1a:	1891      	adds	r1, r2, r2
 8007d1c:	6239      	str	r1, [r7, #32]
 8007d1e:	415b      	adcs	r3, r3
 8007d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d26:	4641      	mov	r1, r8
 8007d28:	1854      	adds	r4, r2, r1
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	eb43 0501 	adc.w	r5, r3, r1
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	00eb      	lsls	r3, r5, #3
 8007d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d3e:	00e2      	lsls	r2, r4, #3
 8007d40:	4614      	mov	r4, r2
 8007d42:	461d      	mov	r5, r3
 8007d44:	4643      	mov	r3, r8
 8007d46:	18e3      	adds	r3, r4, r3
 8007d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d4c:	464b      	mov	r3, r9
 8007d4e:	eb45 0303 	adc.w	r3, r5, r3
 8007d52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d72:	4629      	mov	r1, r5
 8007d74:	008b      	lsls	r3, r1, #2
 8007d76:	4621      	mov	r1, r4
 8007d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	008a      	lsls	r2, r1, #2
 8007d80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d84:	f7f8 fa7c 	bl	8000280 <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4b60      	ldr	r3, [pc, #384]	@ (8007f10 <UART_SetConfig+0x4e4>)
 8007d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	011c      	lsls	r4, r3, #4
 8007d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007da0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007da4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	1891      	adds	r1, r2, r2
 8007dae:	61b9      	str	r1, [r7, #24]
 8007db0:	415b      	adcs	r3, r3
 8007db2:	61fb      	str	r3, [r7, #28]
 8007db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007db8:	4641      	mov	r1, r8
 8007dba:	1851      	adds	r1, r2, r1
 8007dbc:	6139      	str	r1, [r7, #16]
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	414b      	adcs	r3, r1
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	00cb      	lsls	r3, r1, #3
 8007dd4:	4651      	mov	r1, sl
 8007dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dda:	4651      	mov	r1, sl
 8007ddc:	00ca      	lsls	r2, r1, #3
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	4642      	mov	r2, r8
 8007de6:	189b      	adds	r3, r3, r2
 8007de8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dec:	464b      	mov	r3, r9
 8007dee:	460a      	mov	r2, r1
 8007df0:	eb42 0303 	adc.w	r3, r2, r3
 8007df4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e10:	4649      	mov	r1, r9
 8007e12:	008b      	lsls	r3, r1, #2
 8007e14:	4641      	mov	r1, r8
 8007e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	008a      	lsls	r2, r1, #2
 8007e1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007e22:	f7f8 fa2d 	bl	8000280 <__aeabi_uldivmod>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	4b38      	ldr	r3, [pc, #224]	@ (8007f10 <UART_SetConfig+0x4e4>)
 8007e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	2264      	movs	r2, #100	@ 0x64
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	1acb      	subs	r3, r1, r3
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	3332      	adds	r3, #50	@ 0x32
 8007e40:	4a33      	ldr	r2, [pc, #204]	@ (8007f10 <UART_SetConfig+0x4e4>)
 8007e42:	fba2 2303 	umull	r2, r3, r2, r3
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e4c:	441c      	add	r4, r3
 8007e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e52:	2200      	movs	r2, #0
 8007e54:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e56:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	464b      	mov	r3, r9
 8007e60:	1891      	adds	r1, r2, r2
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	415b      	adcs	r3, r3
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	1851      	adds	r1, r2, r1
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	4649      	mov	r1, r9
 8007e74:	414b      	adcs	r3, r1
 8007e76:	607b      	str	r3, [r7, #4]
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	f04f 0300 	mov.w	r3, #0
 8007e80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e84:	4659      	mov	r1, fp
 8007e86:	00cb      	lsls	r3, r1, #3
 8007e88:	4651      	mov	r1, sl
 8007e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e8e:	4651      	mov	r1, sl
 8007e90:	00ca      	lsls	r2, r1, #3
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	4603      	mov	r3, r0
 8007e98:	4642      	mov	r2, r8
 8007e9a:	189b      	adds	r3, r3, r2
 8007e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e9e:	464b      	mov	r3, r9
 8007ea0:	460a      	mov	r2, r1
 8007ea2:	eb42 0303 	adc.w	r3, r2, r3
 8007ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007eb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	f04f 0300 	mov.w	r3, #0
 8007ebc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	008b      	lsls	r3, r1, #2
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eca:	4641      	mov	r1, r8
 8007ecc:	008a      	lsls	r2, r1, #2
 8007ece:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007ed2:	f7f8 f9d5 	bl	8000280 <__aeabi_uldivmod>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4b0d      	ldr	r3, [pc, #52]	@ (8007f10 <UART_SetConfig+0x4e4>)
 8007edc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	2164      	movs	r1, #100	@ 0x64
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	3332      	adds	r3, #50	@ 0x32
 8007eee:	4a08      	ldr	r2, [pc, #32]	@ (8007f10 <UART_SetConfig+0x4e4>)
 8007ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef4:	095b      	lsrs	r3, r3, #5
 8007ef6:	f003 020f 	and.w	r2, r3, #15
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4422      	add	r2, r4
 8007f02:	609a      	str	r2, [r3, #8]
}
 8007f04:	bf00      	nop
 8007f06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f10:	51eb851f 	.word	0x51eb851f

08007f14 <malloc>:
 8007f14:	4b02      	ldr	r3, [pc, #8]	@ (8007f20 <malloc+0xc>)
 8007f16:	4601      	mov	r1, r0
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	f000 b82d 	b.w	8007f78 <_malloc_r>
 8007f1e:	bf00      	nop
 8007f20:	20000050 	.word	0x20000050

08007f24 <free>:
 8007f24:	4b02      	ldr	r3, [pc, #8]	@ (8007f30 <free+0xc>)
 8007f26:	4601      	mov	r1, r0
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f000 b925 	b.w	8008178 <_free_r>
 8007f2e:	bf00      	nop
 8007f30:	20000050 	.word	0x20000050

08007f34 <sbrk_aligned>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	4e0f      	ldr	r6, [pc, #60]	@ (8007f74 <sbrk_aligned+0x40>)
 8007f38:	460c      	mov	r4, r1
 8007f3a:	6831      	ldr	r1, [r6, #0]
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	b911      	cbnz	r1, 8007f46 <sbrk_aligned+0x12>
 8007f40:	f000 f8d0 	bl	80080e4 <_sbrk_r>
 8007f44:	6030      	str	r0, [r6, #0]
 8007f46:	4621      	mov	r1, r4
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f000 f8cb 	bl	80080e4 <_sbrk_r>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	d103      	bne.n	8007f5a <sbrk_aligned+0x26>
 8007f52:	f04f 34ff 	mov.w	r4, #4294967295
 8007f56:	4620      	mov	r0, r4
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	1cc4      	adds	r4, r0, #3
 8007f5c:	f024 0403 	bic.w	r4, r4, #3
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d0f8      	beq.n	8007f56 <sbrk_aligned+0x22>
 8007f64:	1a21      	subs	r1, r4, r0
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 f8bc 	bl	80080e4 <_sbrk_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d1f2      	bne.n	8007f56 <sbrk_aligned+0x22>
 8007f70:	e7ef      	b.n	8007f52 <sbrk_aligned+0x1e>
 8007f72:	bf00      	nop
 8007f74:	2001b288 	.word	0x2001b288

08007f78 <_malloc_r>:
 8007f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f7c:	1ccd      	adds	r5, r1, #3
 8007f7e:	f025 0503 	bic.w	r5, r5, #3
 8007f82:	3508      	adds	r5, #8
 8007f84:	2d0c      	cmp	r5, #12
 8007f86:	bf38      	it	cc
 8007f88:	250c      	movcc	r5, #12
 8007f8a:	2d00      	cmp	r5, #0
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	db01      	blt.n	8007f94 <_malloc_r+0x1c>
 8007f90:	42a9      	cmp	r1, r5
 8007f92:	d904      	bls.n	8007f9e <_malloc_r+0x26>
 8007f94:	230c      	movs	r3, #12
 8007f96:	6033      	str	r3, [r6, #0]
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008074 <_malloc_r+0xfc>
 8007fa2:	f000 f869 	bl	8008078 <__malloc_lock>
 8007fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8007faa:	461c      	mov	r4, r3
 8007fac:	bb44      	cbnz	r4, 8008000 <_malloc_r+0x88>
 8007fae:	4629      	mov	r1, r5
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f7ff ffbf 	bl	8007f34 <sbrk_aligned>
 8007fb6:	1c43      	adds	r3, r0, #1
 8007fb8:	4604      	mov	r4, r0
 8007fba:	d158      	bne.n	800806e <_malloc_r+0xf6>
 8007fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc0:	4627      	mov	r7, r4
 8007fc2:	2f00      	cmp	r7, #0
 8007fc4:	d143      	bne.n	800804e <_malloc_r+0xd6>
 8007fc6:	2c00      	cmp	r4, #0
 8007fc8:	d04b      	beq.n	8008062 <_malloc_r+0xea>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4630      	mov	r0, r6
 8007fd0:	eb04 0903 	add.w	r9, r4, r3
 8007fd4:	f000 f886 	bl	80080e4 <_sbrk_r>
 8007fd8:	4581      	cmp	r9, r0
 8007fda:	d142      	bne.n	8008062 <_malloc_r+0xea>
 8007fdc:	6821      	ldr	r1, [r4, #0]
 8007fde:	1a6d      	subs	r5, r5, r1
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7ff ffa6 	bl	8007f34 <sbrk_aligned>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d03a      	beq.n	8008062 <_malloc_r+0xea>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	442b      	add	r3, r5
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	bb62      	cbnz	r2, 8008054 <_malloc_r+0xdc>
 8007ffa:	f8c8 7000 	str.w	r7, [r8]
 8007ffe:	e00f      	b.n	8008020 <_malloc_r+0xa8>
 8008000:	6822      	ldr	r2, [r4, #0]
 8008002:	1b52      	subs	r2, r2, r5
 8008004:	d420      	bmi.n	8008048 <_malloc_r+0xd0>
 8008006:	2a0b      	cmp	r2, #11
 8008008:	d917      	bls.n	800803a <_malloc_r+0xc2>
 800800a:	1961      	adds	r1, r4, r5
 800800c:	42a3      	cmp	r3, r4
 800800e:	6025      	str	r5, [r4, #0]
 8008010:	bf18      	it	ne
 8008012:	6059      	strne	r1, [r3, #4]
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	bf08      	it	eq
 8008018:	f8c8 1000 	streq.w	r1, [r8]
 800801c:	5162      	str	r2, [r4, r5]
 800801e:	604b      	str	r3, [r1, #4]
 8008020:	4630      	mov	r0, r6
 8008022:	f000 f82f 	bl	8008084 <__malloc_unlock>
 8008026:	f104 000b 	add.w	r0, r4, #11
 800802a:	1d23      	adds	r3, r4, #4
 800802c:	f020 0007 	bic.w	r0, r0, #7
 8008030:	1ac2      	subs	r2, r0, r3
 8008032:	bf1c      	itt	ne
 8008034:	1a1b      	subne	r3, r3, r0
 8008036:	50a3      	strne	r3, [r4, r2]
 8008038:	e7af      	b.n	8007f9a <_malloc_r+0x22>
 800803a:	6862      	ldr	r2, [r4, #4]
 800803c:	42a3      	cmp	r3, r4
 800803e:	bf0c      	ite	eq
 8008040:	f8c8 2000 	streq.w	r2, [r8]
 8008044:	605a      	strne	r2, [r3, #4]
 8008046:	e7eb      	b.n	8008020 <_malloc_r+0xa8>
 8008048:	4623      	mov	r3, r4
 800804a:	6864      	ldr	r4, [r4, #4]
 800804c:	e7ae      	b.n	8007fac <_malloc_r+0x34>
 800804e:	463c      	mov	r4, r7
 8008050:	687f      	ldr	r7, [r7, #4]
 8008052:	e7b6      	b.n	8007fc2 <_malloc_r+0x4a>
 8008054:	461a      	mov	r2, r3
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	42a3      	cmp	r3, r4
 800805a:	d1fb      	bne.n	8008054 <_malloc_r+0xdc>
 800805c:	2300      	movs	r3, #0
 800805e:	6053      	str	r3, [r2, #4]
 8008060:	e7de      	b.n	8008020 <_malloc_r+0xa8>
 8008062:	230c      	movs	r3, #12
 8008064:	6033      	str	r3, [r6, #0]
 8008066:	4630      	mov	r0, r6
 8008068:	f000 f80c 	bl	8008084 <__malloc_unlock>
 800806c:	e794      	b.n	8007f98 <_malloc_r+0x20>
 800806e:	6005      	str	r5, [r0, #0]
 8008070:	e7d6      	b.n	8008020 <_malloc_r+0xa8>
 8008072:	bf00      	nop
 8008074:	2001b28c 	.word	0x2001b28c

08008078 <__malloc_lock>:
 8008078:	4801      	ldr	r0, [pc, #4]	@ (8008080 <__malloc_lock+0x8>)
 800807a:	f000 b86d 	b.w	8008158 <__retarget_lock_acquire_recursive>
 800807e:	bf00      	nop
 8008080:	2001b3cc 	.word	0x2001b3cc

08008084 <__malloc_unlock>:
 8008084:	4801      	ldr	r0, [pc, #4]	@ (800808c <__malloc_unlock+0x8>)
 8008086:	f000 b868 	b.w	800815a <__retarget_lock_release_recursive>
 800808a:	bf00      	nop
 800808c:	2001b3cc 	.word	0x2001b3cc

08008090 <siprintf>:
 8008090:	b40e      	push	{r1, r2, r3}
 8008092:	b510      	push	{r4, lr}
 8008094:	b09d      	sub	sp, #116	@ 0x74
 8008096:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008098:	9002      	str	r0, [sp, #8]
 800809a:	9006      	str	r0, [sp, #24]
 800809c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80080a0:	480a      	ldr	r0, [pc, #40]	@ (80080cc <siprintf+0x3c>)
 80080a2:	9107      	str	r1, [sp, #28]
 80080a4:	9104      	str	r1, [sp, #16]
 80080a6:	490a      	ldr	r1, [pc, #40]	@ (80080d0 <siprintf+0x40>)
 80080a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ac:	9105      	str	r1, [sp, #20]
 80080ae:	2400      	movs	r4, #0
 80080b0:	a902      	add	r1, sp, #8
 80080b2:	6800      	ldr	r0, [r0, #0]
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80080b8:	f000 f904 	bl	80082c4 <_svfiprintf_r>
 80080bc:	9b02      	ldr	r3, [sp, #8]
 80080be:	701c      	strb	r4, [r3, #0]
 80080c0:	b01d      	add	sp, #116	@ 0x74
 80080c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c6:	b003      	add	sp, #12
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000050 	.word	0x20000050
 80080d0:	ffff0208 	.word	0xffff0208

080080d4 <memset>:
 80080d4:	4402      	add	r2, r0
 80080d6:	4603      	mov	r3, r0
 80080d8:	4293      	cmp	r3, r2
 80080da:	d100      	bne.n	80080de <memset+0xa>
 80080dc:	4770      	bx	lr
 80080de:	f803 1b01 	strb.w	r1, [r3], #1
 80080e2:	e7f9      	b.n	80080d8 <memset+0x4>

080080e4 <_sbrk_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d06      	ldr	r5, [pc, #24]	@ (8008100 <_sbrk_r+0x1c>)
 80080e8:	2300      	movs	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	f7fc fd84 	bl	8004bfc <_sbrk>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_sbrk_r+0x1a>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_sbrk_r+0x1a>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	2001b3c8 	.word	0x2001b3c8

08008104 <__errno>:
 8008104:	4b01      	ldr	r3, [pc, #4]	@ (800810c <__errno+0x8>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000050 	.word	0x20000050

08008110 <__libc_init_array>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	4d0d      	ldr	r5, [pc, #52]	@ (8008148 <__libc_init_array+0x38>)
 8008114:	4c0d      	ldr	r4, [pc, #52]	@ (800814c <__libc_init_array+0x3c>)
 8008116:	1b64      	subs	r4, r4, r5
 8008118:	10a4      	asrs	r4, r4, #2
 800811a:	2600      	movs	r6, #0
 800811c:	42a6      	cmp	r6, r4
 800811e:	d109      	bne.n	8008134 <__libc_init_array+0x24>
 8008120:	4d0b      	ldr	r5, [pc, #44]	@ (8008150 <__libc_init_array+0x40>)
 8008122:	4c0c      	ldr	r4, [pc, #48]	@ (8008154 <__libc_init_array+0x44>)
 8008124:	f000 fba6 	bl	8008874 <_init>
 8008128:	1b64      	subs	r4, r4, r5
 800812a:	10a4      	asrs	r4, r4, #2
 800812c:	2600      	movs	r6, #0
 800812e:	42a6      	cmp	r6, r4
 8008130:	d105      	bne.n	800813e <__libc_init_array+0x2e>
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	f855 3b04 	ldr.w	r3, [r5], #4
 8008138:	4798      	blx	r3
 800813a:	3601      	adds	r6, #1
 800813c:	e7ee      	b.n	800811c <__libc_init_array+0xc>
 800813e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008142:	4798      	blx	r3
 8008144:	3601      	adds	r6, #1
 8008146:	e7f2      	b.n	800812e <__libc_init_array+0x1e>
 8008148:	08008968 	.word	0x08008968
 800814c:	08008968 	.word	0x08008968
 8008150:	08008968 	.word	0x08008968
 8008154:	0800896c 	.word	0x0800896c

08008158 <__retarget_lock_acquire_recursive>:
 8008158:	4770      	bx	lr

0800815a <__retarget_lock_release_recursive>:
 800815a:	4770      	bx	lr

0800815c <memcpy>:
 800815c:	440a      	add	r2, r1
 800815e:	4291      	cmp	r1, r2
 8008160:	f100 33ff 	add.w	r3, r0, #4294967295
 8008164:	d100      	bne.n	8008168 <memcpy+0xc>
 8008166:	4770      	bx	lr
 8008168:	b510      	push	{r4, lr}
 800816a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800816e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008172:	4291      	cmp	r1, r2
 8008174:	d1f9      	bne.n	800816a <memcpy+0xe>
 8008176:	bd10      	pop	{r4, pc}

08008178 <_free_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4605      	mov	r5, r0
 800817c:	2900      	cmp	r1, #0
 800817e:	d041      	beq.n	8008204 <_free_r+0x8c>
 8008180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008184:	1f0c      	subs	r4, r1, #4
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfb8      	it	lt
 800818a:	18e4      	addlt	r4, r4, r3
 800818c:	f7ff ff74 	bl	8008078 <__malloc_lock>
 8008190:	4a1d      	ldr	r2, [pc, #116]	@ (8008208 <_free_r+0x90>)
 8008192:	6813      	ldr	r3, [r2, #0]
 8008194:	b933      	cbnz	r3, 80081a4 <_free_r+0x2c>
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	6014      	str	r4, [r2, #0]
 800819a:	4628      	mov	r0, r5
 800819c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a0:	f7ff bf70 	b.w	8008084 <__malloc_unlock>
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	d908      	bls.n	80081ba <_free_r+0x42>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	1821      	adds	r1, r4, r0
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf01      	itttt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	1809      	addeq	r1, r1, r0
 80081b6:	6021      	streq	r1, [r4, #0]
 80081b8:	e7ed      	b.n	8008196 <_free_r+0x1e>
 80081ba:	461a      	mov	r2, r3
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	b10b      	cbz	r3, 80081c4 <_free_r+0x4c>
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	d9fa      	bls.n	80081ba <_free_r+0x42>
 80081c4:	6811      	ldr	r1, [r2, #0]
 80081c6:	1850      	adds	r0, r2, r1
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d10b      	bne.n	80081e4 <_free_r+0x6c>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	4401      	add	r1, r0
 80081d0:	1850      	adds	r0, r2, r1
 80081d2:	4283      	cmp	r3, r0
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	d1e0      	bne.n	800819a <_free_r+0x22>
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	6053      	str	r3, [r2, #4]
 80081de:	4408      	add	r0, r1
 80081e0:	6010      	str	r0, [r2, #0]
 80081e2:	e7da      	b.n	800819a <_free_r+0x22>
 80081e4:	d902      	bls.n	80081ec <_free_r+0x74>
 80081e6:	230c      	movs	r3, #12
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	e7d6      	b.n	800819a <_free_r+0x22>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	1821      	adds	r1, r4, r0
 80081f0:	428b      	cmp	r3, r1
 80081f2:	bf04      	itt	eq
 80081f4:	6819      	ldreq	r1, [r3, #0]
 80081f6:	685b      	ldreq	r3, [r3, #4]
 80081f8:	6063      	str	r3, [r4, #4]
 80081fa:	bf04      	itt	eq
 80081fc:	1809      	addeq	r1, r1, r0
 80081fe:	6021      	streq	r1, [r4, #0]
 8008200:	6054      	str	r4, [r2, #4]
 8008202:	e7ca      	b.n	800819a <_free_r+0x22>
 8008204:	bd38      	pop	{r3, r4, r5, pc}
 8008206:	bf00      	nop
 8008208:	2001b28c 	.word	0x2001b28c

0800820c <__ssputs_r>:
 800820c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008210:	688e      	ldr	r6, [r1, #8]
 8008212:	461f      	mov	r7, r3
 8008214:	42be      	cmp	r6, r7
 8008216:	680b      	ldr	r3, [r1, #0]
 8008218:	4682      	mov	sl, r0
 800821a:	460c      	mov	r4, r1
 800821c:	4690      	mov	r8, r2
 800821e:	d82d      	bhi.n	800827c <__ssputs_r+0x70>
 8008220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008224:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008228:	d026      	beq.n	8008278 <__ssputs_r+0x6c>
 800822a:	6965      	ldr	r5, [r4, #20]
 800822c:	6909      	ldr	r1, [r1, #16]
 800822e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008232:	eba3 0901 	sub.w	r9, r3, r1
 8008236:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800823a:	1c7b      	adds	r3, r7, #1
 800823c:	444b      	add	r3, r9
 800823e:	106d      	asrs	r5, r5, #1
 8008240:	429d      	cmp	r5, r3
 8008242:	bf38      	it	cc
 8008244:	461d      	movcc	r5, r3
 8008246:	0553      	lsls	r3, r2, #21
 8008248:	d527      	bpl.n	800829a <__ssputs_r+0x8e>
 800824a:	4629      	mov	r1, r5
 800824c:	f7ff fe94 	bl	8007f78 <_malloc_r>
 8008250:	4606      	mov	r6, r0
 8008252:	b360      	cbz	r0, 80082ae <__ssputs_r+0xa2>
 8008254:	6921      	ldr	r1, [r4, #16]
 8008256:	464a      	mov	r2, r9
 8008258:	f7ff ff80 	bl	800815c <memcpy>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	6126      	str	r6, [r4, #16]
 800826a:	6165      	str	r5, [r4, #20]
 800826c:	444e      	add	r6, r9
 800826e:	eba5 0509 	sub.w	r5, r5, r9
 8008272:	6026      	str	r6, [r4, #0]
 8008274:	60a5      	str	r5, [r4, #8]
 8008276:	463e      	mov	r6, r7
 8008278:	42be      	cmp	r6, r7
 800827a:	d900      	bls.n	800827e <__ssputs_r+0x72>
 800827c:	463e      	mov	r6, r7
 800827e:	6820      	ldr	r0, [r4, #0]
 8008280:	4632      	mov	r2, r6
 8008282:	4641      	mov	r1, r8
 8008284:	f000 faa6 	bl	80087d4 <memmove>
 8008288:	68a3      	ldr	r3, [r4, #8]
 800828a:	1b9b      	subs	r3, r3, r6
 800828c:	60a3      	str	r3, [r4, #8]
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	4433      	add	r3, r6
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	2000      	movs	r0, #0
 8008296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829a:	462a      	mov	r2, r5
 800829c:	f000 fab4 	bl	8008808 <_realloc_r>
 80082a0:	4606      	mov	r6, r0
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d1e0      	bne.n	8008268 <__ssputs_r+0x5c>
 80082a6:	6921      	ldr	r1, [r4, #16]
 80082a8:	4650      	mov	r0, sl
 80082aa:	f7ff ff65 	bl	8008178 <_free_r>
 80082ae:	230c      	movs	r3, #12
 80082b0:	f8ca 3000 	str.w	r3, [sl]
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295
 80082c0:	e7e9      	b.n	8008296 <__ssputs_r+0x8a>
	...

080082c4 <_svfiprintf_r>:
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	4698      	mov	r8, r3
 80082ca:	898b      	ldrh	r3, [r1, #12]
 80082cc:	061b      	lsls	r3, r3, #24
 80082ce:	b09d      	sub	sp, #116	@ 0x74
 80082d0:	4607      	mov	r7, r0
 80082d2:	460d      	mov	r5, r1
 80082d4:	4614      	mov	r4, r2
 80082d6:	d510      	bpl.n	80082fa <_svfiprintf_r+0x36>
 80082d8:	690b      	ldr	r3, [r1, #16]
 80082da:	b973      	cbnz	r3, 80082fa <_svfiprintf_r+0x36>
 80082dc:	2140      	movs	r1, #64	@ 0x40
 80082de:	f7ff fe4b 	bl	8007f78 <_malloc_r>
 80082e2:	6028      	str	r0, [r5, #0]
 80082e4:	6128      	str	r0, [r5, #16]
 80082e6:	b930      	cbnz	r0, 80082f6 <_svfiprintf_r+0x32>
 80082e8:	230c      	movs	r3, #12
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	f04f 30ff 	mov.w	r0, #4294967295
 80082f0:	b01d      	add	sp, #116	@ 0x74
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	2340      	movs	r3, #64	@ 0x40
 80082f8:	616b      	str	r3, [r5, #20]
 80082fa:	2300      	movs	r3, #0
 80082fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fe:	2320      	movs	r3, #32
 8008300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008304:	f8cd 800c 	str.w	r8, [sp, #12]
 8008308:	2330      	movs	r3, #48	@ 0x30
 800830a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084a8 <_svfiprintf_r+0x1e4>
 800830e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008312:	f04f 0901 	mov.w	r9, #1
 8008316:	4623      	mov	r3, r4
 8008318:	469a      	mov	sl, r3
 800831a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831e:	b10a      	cbz	r2, 8008324 <_svfiprintf_r+0x60>
 8008320:	2a25      	cmp	r2, #37	@ 0x25
 8008322:	d1f9      	bne.n	8008318 <_svfiprintf_r+0x54>
 8008324:	ebba 0b04 	subs.w	fp, sl, r4
 8008328:	d00b      	beq.n	8008342 <_svfiprintf_r+0x7e>
 800832a:	465b      	mov	r3, fp
 800832c:	4622      	mov	r2, r4
 800832e:	4629      	mov	r1, r5
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff ff6b 	bl	800820c <__ssputs_r>
 8008336:	3001      	adds	r0, #1
 8008338:	f000 80a7 	beq.w	800848a <_svfiprintf_r+0x1c6>
 800833c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833e:	445a      	add	r2, fp
 8008340:	9209      	str	r2, [sp, #36]	@ 0x24
 8008342:	f89a 3000 	ldrb.w	r3, [sl]
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 809f 	beq.w	800848a <_svfiprintf_r+0x1c6>
 800834c:	2300      	movs	r3, #0
 800834e:	f04f 32ff 	mov.w	r2, #4294967295
 8008352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008356:	f10a 0a01 	add.w	sl, sl, #1
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	9307      	str	r3, [sp, #28]
 800835e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008362:	931a      	str	r3, [sp, #104]	@ 0x68
 8008364:	4654      	mov	r4, sl
 8008366:	2205      	movs	r2, #5
 8008368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836c:	484e      	ldr	r0, [pc, #312]	@ (80084a8 <_svfiprintf_r+0x1e4>)
 800836e:	f7f7 ff37 	bl	80001e0 <memchr>
 8008372:	9a04      	ldr	r2, [sp, #16]
 8008374:	b9d8      	cbnz	r0, 80083ae <_svfiprintf_r+0xea>
 8008376:	06d0      	lsls	r0, r2, #27
 8008378:	bf44      	itt	mi
 800837a:	2320      	movmi	r3, #32
 800837c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008380:	0711      	lsls	r1, r2, #28
 8008382:	bf44      	itt	mi
 8008384:	232b      	movmi	r3, #43	@ 0x2b
 8008386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800838a:	f89a 3000 	ldrb.w	r3, [sl]
 800838e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008390:	d015      	beq.n	80083be <_svfiprintf_r+0xfa>
 8008392:	9a07      	ldr	r2, [sp, #28]
 8008394:	4654      	mov	r4, sl
 8008396:	2000      	movs	r0, #0
 8008398:	f04f 0c0a 	mov.w	ip, #10
 800839c:	4621      	mov	r1, r4
 800839e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a2:	3b30      	subs	r3, #48	@ 0x30
 80083a4:	2b09      	cmp	r3, #9
 80083a6:	d94b      	bls.n	8008440 <_svfiprintf_r+0x17c>
 80083a8:	b1b0      	cbz	r0, 80083d8 <_svfiprintf_r+0x114>
 80083aa:	9207      	str	r2, [sp, #28]
 80083ac:	e014      	b.n	80083d8 <_svfiprintf_r+0x114>
 80083ae:	eba0 0308 	sub.w	r3, r0, r8
 80083b2:	fa09 f303 	lsl.w	r3, r9, r3
 80083b6:	4313      	orrs	r3, r2
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	46a2      	mov	sl, r4
 80083bc:	e7d2      	b.n	8008364 <_svfiprintf_r+0xa0>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	1d19      	adds	r1, r3, #4
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	9103      	str	r1, [sp, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bfbb      	ittet	lt
 80083ca:	425b      	neglt	r3, r3
 80083cc:	f042 0202 	orrlt.w	r2, r2, #2
 80083d0:	9307      	strge	r3, [sp, #28]
 80083d2:	9307      	strlt	r3, [sp, #28]
 80083d4:	bfb8      	it	lt
 80083d6:	9204      	strlt	r2, [sp, #16]
 80083d8:	7823      	ldrb	r3, [r4, #0]
 80083da:	2b2e      	cmp	r3, #46	@ 0x2e
 80083dc:	d10a      	bne.n	80083f4 <_svfiprintf_r+0x130>
 80083de:	7863      	ldrb	r3, [r4, #1]
 80083e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083e2:	d132      	bne.n	800844a <_svfiprintf_r+0x186>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	1d1a      	adds	r2, r3, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	9203      	str	r2, [sp, #12]
 80083ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083f0:	3402      	adds	r4, #2
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084b8 <_svfiprintf_r+0x1f4>
 80083f8:	7821      	ldrb	r1, [r4, #0]
 80083fa:	2203      	movs	r2, #3
 80083fc:	4650      	mov	r0, sl
 80083fe:	f7f7 feef 	bl	80001e0 <memchr>
 8008402:	b138      	cbz	r0, 8008414 <_svfiprintf_r+0x150>
 8008404:	9b04      	ldr	r3, [sp, #16]
 8008406:	eba0 000a 	sub.w	r0, r0, sl
 800840a:	2240      	movs	r2, #64	@ 0x40
 800840c:	4082      	lsls	r2, r0
 800840e:	4313      	orrs	r3, r2
 8008410:	3401      	adds	r4, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008418:	4824      	ldr	r0, [pc, #144]	@ (80084ac <_svfiprintf_r+0x1e8>)
 800841a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800841e:	2206      	movs	r2, #6
 8008420:	f7f7 fede 	bl	80001e0 <memchr>
 8008424:	2800      	cmp	r0, #0
 8008426:	d036      	beq.n	8008496 <_svfiprintf_r+0x1d2>
 8008428:	4b21      	ldr	r3, [pc, #132]	@ (80084b0 <_svfiprintf_r+0x1ec>)
 800842a:	bb1b      	cbnz	r3, 8008474 <_svfiprintf_r+0x1b0>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	3307      	adds	r3, #7
 8008430:	f023 0307 	bic.w	r3, r3, #7
 8008434:	3308      	adds	r3, #8
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843a:	4433      	add	r3, r6
 800843c:	9309      	str	r3, [sp, #36]	@ 0x24
 800843e:	e76a      	b.n	8008316 <_svfiprintf_r+0x52>
 8008440:	fb0c 3202 	mla	r2, ip, r2, r3
 8008444:	460c      	mov	r4, r1
 8008446:	2001      	movs	r0, #1
 8008448:	e7a8      	b.n	800839c <_svfiprintf_r+0xd8>
 800844a:	2300      	movs	r3, #0
 800844c:	3401      	adds	r4, #1
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	4619      	mov	r1, r3
 8008452:	f04f 0c0a 	mov.w	ip, #10
 8008456:	4620      	mov	r0, r4
 8008458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800845c:	3a30      	subs	r2, #48	@ 0x30
 800845e:	2a09      	cmp	r2, #9
 8008460:	d903      	bls.n	800846a <_svfiprintf_r+0x1a6>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0c6      	beq.n	80083f4 <_svfiprintf_r+0x130>
 8008466:	9105      	str	r1, [sp, #20]
 8008468:	e7c4      	b.n	80083f4 <_svfiprintf_r+0x130>
 800846a:	fb0c 2101 	mla	r1, ip, r1, r2
 800846e:	4604      	mov	r4, r0
 8008470:	2301      	movs	r3, #1
 8008472:	e7f0      	b.n	8008456 <_svfiprintf_r+0x192>
 8008474:	ab03      	add	r3, sp, #12
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	462a      	mov	r2, r5
 800847a:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <_svfiprintf_r+0x1f0>)
 800847c:	a904      	add	r1, sp, #16
 800847e:	4638      	mov	r0, r7
 8008480:	f3af 8000 	nop.w
 8008484:	1c42      	adds	r2, r0, #1
 8008486:	4606      	mov	r6, r0
 8008488:	d1d6      	bne.n	8008438 <_svfiprintf_r+0x174>
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	065b      	lsls	r3, r3, #25
 800848e:	f53f af2d 	bmi.w	80082ec <_svfiprintf_r+0x28>
 8008492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008494:	e72c      	b.n	80082f0 <_svfiprintf_r+0x2c>
 8008496:	ab03      	add	r3, sp, #12
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	462a      	mov	r2, r5
 800849c:	4b05      	ldr	r3, [pc, #20]	@ (80084b4 <_svfiprintf_r+0x1f0>)
 800849e:	a904      	add	r1, sp, #16
 80084a0:	4638      	mov	r0, r7
 80084a2:	f000 f879 	bl	8008598 <_printf_i>
 80084a6:	e7ed      	b.n	8008484 <_svfiprintf_r+0x1c0>
 80084a8:	0800892c 	.word	0x0800892c
 80084ac:	08008936 	.word	0x08008936
 80084b0:	00000000 	.word	0x00000000
 80084b4:	0800820d 	.word	0x0800820d
 80084b8:	08008932 	.word	0x08008932

080084bc <_printf_common>:
 80084bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	4616      	mov	r6, r2
 80084c2:	4698      	mov	r8, r3
 80084c4:	688a      	ldr	r2, [r1, #8]
 80084c6:	690b      	ldr	r3, [r1, #16]
 80084c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	bfb8      	it	lt
 80084d0:	4613      	movlt	r3, r2
 80084d2:	6033      	str	r3, [r6, #0]
 80084d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084d8:	4607      	mov	r7, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	b10a      	cbz	r2, 80084e2 <_printf_common+0x26>
 80084de:	3301      	adds	r3, #1
 80084e0:	6033      	str	r3, [r6, #0]
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	0699      	lsls	r1, r3, #26
 80084e6:	bf42      	ittt	mi
 80084e8:	6833      	ldrmi	r3, [r6, #0]
 80084ea:	3302      	addmi	r3, #2
 80084ec:	6033      	strmi	r3, [r6, #0]
 80084ee:	6825      	ldr	r5, [r4, #0]
 80084f0:	f015 0506 	ands.w	r5, r5, #6
 80084f4:	d106      	bne.n	8008504 <_printf_common+0x48>
 80084f6:	f104 0a19 	add.w	sl, r4, #25
 80084fa:	68e3      	ldr	r3, [r4, #12]
 80084fc:	6832      	ldr	r2, [r6, #0]
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	42ab      	cmp	r3, r5
 8008502:	dc26      	bgt.n	8008552 <_printf_common+0x96>
 8008504:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008508:	6822      	ldr	r2, [r4, #0]
 800850a:	3b00      	subs	r3, #0
 800850c:	bf18      	it	ne
 800850e:	2301      	movne	r3, #1
 8008510:	0692      	lsls	r2, r2, #26
 8008512:	d42b      	bmi.n	800856c <_printf_common+0xb0>
 8008514:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008518:	4641      	mov	r1, r8
 800851a:	4638      	mov	r0, r7
 800851c:	47c8      	blx	r9
 800851e:	3001      	adds	r0, #1
 8008520:	d01e      	beq.n	8008560 <_printf_common+0xa4>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	6922      	ldr	r2, [r4, #16]
 8008526:	f003 0306 	and.w	r3, r3, #6
 800852a:	2b04      	cmp	r3, #4
 800852c:	bf02      	ittt	eq
 800852e:	68e5      	ldreq	r5, [r4, #12]
 8008530:	6833      	ldreq	r3, [r6, #0]
 8008532:	1aed      	subeq	r5, r5, r3
 8008534:	68a3      	ldr	r3, [r4, #8]
 8008536:	bf0c      	ite	eq
 8008538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800853c:	2500      	movne	r5, #0
 800853e:	4293      	cmp	r3, r2
 8008540:	bfc4      	itt	gt
 8008542:	1a9b      	subgt	r3, r3, r2
 8008544:	18ed      	addgt	r5, r5, r3
 8008546:	2600      	movs	r6, #0
 8008548:	341a      	adds	r4, #26
 800854a:	42b5      	cmp	r5, r6
 800854c:	d11a      	bne.n	8008584 <_printf_common+0xc8>
 800854e:	2000      	movs	r0, #0
 8008550:	e008      	b.n	8008564 <_printf_common+0xa8>
 8008552:	2301      	movs	r3, #1
 8008554:	4652      	mov	r2, sl
 8008556:	4641      	mov	r1, r8
 8008558:	4638      	mov	r0, r7
 800855a:	47c8      	blx	r9
 800855c:	3001      	adds	r0, #1
 800855e:	d103      	bne.n	8008568 <_printf_common+0xac>
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	3501      	adds	r5, #1
 800856a:	e7c6      	b.n	80084fa <_printf_common+0x3e>
 800856c:	18e1      	adds	r1, r4, r3
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	2030      	movs	r0, #48	@ 0x30
 8008572:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008576:	4422      	add	r2, r4
 8008578:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800857c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008580:	3302      	adds	r3, #2
 8008582:	e7c7      	b.n	8008514 <_printf_common+0x58>
 8008584:	2301      	movs	r3, #1
 8008586:	4622      	mov	r2, r4
 8008588:	4641      	mov	r1, r8
 800858a:	4638      	mov	r0, r7
 800858c:	47c8      	blx	r9
 800858e:	3001      	adds	r0, #1
 8008590:	d0e6      	beq.n	8008560 <_printf_common+0xa4>
 8008592:	3601      	adds	r6, #1
 8008594:	e7d9      	b.n	800854a <_printf_common+0x8e>
	...

08008598 <_printf_i>:
 8008598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800859c:	7e0f      	ldrb	r7, [r1, #24]
 800859e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085a0:	2f78      	cmp	r7, #120	@ 0x78
 80085a2:	4691      	mov	r9, r2
 80085a4:	4680      	mov	r8, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	469a      	mov	sl, r3
 80085aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085ae:	d807      	bhi.n	80085c0 <_printf_i+0x28>
 80085b0:	2f62      	cmp	r7, #98	@ 0x62
 80085b2:	d80a      	bhi.n	80085ca <_printf_i+0x32>
 80085b4:	2f00      	cmp	r7, #0
 80085b6:	f000 80d1 	beq.w	800875c <_printf_i+0x1c4>
 80085ba:	2f58      	cmp	r7, #88	@ 0x58
 80085bc:	f000 80b8 	beq.w	8008730 <_printf_i+0x198>
 80085c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085c8:	e03a      	b.n	8008640 <_printf_i+0xa8>
 80085ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085ce:	2b15      	cmp	r3, #21
 80085d0:	d8f6      	bhi.n	80085c0 <_printf_i+0x28>
 80085d2:	a101      	add	r1, pc, #4	@ (adr r1, 80085d8 <_printf_i+0x40>)
 80085d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085d8:	08008631 	.word	0x08008631
 80085dc:	08008645 	.word	0x08008645
 80085e0:	080085c1 	.word	0x080085c1
 80085e4:	080085c1 	.word	0x080085c1
 80085e8:	080085c1 	.word	0x080085c1
 80085ec:	080085c1 	.word	0x080085c1
 80085f0:	08008645 	.word	0x08008645
 80085f4:	080085c1 	.word	0x080085c1
 80085f8:	080085c1 	.word	0x080085c1
 80085fc:	080085c1 	.word	0x080085c1
 8008600:	080085c1 	.word	0x080085c1
 8008604:	08008743 	.word	0x08008743
 8008608:	0800866f 	.word	0x0800866f
 800860c:	080086fd 	.word	0x080086fd
 8008610:	080085c1 	.word	0x080085c1
 8008614:	080085c1 	.word	0x080085c1
 8008618:	08008765 	.word	0x08008765
 800861c:	080085c1 	.word	0x080085c1
 8008620:	0800866f 	.word	0x0800866f
 8008624:	080085c1 	.word	0x080085c1
 8008628:	080085c1 	.word	0x080085c1
 800862c:	08008705 	.word	0x08008705
 8008630:	6833      	ldr	r3, [r6, #0]
 8008632:	1d1a      	adds	r2, r3, #4
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6032      	str	r2, [r6, #0]
 8008638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800863c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008640:	2301      	movs	r3, #1
 8008642:	e09c      	b.n	800877e <_printf_i+0x1e6>
 8008644:	6833      	ldr	r3, [r6, #0]
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	1d19      	adds	r1, r3, #4
 800864a:	6031      	str	r1, [r6, #0]
 800864c:	0606      	lsls	r6, r0, #24
 800864e:	d501      	bpl.n	8008654 <_printf_i+0xbc>
 8008650:	681d      	ldr	r5, [r3, #0]
 8008652:	e003      	b.n	800865c <_printf_i+0xc4>
 8008654:	0645      	lsls	r5, r0, #25
 8008656:	d5fb      	bpl.n	8008650 <_printf_i+0xb8>
 8008658:	f9b3 5000 	ldrsh.w	r5, [r3]
 800865c:	2d00      	cmp	r5, #0
 800865e:	da03      	bge.n	8008668 <_printf_i+0xd0>
 8008660:	232d      	movs	r3, #45	@ 0x2d
 8008662:	426d      	negs	r5, r5
 8008664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008668:	4858      	ldr	r0, [pc, #352]	@ (80087cc <_printf_i+0x234>)
 800866a:	230a      	movs	r3, #10
 800866c:	e011      	b.n	8008692 <_printf_i+0xfa>
 800866e:	6821      	ldr	r1, [r4, #0]
 8008670:	6833      	ldr	r3, [r6, #0]
 8008672:	0608      	lsls	r0, r1, #24
 8008674:	f853 5b04 	ldr.w	r5, [r3], #4
 8008678:	d402      	bmi.n	8008680 <_printf_i+0xe8>
 800867a:	0649      	lsls	r1, r1, #25
 800867c:	bf48      	it	mi
 800867e:	b2ad      	uxthmi	r5, r5
 8008680:	2f6f      	cmp	r7, #111	@ 0x6f
 8008682:	4852      	ldr	r0, [pc, #328]	@ (80087cc <_printf_i+0x234>)
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	bf14      	ite	ne
 8008688:	230a      	movne	r3, #10
 800868a:	2308      	moveq	r3, #8
 800868c:	2100      	movs	r1, #0
 800868e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008692:	6866      	ldr	r6, [r4, #4]
 8008694:	60a6      	str	r6, [r4, #8]
 8008696:	2e00      	cmp	r6, #0
 8008698:	db05      	blt.n	80086a6 <_printf_i+0x10e>
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	432e      	orrs	r6, r5
 800869e:	f021 0104 	bic.w	r1, r1, #4
 80086a2:	6021      	str	r1, [r4, #0]
 80086a4:	d04b      	beq.n	800873e <_printf_i+0x1a6>
 80086a6:	4616      	mov	r6, r2
 80086a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80086ac:	fb03 5711 	mls	r7, r3, r1, r5
 80086b0:	5dc7      	ldrb	r7, [r0, r7]
 80086b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086b6:	462f      	mov	r7, r5
 80086b8:	42bb      	cmp	r3, r7
 80086ba:	460d      	mov	r5, r1
 80086bc:	d9f4      	bls.n	80086a8 <_printf_i+0x110>
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d10b      	bne.n	80086da <_printf_i+0x142>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	07df      	lsls	r7, r3, #31
 80086c6:	d508      	bpl.n	80086da <_printf_i+0x142>
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	6861      	ldr	r1, [r4, #4]
 80086cc:	4299      	cmp	r1, r3
 80086ce:	bfde      	ittt	le
 80086d0:	2330      	movle	r3, #48	@ 0x30
 80086d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086da:	1b92      	subs	r2, r2, r6
 80086dc:	6122      	str	r2, [r4, #16]
 80086de:	f8cd a000 	str.w	sl, [sp]
 80086e2:	464b      	mov	r3, r9
 80086e4:	aa03      	add	r2, sp, #12
 80086e6:	4621      	mov	r1, r4
 80086e8:	4640      	mov	r0, r8
 80086ea:	f7ff fee7 	bl	80084bc <_printf_common>
 80086ee:	3001      	adds	r0, #1
 80086f0:	d14a      	bne.n	8008788 <_printf_i+0x1f0>
 80086f2:	f04f 30ff 	mov.w	r0, #4294967295
 80086f6:	b004      	add	sp, #16
 80086f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	f043 0320 	orr.w	r3, r3, #32
 8008702:	6023      	str	r3, [r4, #0]
 8008704:	4832      	ldr	r0, [pc, #200]	@ (80087d0 <_printf_i+0x238>)
 8008706:	2778      	movs	r7, #120	@ 0x78
 8008708:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	6831      	ldr	r1, [r6, #0]
 8008710:	061f      	lsls	r7, r3, #24
 8008712:	f851 5b04 	ldr.w	r5, [r1], #4
 8008716:	d402      	bmi.n	800871e <_printf_i+0x186>
 8008718:	065f      	lsls	r7, r3, #25
 800871a:	bf48      	it	mi
 800871c:	b2ad      	uxthmi	r5, r5
 800871e:	6031      	str	r1, [r6, #0]
 8008720:	07d9      	lsls	r1, r3, #31
 8008722:	bf44      	itt	mi
 8008724:	f043 0320 	orrmi.w	r3, r3, #32
 8008728:	6023      	strmi	r3, [r4, #0]
 800872a:	b11d      	cbz	r5, 8008734 <_printf_i+0x19c>
 800872c:	2310      	movs	r3, #16
 800872e:	e7ad      	b.n	800868c <_printf_i+0xf4>
 8008730:	4826      	ldr	r0, [pc, #152]	@ (80087cc <_printf_i+0x234>)
 8008732:	e7e9      	b.n	8008708 <_printf_i+0x170>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	f023 0320 	bic.w	r3, r3, #32
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	e7f6      	b.n	800872c <_printf_i+0x194>
 800873e:	4616      	mov	r6, r2
 8008740:	e7bd      	b.n	80086be <_printf_i+0x126>
 8008742:	6833      	ldr	r3, [r6, #0]
 8008744:	6825      	ldr	r5, [r4, #0]
 8008746:	6961      	ldr	r1, [r4, #20]
 8008748:	1d18      	adds	r0, r3, #4
 800874a:	6030      	str	r0, [r6, #0]
 800874c:	062e      	lsls	r6, r5, #24
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	d501      	bpl.n	8008756 <_printf_i+0x1be>
 8008752:	6019      	str	r1, [r3, #0]
 8008754:	e002      	b.n	800875c <_printf_i+0x1c4>
 8008756:	0668      	lsls	r0, r5, #25
 8008758:	d5fb      	bpl.n	8008752 <_printf_i+0x1ba>
 800875a:	8019      	strh	r1, [r3, #0]
 800875c:	2300      	movs	r3, #0
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	4616      	mov	r6, r2
 8008762:	e7bc      	b.n	80086de <_printf_i+0x146>
 8008764:	6833      	ldr	r3, [r6, #0]
 8008766:	1d1a      	adds	r2, r3, #4
 8008768:	6032      	str	r2, [r6, #0]
 800876a:	681e      	ldr	r6, [r3, #0]
 800876c:	6862      	ldr	r2, [r4, #4]
 800876e:	2100      	movs	r1, #0
 8008770:	4630      	mov	r0, r6
 8008772:	f7f7 fd35 	bl	80001e0 <memchr>
 8008776:	b108      	cbz	r0, 800877c <_printf_i+0x1e4>
 8008778:	1b80      	subs	r0, r0, r6
 800877a:	6060      	str	r0, [r4, #4]
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	2300      	movs	r3, #0
 8008782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008786:	e7aa      	b.n	80086de <_printf_i+0x146>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	4632      	mov	r2, r6
 800878c:	4649      	mov	r1, r9
 800878e:	4640      	mov	r0, r8
 8008790:	47d0      	blx	sl
 8008792:	3001      	adds	r0, #1
 8008794:	d0ad      	beq.n	80086f2 <_printf_i+0x15a>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	079b      	lsls	r3, r3, #30
 800879a:	d413      	bmi.n	80087c4 <_printf_i+0x22c>
 800879c:	68e0      	ldr	r0, [r4, #12]
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	4298      	cmp	r0, r3
 80087a2:	bfb8      	it	lt
 80087a4:	4618      	movlt	r0, r3
 80087a6:	e7a6      	b.n	80086f6 <_printf_i+0x15e>
 80087a8:	2301      	movs	r3, #1
 80087aa:	4632      	mov	r2, r6
 80087ac:	4649      	mov	r1, r9
 80087ae:	4640      	mov	r0, r8
 80087b0:	47d0      	blx	sl
 80087b2:	3001      	adds	r0, #1
 80087b4:	d09d      	beq.n	80086f2 <_printf_i+0x15a>
 80087b6:	3501      	adds	r5, #1
 80087b8:	68e3      	ldr	r3, [r4, #12]
 80087ba:	9903      	ldr	r1, [sp, #12]
 80087bc:	1a5b      	subs	r3, r3, r1
 80087be:	42ab      	cmp	r3, r5
 80087c0:	dcf2      	bgt.n	80087a8 <_printf_i+0x210>
 80087c2:	e7eb      	b.n	800879c <_printf_i+0x204>
 80087c4:	2500      	movs	r5, #0
 80087c6:	f104 0619 	add.w	r6, r4, #25
 80087ca:	e7f5      	b.n	80087b8 <_printf_i+0x220>
 80087cc:	0800893d 	.word	0x0800893d
 80087d0:	0800894e 	.word	0x0800894e

080087d4 <memmove>:
 80087d4:	4288      	cmp	r0, r1
 80087d6:	b510      	push	{r4, lr}
 80087d8:	eb01 0402 	add.w	r4, r1, r2
 80087dc:	d902      	bls.n	80087e4 <memmove+0x10>
 80087de:	4284      	cmp	r4, r0
 80087e0:	4623      	mov	r3, r4
 80087e2:	d807      	bhi.n	80087f4 <memmove+0x20>
 80087e4:	1e43      	subs	r3, r0, #1
 80087e6:	42a1      	cmp	r1, r4
 80087e8:	d008      	beq.n	80087fc <memmove+0x28>
 80087ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087f2:	e7f8      	b.n	80087e6 <memmove+0x12>
 80087f4:	4402      	add	r2, r0
 80087f6:	4601      	mov	r1, r0
 80087f8:	428a      	cmp	r2, r1
 80087fa:	d100      	bne.n	80087fe <memmove+0x2a>
 80087fc:	bd10      	pop	{r4, pc}
 80087fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008806:	e7f7      	b.n	80087f8 <memmove+0x24>

08008808 <_realloc_r>:
 8008808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800880c:	4607      	mov	r7, r0
 800880e:	4614      	mov	r4, r2
 8008810:	460d      	mov	r5, r1
 8008812:	b921      	cbnz	r1, 800881e <_realloc_r+0x16>
 8008814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008818:	4611      	mov	r1, r2
 800881a:	f7ff bbad 	b.w	8007f78 <_malloc_r>
 800881e:	b92a      	cbnz	r2, 800882c <_realloc_r+0x24>
 8008820:	f7ff fcaa 	bl	8008178 <_free_r>
 8008824:	4625      	mov	r5, r4
 8008826:	4628      	mov	r0, r5
 8008828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882c:	f000 f81a 	bl	8008864 <_malloc_usable_size_r>
 8008830:	4284      	cmp	r4, r0
 8008832:	4606      	mov	r6, r0
 8008834:	d802      	bhi.n	800883c <_realloc_r+0x34>
 8008836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800883a:	d8f4      	bhi.n	8008826 <_realloc_r+0x1e>
 800883c:	4621      	mov	r1, r4
 800883e:	4638      	mov	r0, r7
 8008840:	f7ff fb9a 	bl	8007f78 <_malloc_r>
 8008844:	4680      	mov	r8, r0
 8008846:	b908      	cbnz	r0, 800884c <_realloc_r+0x44>
 8008848:	4645      	mov	r5, r8
 800884a:	e7ec      	b.n	8008826 <_realloc_r+0x1e>
 800884c:	42b4      	cmp	r4, r6
 800884e:	4622      	mov	r2, r4
 8008850:	4629      	mov	r1, r5
 8008852:	bf28      	it	cs
 8008854:	4632      	movcs	r2, r6
 8008856:	f7ff fc81 	bl	800815c <memcpy>
 800885a:	4629      	mov	r1, r5
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff fc8b 	bl	8008178 <_free_r>
 8008862:	e7f1      	b.n	8008848 <_realloc_r+0x40>

08008864 <_malloc_usable_size_r>:
 8008864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008868:	1f18      	subs	r0, r3, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	bfbc      	itt	lt
 800886e:	580b      	ldrlt	r3, [r1, r0]
 8008870:	18c0      	addlt	r0, r0, r3
 8008872:	4770      	bx	lr

08008874 <_init>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	bf00      	nop
 8008878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887a:	bc08      	pop	{r3}
 800887c:	469e      	mov	lr, r3
 800887e:	4770      	bx	lr

08008880 <_fini>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr
